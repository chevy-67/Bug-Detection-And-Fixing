buggy_code,fixed_code
"submittedNode.get(""values"") != null","submittedNode.get(""values"") == null"
"Arrays.asList(""ls"",""pwd"")","Arrays.asList(""cmd"",""ls"",""pwd"")"
"Arrays.asList(""ls"",""pwd"")","Arrays.asList(""cmd"",""ls"",""pwd"")"
"taskService.createTaskQuery().or().taskInvolvedUser(""involvedUser"").taskInvolvedGroups(groups)","taskService.createTaskQuery().or().taskInvolvedUser(""involvedUser"").taskInvolvedGroupsIn(groups)"
"taskService.createTaskQuery().or().taskInvolvedUser(""involvedUser"").taskInvolvedGroups(groups)","taskService.createTaskQuery().or().taskInvolvedUser(""involvedUser"").taskInvolvedGroupsIn(groups)"
"waitForJobExecutorToProcessAllJobs(3000,500)","waitForJobExecutorToProcessAllJobs(5000,500)"
"waitForJobExecutorToProcessAllJobs(3000,500)","waitForJobExecutorToProcessAllJobs(5000,500)"
"logger.error(""Error getting value for expression "" + expressionField.getExpression() + "" ""+ e.getMessage())","logger.error(""Error getting value for expression "" + expressionField.getExpression() + "" ""+ e.getMessage(),e)"
variables.putAll(variables),variables.putAll(transientVariabes)
DATABASE_TYPE_MYSQL.equals(databaseType),DATABASE_TYPE_MSSQL.equals(databaseType)
DATABASE_TYPE_MYSQL.equals(databaseType),DATABASE_TYPE_MSSQL.equals(databaseType)
new Long(3),new Long(4)
"log.debug(""Error while closing command context"",exception)","log.error(""Error while closing command context"",exception)"
"log.debug(""Error while closing command context"",exception)","log.error(""Error while closing command context"",exception)"
"log.debug(""Error while closing command context"",exception)","log.error(""Error while closing command context"",exception)"
"log.debug(""Error while closing command context"",exception)","log.error(""Error while closing command context"",exception)"
"log.debug(""Error while closing command context"",exception)","log.error(""Error while closing command context"",exception)"
"log.debug(""Error while closing command context"",exception)","log.error(""Error while closing command context"",exception)"
getDatabaseSchema() != null,getDatabaseSchema() != null && getDatabaseSchema().length() > 0
getDatabaseCatalog() != null,getDatabaseCatalog() != null && getDatabaseCatalog().length() > 0
"waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)","executeJobExecutorForTime(10000,200)"
"waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)","executeJobExecutorForTime(10000,200)"
"waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)","executeJobExecutorForTime(10000,200)"
"waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)","executeJobExecutorForTime(10000,200)"
"calendar.set(Calendar.YEAR,2200)","calendar.set(Calendar.YEAR,2030)"
"calendar.set(Calendar.YEAR,2200)","calendar.set(Calendar.YEAR,2030)"
"waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)","waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000,200)"
"executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)","executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)"
"executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)","executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)"
xtw.writeCharacters(customProperty.getSimpleValue()),xtw.writeCData(customProperty.getSimpleValue())
xtw.writeCharacters(customProperty.getSimpleValue()),xtw.writeCData(customProperty.getSimpleValue())
xtw.writeCharacters(customProperty.getSimpleValue()),xtw.writeCData(customProperty.getSimpleValue())
xtw.writeCharacters(customProperty.getSimpleValue()),xtw.writeCData(customProperty.getSimpleValue())
execution.getJobs().remove(this),execution.getJobs().remove(jobEntity)
"new GetExecutionVariableInstancesCmd(executionId,variableNames,false)","new GetExecutionVariableInstancesCmd(executionId,variableNames,true)"
"new GetExecutionVariableInstancesCmd(executionId,variableNames,false,locale,withLocalizationFallback)","new GetExecutionVariableInstancesCmd(executionId,variableNames,true,locale,withLocalizationFallback)"
"new GetExecutionVariableInstancesCmd(executionId,variableNames,false)","new GetExecutionVariableInstancesCmd(executionId,variableNames,true)"
"new GetExecutionVariableInstancesCmd(executionId,variableNames,false,locale,withLocalizationFallback)","new GetExecutionVariableInstancesCmd(executionId,variableNames,true,locale,withLocalizationFallback)"
StringUtils.isEmpty(formKey),StringUtils.isEmpty(finalFormKey)
StringUtils.isEmpty(formKey),StringUtils.isEmpty(finalFormKey)
bulkInsertableMap.get(entityClass),bulkInsertableMap.get(persistentObjectClass)
bulkInsertableMap.get(persistentObjectClass),bulkInsertableMap.containsKey(persistentObjectClass)
bulkInsertableMap.get(persistentObjectClass),bulkInsertableMap.containsKey(persistentObjectClass)
processInstanceArray.size() == 0,processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())
processInstanceArray.size() == 0,processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())
IOUtils.toString(stencilsetStream),"IOUtils.toString(stencilsetStream,""utf-8"")"
idAnnotation != null,idAnnotation != null && !method.isBridge()
idAnnotation != null,idAnnotation != null && !method.isBridge()
entity instanceof ProcessDefinition,entity instanceof ProcessDefinitionEntity
entity instanceof ProcessDefinition,entity instanceof ProcessDefinitionEntity
IOUtils.toString(stencilsetStream),"IOUtils.toString(stencilsetStream,""utf-8"")"
idAnnotation != null,idAnnotation != null && !method.isBridge()
"new ContinueProcessOperation(this,execution,true)","new ContinueProcessOperation(commandContext,execution,true)"
"log.error(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")","log.info(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")"
"log.error(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")","log.info(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")"
"log.error(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")","log.info(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")"
"log.error(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")","log.info(""activitiy or FailedJobRetryTimerCycleValue is null in job "" + jobId + ""'. only decrementing retries."")"
DefaultManagementAgent.class,DefaultManagementMBeanAssembler.class
DefaultManagementAgent.class,MBeanInfoAssembler.class
DefaultManagementAgent.class,DefaultManagementMBeanAssembler.class
DefaultManagementAgent.class,MBeanInfoAssembler.class
processEngineConfiguration.setEnableSafeBpmnXml(false),processEngineConfiguration.setEnableSafeBpmnXml(true)
"assertEquals(0,beanInfo.getAttributes().length)","assertEquals(2,beanInfo.getAttributes().length)"
"assertEquals(0,beanInfo.getOperations().length)","assertEquals(1,beanInfo.getOperations().length)"
dbSqlSessionFactory.getDatabaseCatalog() != null,dbSqlSessionFactory.getDatabaseCatalog() != null && dbSqlSessionFactory.getDatabaseCatalog().length() > 0
dbSqlSessionFactory.getDatabaseSchema() != null,dbSqlSessionFactory.getDatabaseSchema() != null && dbSqlSessionFactory.getDatabaseSchema().length() > 0
new Date(0),new Date(1)
new Date(0),new Date(1)
new Date(0),new Date(1)
executionManager.findChildExecutionsByParentExecutionId(processInstanceId),executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)
executionManager.findChildExecutionsByParentExecutionId(processInstanceId),executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)
AcquireJobsRunnable.class,ExecuteJobsRunnable.class
processDefinition.getTenantId() == null,processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
processDefinition.getTenantId() == null,processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
deployOneTaskProcess(),deployOneTaskTestProcess()
deployOneTaskProcess(),deployOneTaskTestProcess()
deployOneTaskProcess(),deployOneTaskTestProcess()
deployOneTaskProcess(),deployOneTaskTestProcess()
"log.error(""Error while closing command context"",exception)","log.debug(""Error while closing command context"",exception)"
"log.error(""Error while closing command context"",exception)","log.debug(""Error while closing command context"",exception)"
"assertResultsPresentInDataResponse(url,timerJob.getId())","assertResultsPresentInDataResponse(url,asyncJob.getId(),timerJob.getId())"
processEngineConfiguration.getCommandExecutorTxRequiresNew(),processEngineConfiguration.getCommandExecutor()
processEngineConfiguration.getCommandExecutorTxRequiresNew(),processEngineConfiguration.getCommandExecutor()
processEngineConfiguration.getCommandExecutorTxRequiresNew(),processEngineConfiguration.getCommandExecutor()
processEngineConfiguration.getCommandExecutorTxRequiresNew(),processEngineConfiguration.getCommandExecutor()
ExceptionUtils.getFullStackTrace(th),ExceptionUtils.getStackTrace(th)
ExceptionUtils.getFullStackTrace(th),ExceptionUtils.getStackTrace(th)
request.getTaskDefinitionKey(),request.getDueDate()
request.getTaskDefinitionKey(),request.getDueDate()
request.getTaskDefinitionKey(),request.getDueBefore()
request.getTaskDefinitionKey(),request.getDueBefore()
request.getTaskDefinitionKey(),request.getDueAfter()
request.getTaskDefinitionKey(),request.getDueAfter()
processInstance.getId(),processInstance.getProcessDefinitionId()
processInstance.getId(),processInstance.getProcessDefinitionId()
srcActivity.getParent() == null,srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity)
srcActivity.getParent() == null,srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity)
new DatabaseFormatterOracle(),new DatabaseFormatterDb2()
new DatabaseFormatterOracle(),new DatabaseFormatterPostgres()
"assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count())"
"assertEquals(2,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())"
"assertEquals(1,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())"
"assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())"
"assertEquals(1,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())"
"assertEquals(2,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())"
"assertEquals(1,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())"
"assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"
"assertEquals(1,historyService.createHistoricActivityInstanceQuery().finished().list().size())","assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"
applicationContext != null,processEngineConfiguration.getExpressionManager() == null && applicationContext != null
1,1025
taskService.createTaskQuery().orderByTaskId(),taskService.createTaskQuery().orderByExecutionId()
taskService.createTaskQuery().orderByTaskId(),taskService.createTaskQuery().orderByExecutionId()
exclude,!exclude
TestSuite testSuite=new TestSuite(testClass); ,ServletTestSuite testSuite=new ServletTestSuite(testClass); 
new ReadonlyMapELResolver(beans),new ReadOnlyMapELResolver(beans)
bytesRead != 0,bytesRead == 0
"LOG.warn(""Failed to send receipt of data to worker {} for request {}: {}."",mAddress,mReadRequest,e.getMessage())","LOG.debug(""Failed to send receipt of data to worker {} for request {}: {}."",mAddress,mReadRequest,e.getMessage())"
"LOG.warn(""Failed to send receipt of data to worker {} for request {}: {}."",mAddress,mReadRequest,e.getMessage())","LOG.debug(""Failed to send receipt of data to worker {} for request {}: {}."",mAddress,mReadRequest,e.getMessage())"
URIStatus::getBlockSizeBytes,URIStatus::getLength
RaftJournalSystem.class,JournalStateMachine.class
"LOG.info(""Ignoring duplicate journal entry with SN {} when next SN is {}"",newSN,mNextSequenceNumberToRead)","LOG.debug(""Ignoring duplicate journal entry with SN {} when next SN is {}"",newSN,mNextSequenceNumberToRead)"
"LOG.info(""Ignoring duplicate journal entry with SN {} when next SN is {}"",newSN,mNextSequenceNumberToRead)","LOG.debug(""Ignoring duplicate journal entry with SN {} when next SN is {}"",newSN,mNextSequenceNumberToRead)"
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL),Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL),Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL),Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL),Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
(short)600,(short)0600
(short)777,(short)0777
(short)655,(short)0655
mLockMode == InodeTree.LockMode.READ,lockMode == InodeTree.LockMode.READ
mLockMode == InodeTree.LockMode.READ,lockMode == InodeTree.LockMode.READ
e.getMessage(),e.toString()
e.getMessage(),e.toString()
Preconditions.checkNotNull(location),"Preconditions.checkNotNull(location,""location"")"
retry.attemptRetry(),retry.attempt()
retry.attemptRetry(),retry.attempt()
LOG.warn(e.getMessage()),"LOG.warn(""Failed to delete path from UFS: {}"",e.getMessage())"
LOG.warn(e.getMessage()),"LOG.warn(""SpaceReserver failed to free tier {} to {} bytes used: {}"",tierAlias,reservedSpace,e.getMessage())"
retry.attemptRetry(),retry.attempt()
retry.attemptRetry(),retry.attempt()
Preconditions.checkNotNull(uri),"Preconditions.checkNotNull(uri,""uri"")"
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM),obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM),obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM),meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM),meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM),obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM),obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM),meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM),meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM),obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM),obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM),meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM),meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
!NettyUtils.isDomainSocketSupported(dataSource),NettyUtils.isDomainSocketSupported(dataSource)
mLocalWorkerAddress.getRpcPort(),mLocalWorkerAddress.getDataPort()
mLocalWorkerAddress.getRpcPort(),mLocalWorkerAddress.getDataPort()
1,1
1,1
1,0
1,0
return false; ,return true; 
"Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)","Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)"
"Mockito.verify(mFileSystemMasterClient).rename(src,dst)","Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)"
"Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst)","Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst,renameOptions)"
2,18
2,18
2,18
stat.st_size.get(),stat.st_size.longValue()
stat.st_size.get(),stat.st_size.longValue()
stat.st_ctim.tv_nsec.get(),stat.st_ctim.tv_nsec.longValue()
stat.st_ctim.tv_nsec.get(),stat.st_ctim.tv_nsec.longValue()
stat.st_mtim.tv_nsec.get(),stat.st_mtim.tv_nsec.longValue()
stat.st_mtim.tv_nsec.get(),stat.st_mtim.tv_nsec.longValue()
stat.st_mode.get(),stat.st_mode.intValue()
stat.st_mode.get(),stat.st_mode.intValue()
return EOF_BLOCK_ID; ,return EOF_DATA; 
key.equals(PropertyKey.ZOOKEEPER_ENABLED),!key.equals(PropertyKey.ZOOKEEPER_ENABLED)
1,33
1,33
1,33
LOCAL_OPTION.getOpt(),LOCAL_OPTION.getLongOpt()
LOCAL_OPTION.getOpt(),LOCAL_OPTION.getLongOpt()
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating short circuit output stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit output stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating short circuit output stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit output stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating short circuit output stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit output stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating short circuit output stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit output stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty output stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating short circuit input stream for block {} @ {}"",blockId,address)","LOG.debug(""Creating short circuit input stream for block {} @ {}"",blockId,address)"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
"LOG.info(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())","LOG.debug(""Creating netty input stream for block {} @ {} from client {}"",blockId,address,NetworkAddressUtils.getClientHostName())"
Preconditions.checkNotNull(containerIdGenerator),"Preconditions.checkNotNull(containerIdGenerator,""containerIdGenerator"")"
Preconditions.checkNotNull(blockIds),"Preconditions.checkNotNull(blockIds,""blockIds"")"
Preconditions.checkNotNull(fileSystemMaster),"Preconditions.checkNotNull(fileSystemMaster,""fileSystemMaster"")"
mUfs.create(testFile),"mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))"
mUfs.create(testFile),"mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))"
LinkedList<>,ArrayList<>
LinkedList<>,ArrayList<>
AlluxioLogServer.class,AlluxioLogServerProcess.class
Integer.valueOf(options.getMaxKeys()),Integer.parseInt(options.getMaxKeys())
Integer.valueOf(options.getMaxKeys()),Integer.parseInt(options.getMaxKeys())
"System.err.format(""Tier %d: Not enough space on %s. %n"" + ""Desired quota: %s%n"" + ""Used in tiered storage: %s%n""+ ""Available: %s%n"",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available))","System.err.format(""Tier %d: Not enough space on %s. %n"" + ""Desired quota: %s%n"" + ""Used in tiered storage: %s%n""+ ""Available: %s%n"",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available),FormatUtils.getSizeFromBytes(quota - used - available))"
"PathUtils.concatPath(filePath,YML_FILE_DIR)","PathUtils.concatPath(homeDir,YML_FILE_DIR)"
"PathUtils.concatPath(filePath,YML_FILE_DIR)","PathUtils.concatPath(homeDir,YML_FILE_DIR)"
1,17
Preconditions.checkNotNull(path),"Preconditions.checkNotNull(path,""path"")"
Preconditions.checkNotNull(path),"Preconditions.checkNotNull(path,""path"")"
Preconditions.checkNotNull(hostname),"Preconditions.checkNotNull(hostname,""hostname"")"
18,26
2,18
1,17
1,17
Preconditions.checkNotNull(mBlockIdsOnTiers),"Preconditions.checkNotNull(mBlockIdsOnTiers,""mBlockIdsOnTiers"")"
Preconditions.checkNotNull(mBlockIdsOnTiers),"Preconditions.checkNotNull(mBlockIdsOnTiers,""mBlockIdsOnTiers"")"
Preconditions.checkNotNull(manager),"Preconditions.checkNotNull(manager,""manager"")"
Preconditions.checkNotNull(mBlockIdsOnTiers),"Preconditions.checkNotNull(mBlockIdsOnTiers,""mBlockIdsOnTiers"")"
Preconditions.checkNotNull(mBlockIdsOnTiers),"Preconditions.checkNotNull(mBlockIdsOnTiers,""mBlockIdsOnTiers"")"
Preconditions.checkNotNull(manager),"Preconditions.checkNotNull(manager,""manager"")"
Preconditions.checkNotNull(mBlockIdsOnTiers),"Preconditions.checkNotNull(mBlockIdsOnTiers,""mBlockIdsOnTiers"")"
Preconditions.checkNotNull(mBlockIdsOnTiers),"Preconditions.checkNotNull(mBlockIdsOnTiers,""mBlockIdsOnTiers"")"
Preconditions.checkNotNull(manager),"Preconditions.checkNotNull(manager,""manager"")"
Preconditions.checkNotNull(blockWorker),"Preconditions.checkNotNull(blockWorker,""blockWorker"")"
Preconditions.checkNotNull(blockWorker),"Preconditions.checkNotNull(blockWorker,""blockWorker"")"
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS),Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS),Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS),Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS),Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS),Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS),Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS),Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS),Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS),Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)
Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS),Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)
"LOG.warn(""Failed to get mount information: {}"",e.getMessage())","LOG.debug(""Failed to get mount information: {}"",e.getMessage())"
"LOG.warn(""Failed to get mount information: {}"",e.getMessage())","LOG.debug(""Failed to get mount information: {}"",e.getMessage())"
status.isDir(),!status.isDir()
status.isDir(),!status.isDir()
status.isDirectory(),status.isDir()
status.isDirectory(),status.isDir()
status.isDirectory(),status.isDir()
status.isDirectory(),status.isDir()
Exception e,Throwable e
10,26
"ufsDeleter.delete(alluxioUriToDel,delInode)","!ufsDeleter.delete(alluxioUriToDel,delInode)"
!ufsSyncChecker.isDirectoryInSync(parentUri),alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)
"new UnderFileStatus(""dummy"",isDirectory)","new UnderFileStatus(""dummy"",0L,isDirectory,0L,""owner"",""group"",(short)077)"
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false),DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true)
"LOG.error(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)","LOG.warn(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)"
"LOG.error(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)","LOG.warn(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)"
"LOG.error(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)","LOG.warn(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)"
"LOG.error(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)","LOG.warn(""Failed to freeSpace: No StorageDirView has enough capacity of {} bytes"",availableBytes)"
1,17
1,17
"LOG.error(""Unable to delete {} because listInternal returns null"",path)","LOG.warn(""Unable to delete {} because listInternal returns null"",path)"
"LOG.error(""Unable to delete {} because listInternal returns null"",path)","LOG.warn(""Unable to delete {} because listInternal returns null"",path)"
1,17
UnavailableException e,IOException e
recursiveUFSDeletes.remove(ancestor),recursiveUFSDeletes.remove(ancestorPair)
1,1
10,26
10,26
"LOG.error(""delete failed: {}"",e.getMessage())","LOG.warn(""delete failed: {}"",e.getMessage())"
"LOG.error(""delete failed: {}"",e.getMessage())","LOG.warn(""delete failed: {}"",e.getMessage())"
T,R
/**   * The resource.   */ private T mResource; ,/**   * The resource.   */ private R mResource; 
T resource,R resource
T,R
/**   * The resource.   */ private T mResource; ,/**   * The resource.   */ private R mResource; 
T resource,R resource
mError != null,mError == null
DefaultFileSystemMaster.class,FileSystemMaster.class
DefaultFileSystemMaster.class,FileSystemMaster.class
"free(path,false)","free(path,true)"
33,1
33,1
CommonUtils.randomString(random.nextInt(10)),CommonUtils.randomAlphaNumString(random.nextInt(10))
CommonUtils.randomString(random.nextInt(10)),CommonUtils.randomAlphaNumString(random.nextInt(10))
CommonUtils.randomString(random.nextInt(10)),CommonUtils.randomAlphaNumString(random.nextInt(10))
CommonUtils.randomString(random.nextInt(10)),CommonUtils.randomAlphaNumString(random.nextInt(10))
status.isDirectory(),status.isDir()
status.isDirectory(),status.isDir()
new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId)),"new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId),e)"
new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId)),"new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId),e)"
LOG.debug(e),"LOG.debug(""Exception: "",e)"
"LOG.error(""Fail to set owner for {} with user: {}, group: {}"",path,user,group,e)","LOG.error(""Fail to set owner for {} with user: {}, group: {}"",path,user,group)"
status.getCreationTimeMs(),status.getLastModificationTimeMs()
status.getCreationTimeMs(),status.getLastModificationTimeMs()
"PathUtils.concatPath(src,child)","PathUtils.concatPath(dst,child)"
Preconditions.checkNotNull(timer),"Preconditions.checkNotNull(timer,""timer"")"
Preconditions.checkNotNull(object),"Preconditions.checkNotNull(object,""object"")"
Preconditions.checkNotNull(timer),"Preconditions.checkNotNull(timer,""timer"")"
"UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)",UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)
"UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)",UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)
"UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)","UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)"
"UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)","UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)"
Preconditions.checkNotNull(worker),"Preconditions.checkNotNull(worker,""worker"")"
Preconditions.checkNotNull(worker),"Preconditions.checkNotNull(worker,""worker"")"
"WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)","WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)"
"WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)","WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)"
"BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)","BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)"
"BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)","BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)"
"USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)","USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)"
"setAttributeInternal(tempInodePath,true,opTimeMs,options)","setAttributeInternal(tempInodePath,false,opTimeMs,options)"
"setAttributeInternal(inodePath,true,opTimeMs,options)","setAttributeInternal(inodePath,false,opTimeMs,options)"
"setAttributeInternal(inodePath,false,entry.getOpTimeMs(),options)","setAttributeInternal(inodePath,true,entry.getOpTimeMs(),options)"
manualClock.addTimeMs(1020),manualClock.addTimeMs(1001)
1,17
"new ProcessBuilder(startScript,mMesosAddress,""-w"")","new ProcessBuilder(startScript,mMesosAddress)"
"LOG.error(""I/O error when running rpc"",e)","LOG.warn(""I/O error when running rpc"",e)"
"LOG.error(""I/O error when running rpc"",e)","LOG.warn(""I/O error when running rpc"",e)"
period < MINIMAL_POLL_PERIOD,period >= MINIMAL_POLL_PERIOD
mLocalAlluxioClusterResource.get().getWorkerAddress(),mLocalAlluxioClusterResource.get().getWorker()
mLocalAlluxioClusterResource.get().getWorkerAddress(),mLocalAlluxioClusterResource.get().getWorker()
"new SwiftRange(mPos,endPos)","new MidPartLongRange(mPos,endPos)"
bLocations[0].getNames(),bLocations[0].getHosts()
bLocations[0].getNames(),bLocations[0].getHosts()
"Assert.assertEquals(2,propertyCategories.size())","Assert.assertEquals(3,propertyCategories.size())"
"!mPreferredHost.equals(""localhost"")","mPreferredHost.equals(""localhost"")"
request.getRelaxLocality() == false,request.getRelaxLocality() == true
"FileInStream.create(status,options.toInStreamOptions(),mContext)","FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)"
AlluxioWorkerService.class,AlluxioWorker.class
BlockMasterClient.class,RetryHandlingBlockMasterClient.class
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); ,RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
BlockMasterClient.class,RetryHandlingBlockMasterClient.class
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); ,RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
BlockMasterClient.class,RetryHandlingBlockMasterClient.class
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); ,RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
BlockMasterClient.class,RetryHandlingBlockMasterClient.class
T,E
T,E
private final String mHostNameKey; ,private final PropertyKey mHostNameKey; 
private final String mBindHostKey; ,private final PropertyKey mBindHostKey; 
private final String mPortKey; ,private final PropertyKey mPortKey; 
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public String getHostNameKey(){   return mHostNameKey; } ,/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public PropertyKey getHostNameKey(){   return mHostNameKey; } 
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public String getBindHostKey(){   return mBindHostKey; } ,/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public PropertyKey getBindHostKey(){   return mBindHostKey; } 
/**   * Gets the key of service port.  * @return key of service port  */ public String getPortKey(){   return mPortKey; } ,/**   * Gets the key of service port.  * @return key of service port  */ public PropertyKey getPortKey(){   return mPortKey; } 
AlluxioWorker.class,DefaultAlluxioWorker.class
AlluxioWorker.class,DefaultAlluxioWorker.class
AlluxioWorker.class,DefaultAlluxioWorker.class
dstPath.getPath(),dstPath.toString()
dstPath.getPath(),dstPath.toString()
dstPath.getPath(),dstPath.toString()
dstPath.getPath(),dstPath.toString()
1,17
1,17
1,17
1,17
o instanceof CreateOptions,o instanceof MkdirsOptions
CreateOptions.class,MkdirsOptions.class
lookupService.lookupPrincipalByGroupName(user),lookupService.lookupPrincipalByName(user)
lookupService.lookupPrincipalByGroupName(user),lookupService.lookupPrincipalByName(user)
mBuffer.remaining() > toRead,mBuffer.remaining() >= toRead
10 * Constants.SECOND_MS,300 * Constants.SECOND_MS
10 * Constants.SECOND_MS,300 * Constants.SECOND_MS
4 * Constants.KB,8 * Constants.MB
8 * Constants.MB,4 * Constants.KB
8 * Constants.MB,4 * Constants.KB
Assert.fail(),"Assert.fail(String.format(""Expected file %s being deleted but it was not."",filePath))"
read(buffer),"read(buffer,0,(int)Math.min(buffer.length,len))"
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100),Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100),Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100),Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100),Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
BlockStoreContext.INSTANCE.hasLocalWorker(),!BlockStoreContext.INSTANCE.hasLocalWorker()
Assert.fail(),"Assert.fail(""createDirectory was expected to fail with FileAlreadyExistsException"")"
Assert.fail(),"Assert.fail(""createDirectory was expected to fail with FileAlreadyExistsException"")"
2,1
"Objects.hashCode(mLocationPolicy,mReadType)","Objects.hashCode(mLocationPolicy,mReadType,mCacheIncompleteBlock)"
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1),CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1),CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)
mBlockStream.remaining(),inStream.remaining()
mBlockStream.remaining(),inStream.remaining()
"new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName())","new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName(),Constants.SECURITY_AUTHORIZATION_PERMISSION_ENABLED,""true"")"
SecurityUtils.isSecurityEnabled(configuration),SecurityUtils.isAuthorizationEnabled(configuration)
SecurityUtils.isSecurityEnabled(configuration),SecurityUtils.isAuthorizationEnabled(configuration)
(short)0755,(short)0777
(short)0755,(short)0777
(short)0644,(short)0777
"getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)","getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"
"getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())","getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"
"getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)","getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"
"getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())","getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"
"getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)","getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"
"getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())","getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"
"getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)","getLsNoAclResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"
"getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())","getLsResultStr(""/testRoot/testDir"",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"
entry.getCompleteStore(),entry.getCreateStore()
entry.getCompleteStore(),entry.getCreateStore()
Mockito.anyString(),Mockito.any(WorkerNetAddress.class)
alluxioUri.getPath(),alluxioUriToLoad.getPath()
alluxioUri.getPath(),alluxioUriToLoad.getPath()
"UfsUtils.loadUfs(mFileSystem,new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList(""alluxio;exclusions"","";""),mLocalAlluxioClusterResource.get().getMasterConf())","UfsUtils.loadUfs(new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList(""alluxio;exclusions"","";""),mLocalAlluxioClusterResource.get().getMasterConf())"
path.toString(),path.getPath()
path.toString(),path.getPath()
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0,mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0,mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0,mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
"Assert.assertEquals(1,intValue)","Assert.assertEquals(256,intValue)"
"Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)","Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"
"Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)","Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"
"Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)","Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"
"String result=""""; ",StringBuilder sb=new StringBuilder(); 
mFileLength < mBlockSize,mFileLength <= mBlockSize
mFileLength - mPos < mBlockSize,mFileLength - mPos >= mBlockSize
4,4
fileInfo.getPath(),fileInfo.getUfsPath()
fileInfo.getPath(),fileInfo.getUfsPath()
lineageInfo.getParents(),lineageInfo.getChildren()
lineageInfo.getParents(),lineageInfo.getChildren()
"new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,""true"",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))","new LocalTachyonClusterResource(Constants.GB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,""true"",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))"
mTFS.exists(turi),!mTFS.exists(turi)
mTFS.exists(turi),!mTFS.exists(turi)
20,4
sExecutorService.shutdown(),sExecutorService.shutdownNow()
sExecutorService.shutdown(),sExecutorService.shutdownNow()
mFixedExecutionService.shutdown(),mRecomputeLauncherService.shutdown()
mFixedExecutionService.shutdown(),mRecomputeLauncherService.shutdown()
mFixedExecutionService.shutdown(),mBlockRemovalService.shutdown()
mFixedExecutionService.shutdown(),mBlockRemovalService.shutdown()
mFixedExecutionService.shutdown(),mPersistFileService.shutdown()
mFixedExecutionService.shutdown(),mPersistFileService.shutdown()
sExecutorService.shutdown(),sExecutorService.shutdownNow()
sExecutorService.shutdown(),sExecutorService.shutdownNow()
"/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractACLCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chgrp"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return ""chgrp <group> <path>"";   } } ","/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractAclCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chgrp"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return ""chgrp <group> <path>"";   } } "
"/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractACLCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chgrpr"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return ""chgrpr <group> <path>"";   } } ","/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractAclCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chgrpr"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return ""chgrpr <group> <path>"";   } } "
"/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractACLCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chmod"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return ""chmod <mode> <path>"";   } } ","/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractAclCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chmod"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return ""chmod <mode> <path>"";   } } "
"/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractACLCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chmodr"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return ""chmodr <mode> <path>"";   } } ","/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractAclCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chmodr"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return ""chmodr <mode> <path>"";   } } "
"/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractACLCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chown"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return ""chown <owner> <path>"";   } } ","/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractAclCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chown"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return ""chown <owner> <path>"";   } } "
"/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractACLCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chownr"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return ""chownr <owner> <path>"";   } } ","/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractAclCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return ""chownr"";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return ""chownr <owner> <path>"";   } } "
"new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE)","new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEYVALUE_ENABLED,""true"")"
ServiceLoader.load(MasterFactory.class),"ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())"
ServiceLoader.load(WorkerFactory.class),"ServiceLoader.load(WorkerFactory.class,WorkerFactory.class.getClassLoader())"
mPersistedFiles.removeAll(mPersistedFiles),mPersistedFiles.removeAll(persistedFiles)
"HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)","HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)"
CommonUtils.sleepMs(5),CommonUtils.sleepMs(200)
"HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)","HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)"
1,17
1,17
1,17
loadMetadataSuceeded=true,loadMetadataSuceeded=false
"NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address),mTachyonConf)",NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address))
Mockito.verify(mRMClient).start(),Mockito.verify(mRMClient).stop()
Mockito.verify(mRMClient).start(),Mockito.verify(mRMClient).stop()
TfsShell.convertMsToDate(files[0].getCreationTimeMs()),CommandUtils.convertMsToDate(files[0].getCreationTimeMs())
TfsShell.convertMsToDate(files[0].getCreationTimeMs()),CommandUtils.convertMsToDate(files[0].getCreationTimeMs())
TfsShell.convertMsToDate(files[1].getCreationTimeMs()),CommandUtils.convertMsToDate(files[1].getCreationTimeMs())
TfsShell.convertMsToDate(files[1].getCreationTimeMs()),CommandUtils.convertMsToDate(files[1].getCreationTimeMs())
TfsShell.convertMsToDate(files[2].getCreationTimeMs()),CommandUtils.convertMsToDate(files[2].getCreationTimeMs())
TfsShell.convertMsToDate(files[2].getCreationTimeMs()),CommandUtils.convertMsToDate(files[2].getCreationTimeMs())
TfsShell.convertMsToDate(files[3].getCreationTimeMs()),CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
TfsShell.convertMsToDate(files[3].getCreationTimeMs()),CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
mTestStream.getBytesFlushed(),mTestStream.getFlushedBytes()
mTestStream.getBytesFlushed(),mTestStream.getFlushedBytes()
mTestStream.getBytesFlushed(),mTestStream.getFlushedBytes()
mTestStream.getBytesFlushed(),mTestStream.getFlushedBytes()
mTestStream.getBytesFlushed(),mTestStream.getFlushedBytes()
mTestStream.getBytesFlushed(),mTestStream.getFlushedBytes()
33,1
33,1
33,1
"LOG.warn(""Unable to close socket selector"",ex)","LOG.warn(""Unable to close socket selector"")"
"LOG.warn(""Unable to close socket selector"",ex)","LOG.warn(""Unable to close socket selector"")"
"LOG.warn(""Block of ID "" + getCurrentBlockId() + "" could not be cached into Tachyon"",ioe)","LOG.warn(""Block of ID "" + getCurrentBlockId() + "" could not be cached into Tachyon"")"
"LOG.warn(""Failed to write into TachyonStorage, the block "" + getCurrentBlockId() + "" will not be in TachyonStorage"",ioe)","LOG.warn(""Failed to write into TachyonStorage, the block "" + getCurrentBlockId() + "" will not be in TachyonStorage"")"
"LOG.warn(""Failed to get TachyonStore stream, the block "" + currentBlockId + "" will not be in TachyonStorage"",ioe)","LOG.warn(""Failed to get TachyonStore stream, the block "" + currentBlockId + "" will not be in TachyonStorage"")"
"LOG.warn(""Failed to write to TachyonStore stream, block "" + getCurrentBlockId() + "" will not be in TachyonStorage."",ioe)","LOG.warn(""Failed to write to TachyonStore stream, block "" + getCurrentBlockId() + "" will not be in TachyonStorage."")"
"LOG.warn(""Promotion of block "" + blockId + "" failed."",ioe)","LOG.warn(""Promotion of block "" + blockId + "" failed."")"
totalBytesOnTiers.get(tierAlias) > 0,totalBytesOnTiers.containsKey(tierAlias) && totalBytesOnTiers.get(tierAlias) > 0
new DeleteOptions.Builder(ClientContext.getConf()),new DeleteOptions.Builder()
"LOG.warn(""Promotion of block "" + blockId + "" failed."",ioe)","LOG.warn(""Promotion of block "" + blockId + "" failed."")"
Sets.<Integer>newHashSet(),Sets.<Long>newHashSet()
Sets.<Integer>newHashSet(),Sets.<Long>newHashSet()
Sets.<Integer>newHashSet(),Sets.<Long>newHashSet()
Sets.<Integer>newHashSet(),Sets.<Long>newHashSet()
1,1
mLineageStore.requestFilePersistence(fileId),mLineageStore.reportLostFile(fileId)
mLineageStore.requestFilePersistence(fileId),mLineageStore.reportLostFile(fileId)
"LOG.warn(""Unable to close socket selector"",ex)","LOG.warn(""Unable to close socket selector"")"
"LOG.warn(""Unable to close socket selector"",ex)","LOG.warn(""Unable to close socket selector"")"
"LOG.warn(""Block of ID "" + getCurrentBlockId() + "" could not be cached into Tachyon"",ioe)","LOG.warn(""Block of ID "" + getCurrentBlockId() + "" could not be cached into Tachyon"")"
"LOG.warn(""Failed to write into TachyonStorage, the block "" + getCurrentBlockId() + "" will not be in TachyonStorage"",ioe)","LOG.warn(""Failed to write into TachyonStorage, the block "" + getCurrentBlockId() + "" will not be in TachyonStorage"")"
"LOG.warn(""Failed to get TachyonStore stream, the block "" + currentBlockId + "" will not be in TachyonStorage"",ioe)","LOG.warn(""Failed to get TachyonStore stream, the block "" + currentBlockId + "" will not be in TachyonStorage"")"
"LOG.warn(""Failed to write to TachyonStore stream, block "" + getCurrentBlockId() + "" will not be in TachyonStorage."",ioe)","LOG.warn(""Failed to write to TachyonStore stream, block "" + getCurrentBlockId() + "" will not be in TachyonStorage."")"
"LOG.warn(""Promotion of block "" + blockId + "" failed."",ioe)","LOG.warn(""Promotion of block "" + blockId + "" failed."")"
2,0
mMountTable.resolve(getPath(dir)).getPath(),mMountTable.resolve(getPath(dir)).toString()
mMountTable.resolve(getPath(dir)).getPath(),mMountTable.resolve(getPath(dir)).toString()
mMountTable.resolve(getPath(lastInode)).getPath(),mMountTable.resolve(getPath(lastInode)).toString()
mMountTable.resolve(getPath(lastInode)).getPath(),mMountTable.resolve(getPath(lastInode)).toString()
mMountTable.resolve(getPath(next)).getPath(),mMountTable.resolve(getPath(next)).toString()
mMountTable.resolve(getPath(next)).getPath(),mMountTable.resolve(getPath(next)).toString()
synchronized (mLostBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } ,synchronized (mBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } 
"removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())","removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"
"removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())","removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"
"removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())","removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"
"removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())","removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"
0,16
0,16
"mTfs.setPin(mTfs.open(path),true)",mTfs.unpin(mTfs.open(path))
"setPin(file,false)","setPin(file,true)"
mTfs.mkdirs(new TachyonURI(dirPath)),"mTfs.mkdirs(new TachyonURI(dirPath),true)"
mTfs.delete(mTfs.open(new TachyonURI(filePath))),"mTfs.delete(mTfs.open(new TachyonURI(filePath)),true)"
mTfs.delete(mTfs.open(new TachyonURI(dirPath))),"mTfs.delete(mTfs.open(new TachyonURI(dirPath)),true)"
mTfs.mkdirs(path),"mTfs.mkdirs(path,true)"
mTfs.delete(mTfs.open(path)),"mTfs.delete(mTfs.open(path),true)"
"mTfs.setPin(mTfs.open(path),false)","mTfs.setPin(mTfs.open(path),true)"
mTfs.free(mTfs.open(path)),"mTfs.free(mTfs.open(path),true)"
"conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY,Constants.DEFAULT_TFS_PERMISSIONS_UMASK)",conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY)
ufsPath.getPath(),ufsPath.toString()
ufsPath.getPath(),ufsPath.toString()
ufsPath.getPath(),ufsPath.toString()
ufsPath.getPath(),ufsPath.toString()
ufsPath.getPath(),ufsPath.toString()
ufsPath.getPath(),ufsPath.toString()
checkpointPath.getPath(),checkpointPath.toString()
checkpointPath.getPath(),checkpointPath.toString()
ufsPath.getPath(),ufsPath.toString()
ufsPath.getPath(),ufsPath.toString()
checkpointPath.getPath(),checkpointPath.toString()
checkpointPath.getPath(),checkpointPath.toString()
16,17
16,17
setComplete(length),setComplete(mLength)
SaslException.class,UnsupportedOperationException.class
10,26
tempBlock.getCommitPath(),tempBlock.getPath()
tempBlock.getCommitPath(),tempBlock.getPath()
index <= mInUseLocks.length(),index < mInUseLocks.length()
(offset >= start && offset <= start + len) || (end >= start && end <= start + len),(offset >= start && offset <= start + len) || (end >= start && end <= start + len) || (offset <= start && end >= start + len)
"new IllegalStateException(""PLAIN supports neither integrity nor privacy"")","new UnsupportedOperationException(""PLAIN doesn't support wrap or unwrap operation"")"
"new IllegalStateException(""PLAIN supports neither integrity nor privacy"")","new UnsupportedOperationException(""PLAIN doesn't support wrap or unwrap operation"")"
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName(),BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName(),BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
"new NetAddress(resolvedHost,resolvedPort,-1)","new NetAddress(resolvedHost,-1,resolvedPort)"
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName(),BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName(),BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
1,1
1,1
"LOG.error(""Error in response for blockId: "" + recvMsg.getBlockId() + "" message: ""+ recvMsg.getStatus().getMessage())","LOG.warn(""Error in response for blockId: "" + recvMsg.getBlockId() + "" message: ""+ recvMsg.getStatus().getMessage())"
"LOG.error(""Error in response for blockId: "" + recvMsg.getBlockId() + "" message: ""+ recvMsg.getStatus().getMessage())","LOG.warn(""Error in response for blockId: "" + recvMsg.getBlockId() + "" message: ""+ recvMsg.getStatus().getMessage())"
Preconditions.checkNotNull(mPinnedInodes),Preconditions.checkNotNull(pinnedInodes)
"Assert.assertEquals(masterAddress,new InetSocketAddress(""RemoteMaster1"",10000))","Assert.assertEquals(new InetSocketAddress(""RemoteMaster1"",10000),masterAddress)"
"Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,20000))","Assert.assertEquals(new InetSocketAddress(defaultHostname,20000),masterAddress)"
"Assert.assertEquals(masterAddress,new InetSocketAddress(""RemoteMaster3"",defaultPort))","Assert.assertEquals(new InetSocketAddress(""RemoteMaster3"",defaultPort),masterAddress)"
"Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,defaultPort))","Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),masterAddress)"
"Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,10001))","Assert.assertEquals(new InetSocketAddress(defaultHostname,10001),workerAddress)"
"Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,defaultPort))","Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),workerAddress)"
location.belongTo(BlockStoreLocation.anyTier()),location.equals(BlockStoreLocation.anyTier())
location.belongTo(BlockStoreLocation.anyTier()),location.equals(BlockStoreLocation.anyTier())
location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias)),location.equals(BlockStoreLocation.anyDirInTier(tierAlias))
location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias)),location.equals(BlockStoreLocation.anyDirInTier(tierAlias))
mDir.getDirId(),mDir.getDirIndex()
mDir.getDirId(),mDir.getDirIndex()
mHeartbeat != null,mHeartbeatExecutor != null
mHeartbeat != null,mHeartbeatExecutor != null
0,1
0,1
"Assert.assertEquals(result,expected)","Assert.assertEquals(expected,result)"
return false; ,return true; 
return false; ,return true; 
KeyType,K
Class.forName(mUfsClz).getConstructor(String.class),"Class.forName(mUfsClz).getConstructor(String.class,TachyonConf.class)"
UnderFileSystem.get(tmpFolder),"UnderFileSystem.get(tmpFolder,ufsConf)"
UnderFileSystem.get(tmpFolder),"UnderFileSystem.get(tmpFolder,ufsConf)"
"mTfs.createFile(new TachyonURI(""/root/testFile1""))","tfs.createFile(new TachyonURI(""/root/testFile1""))"
"mTfs.createFile(new TachyonURI(""/root/testFile1""))","tfs.createFile(new TachyonURI(""/root/testFile1""))"
mTfs.getFile(fileId),tfs.getFile(fileId)
mTfs.getFile(fileId),tfs.getFile(fileId)
"mTfs.createFile(new TachyonURI(""/root/testFile1""))","tfs.createFile(new TachyonURI(""/root/testFile1""))"
"mTfs.createFile(new TachyonURI(""/root/testFile1""))","tfs.createFile(new TachyonURI(""/root/testFile1""))"
mTfs.getFile(fileId),tfs.getFile(fileId)
mTfs.getFile(fileId),tfs.getFile(fileId)
"getIntProperty(""tachyon.master.web.threads"",5)","getIntProperty(""tachyon.master.web.threads"",9)"
Integer.toString(1),Integer.toString(9)
32,0
18,26
k < THREADS,k < FILES
k < THREADS,k < FILES
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
k < THREADS,k < FILES
k < THREADS,k < FILES
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,pId + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
mWorkerId + BASE_FILE_NUMBER,times + BASE_FILE_NUMBER
JsonObject.createObjectMapper().getJsonFactory(),JsonObject.createObjectMapper().getFactory()
JsonObject.createObjectMapper().getJsonFactory(),JsonObject.createObjectMapper().getFactory()
JsonObject.createObjectMapper().getJsonFactory(),JsonObject.createObjectMapper().getFactory()
JsonObject.createObjectMapper().getJsonFactory(),JsonObject.createObjectMapper().getFactory()
1000L * FILE_BYTES,1000.0 * FILE_BYTES
1000L * FILES_BYTES,1000.0 * FILES_BYTES
FILES_BYTES * 1000L,FILES_BYTES * 1000.0
FILES_BYTES * 1000L,FILES_BYTES * 1000.0
userId <= 0,userId > 0
"masterAddress.split("":"").length != 2","masterAddress.split("":"").length == 2"
ret == null,ret != null
!mIsMessageReady,mIsMessageReady
mkdirs(mBaseDir),!mkdirs(mBaseDir)
"mTfs.ls(Constants.PATH_SEPARATOR,true)","tfs.ls(Constants.PATH_SEPARATOR,true)"
"mTfs.ls(Constants.PATH_SEPARATOR,true)","tfs.ls(Constants.PATH_SEPARATOR,true)"
"mTfs.ls(Constants.PATH_SEPARATOR,true)","tfs.ls(Constants.PATH_SEPARATOR,true)"
"mTfs.ls(Constants.PATH_SEPARATOR,true)","tfs.ls(Constants.PATH_SEPARATOR,true)"
InvalidPathException.class,FileAlreadyExistException.class
"new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)","new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"
"new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)","new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"
currentPath.isEmpty(),currentPath == null || currentPath.isEmpty()
mCurrentBlockLeftByte > tLen,mCurrentBlockLeftByte >= tLen
getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER),!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,1
34,34
33,33
"mFs.mkdirs(new Path(path),null)",mFs.mkdirs(new Path(path))
"mFs.mkdirs(new Path(path),null)",mFs.mkdirs(new Path(path))
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,33
0,1
0,1
0,1
0,1
0,16
0,1
0,1
0,1
0,1
new BinaryWebSocketFrame(payload),"new BinaryWebSocketFrame(finalFragment,rsv,payload)"
new BinaryWebSocketFrame(payload),"new BinaryWebSocketFrame(finalFragment,rsv,payload)"
DefaultAsyncHttpClientConfig.class,AsyncHttpClientConfig.class
"assertEquals(expectedResponse,orig.getResponse())","assertEquals(orig.getResponse(),expectedResponse)"
"assertEquals(expectedResponse,orig.getResponse())","assertEquals(orig.getResponse(),expectedResponse)"
"assertEquals(0,counter.get())","assertEquals(counter.get(),0)"
"assertEquals(0,counter.get())","assertEquals(counter.get(),0)"
BlockingQueue<BodyChunk>,ArrayBlockingQueue<BodyChunk>
4,20
4,20
4,20
4,20
1,17
4,20
4,20
4,20
4,20
1,17
"doTestNegative(301,false)",doTestPositive(301)
"assertEquals(response.getStatusCode(),302)","assertEquals(response.getStatusCode(),200)"
"assertEquals(response.getStatusCode(),302)","assertEquals(response.getStatusCode(),200)"
IllegalArgumentException.class,IllegalStateException.class
SSLHandshakeException.class,Exception.class
sb.append(NC),sb.append(nc)
"body.transferTo(position,Long.MAX_VALUE,target)","body.transferTo(position,target)"
"getBooleanValue(ASYNC_CLIENT + ""acceptAnyCertificate"",false)","getBoolean(ASYNC_CLIENT + ""acceptAnyCertificate"",false)"
"getBooleanValue(ASYNC_CLIENT + ""acceptAnyCertificate"",false)","getBoolean(ASYNC_CLIENT + ""acceptAnyCertificate"",false)"
request.charset != null,request.charset == null
"assertEquals(301,status.getStatusCode())","assertEquals(302,status.getStatusCode())"
"assertEquals(response.getStatusCode(),301)","assertEquals(response.getStatusCode(),302)"
idleConnectionTimeout - nettyResponseFuture.getLastTouch(),idleConnectionTimeout + nettyResponseFuture.getLastTouch()
readBytes >= 0,readBytes > 0
readBytes >= 0,readBytes > 0
len > 0,len >= 0
contentLength > 0,contentLength >= 0
removeQuote(timestring.trim()),removeQuotes(timestring.trim())
removeQuote(timestring.trim()),removeQuotes(timestring.trim())
requestFilters.isEmpty(),responseFilters.isEmpty()
requestFilters.isEmpty(),responseFilters.isEmpty()
"client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)","client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"
"client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)","client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"
"client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)","client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"
"client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)","client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"
proxyServer != null,proxyServer != null && !isSecure(uri)
"Assert.assertEquals(expected,values)","Assert.assertEquals(values,expected)"
uri.toString().equalsIgnoreCase(future.getURI().toString()),uri.toString().equals(future.getURI().toString())
uri.toString().equalsIgnoreCase(future.getURI().toString()),uri.toString().equals(future.getURI().toString())
uri.toString().equalsIgnoreCase(future.getURI().toString()),uri.toString().equals(future.getURI().toString())
uri.toString().equalsIgnoreCase(future.getURI().toString()),uri.toString().equals(future.getURI().toString())
"""http"".equals(protocol)","""http"".equals(protocol) || ""ws"".equals(protocol)"
"""https"".equals(protocol)","""https"".equals(protocol) || ""wss"".equals(protocol)"
queryParams != null,queryParams != null && !queryParams.isEmpty()
request.getParams() != null,request.getParams() != null && !request.getParams().isEmpty()
buffer.capacity(),buffer.remaining()
buffer.capacity(),buffer.remaining()
r.getUri().toString(),r.getUri().getPath()
r.getUri().toString(),r.getUri().getPath()
r.getUri().toString(),r.getUri().getPath()
r.getUri().toString(),r.getUri().getPath()
executeConnectAsync=false,executeConnectAsync=true
NettyAsyncHttpProvider.class,ApacheAsyncHttpProvider.class
NettyAsyncHttpProvider.class,JDKAsyncHttpProvider.class
2,66
enabled=false,enabled=true
uri.getPort() == -1,uri.getPort() == -1 && request.getVirtualHost() != null
ChannelBuffers.copiedBuffer(request.getByteData()),ChannelBuffers.wrappedBuffer(request.getByteData())
ChannelBuffers.copiedBuffer(request.getByteData()),ChannelBuffers.wrappedBuffer(request.getByteData())
"ChannelBuffers.copiedBuffer(bytes,0,length)","ChannelBuffers.wrappedBuffer(bytes,0,length)"
"ChannelBuffers.copiedBuffer(bytes,0,length)","ChannelBuffers.wrappedBuffer(bytes,0,length)"
ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)),ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))
ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)),ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))
NettyAsyncHttpProvider.class,NettyConnectionsPool.class
"assertEquals(response.getResponseBody().length(),3876)","assertEquals(response.getResponseBody().length(),3873)"
finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class)),markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))
finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class)),markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))
contentType != null,contentType != null && charset == null
contentType != null,contentType != null && charset == null
contentType != null,contentType != null && charset == null
contentType != null,contentType != null && charset == null
contentType != null,contentType != null && charset == null
contentType != null,contentType != null && charset == null
config.getIdleConnectionTimeoutInMs(),config.getIdleConnectionInPoolTimeoutInMs()
config.getIdleConnectionTimeoutInMs(),config.getIdleConnectionInPoolTimeoutInMs()
public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } ,public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } 
public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } ,public Builder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } 
public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } ,public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } 
public DerivedBuilder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } ,public Builder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
public DerivedBuilder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } ,public Builder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } ,public Builder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } ,public Builder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } 
public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } ,public Builder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } ,public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } 
public DerivedBuilder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } ,public Builder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } ,public Builder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
public DerivedBuilder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } ,public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } 
public DerivedBuilder setRealmPassword(String password){   realm().setPassword(password);   return this; } ,public Builder setRealmPassword(String password){   realm().setPassword(password);   return this; } 
public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } ,public Builder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } 
public DerivedBuilder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } ,public Builder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } ,public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
public DerivedBuilder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } ,public Builder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
public DerivedBuilder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } ,public Builder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } 
public DerivedBuilder setProxyPassword(String password){   this.proxyPassword=password;   return this; } ,public Builder setProxyPassword(String password){   this.proxyPassword=password;   return this; } 
public DerivedBuilder setProxyPort(int port){   this.proxyPort=port;   return this; } ,public Builder setProxyPort(int port){   this.proxyPort=port;   return this; } 
public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } ,public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
enabled=false,enabled=true
Assert.assertNull(ex.getCause()),Assert.assertNotNull(ex.getCause())
Assert.assertNull(ex.getCause()),Assert.assertNotNull(ex.getCause())
config.getIdleConnectionTimeoutInMs() > 0,config.getIdleConnectionTimeoutInMs() > 0 && requestTimeout != -1 && requestTimeout < config.getIdleConnectionTimeoutInMs()
bodyParts != null,status != null
bodyParts != null,status != null
"nextRequest(request,future)","nextRequest(newRequest,future)"
DefaultChannelFuture.setUseDeadLockChecker(false),DefaultChannelFuture.setUseDeadLockChecker(true)
!isClosed.get(),isClosed.get()
config.trustStoreLocation != null,config.trustStoreLocation == null
"log.error(currentThread() + String.format(""Trying to recover from dead Channel: %s "",channel))","log.debug(currentThread() + String.format(""Trying to recover from dead Channel: %s "",channel))"
"log.error(currentThread() + String.format(""Trying to recover from dead Channel: %s "",channel))","log.debug(currentThread() + String.format(""Trying to recover from dead Channel: %s "",channel))"
AsyncHttpClient.class,AsyncHttpClientConfig.class
uri.getPath(),uri.toString()
uri.getPath(),uri.toString()
1,9
response.getResponseBody().isEmpty(),"response.getResponseBody().equals("""")"
qs.isEmpty(),"qs.equals("""")"
"ConcurrentHashMap<Url,Channel>","ConcurrentHashMap<String,Channel>"
"Entry<Url,Channel>","Entry<String,Channel>"
req.getSession().getMaxInactiveInterval() * 1000,req.getSession().getMaxInactiveInterval() * 1000L
req.getSession().getMaxInactiveInterval() * 1000,req.getSession().getMaxInactiveInterval() * 1000L
"logger.error(""Invalid state {}"",r)","logger.warn(""Invalid state {}"",r)"
"logger.error(""Invalid state {}"",r)","logger.warn(""Invalid state {}"",r)"
IOException e,Exception e
Throwable t2,Exception t2
broadcasterFactoryClassName != null,broadcasterFactoryClassName != null && broadcasterFactory == null
closeCode < 1001,closeCode <= 1001
b.length() - 1,b.length() - 2
16,0
-1,1
1,-1
-1,1
1,-1
"logger.info(""Return Object {} now at size {}"",b,count.getAndDecrement())","logger.trace(""Return Object {} now at size {}"",b,count.getAndDecrement())"
"logger.info(""Return Object {} now at size {}"",b,count.getAndDecrement())","logger.trace(""Return Object {} now at size {}"",b,count.getAndDecrement())"
"logger.info(""Creating Object {}"",count.getAndIncrement())","logger.trace(""Creating Object {}"",count.getAndIncrement())"
"logger.info(""Creating Object {}"",count.getAndIncrement())","logger.trace(""Creating Object {}"",count.getAndIncrement())"
"logger.error("""",ex)","logger.warn("""",ex)"
"logger.error("""",ex)","logger.warn("""",ex)"
Boolean.parseBoolean(ac),!Boolean.parseBoolean(ac)
uuid != null,r != null
uuid != null,r != null
DefaultAtmosphereRequest request,AtmosphereRequest request
DefaultAtmosphereRequest request,AtmosphereRequest request
DefaultAtmosphereRequest request,AtmosphereRequest request
DefaultAtmosphereRequest.newInstance(),AtmosphereRequest.newInstance()
DefaultAtmosphereRequest.newInstance(),AtmosphereRequest.newInstance()
DefaultAtmosphereRequest request,AtmosphereRequest request
webSocket.isOpen(),!webSocket.isOpen()
18,26
event.isResuming(),event.isCancelled()
event.isResuming(),event.isCancelled()
r.getRequest(),r.getRequest(false)
s == null,s == null && req != null
"logger.debug(""AtmosphereResource {} is resuming"",uuid())","logger.trace(""AtmosphereResource {} is resuming"",uuid())"
"logger.debug(""AtmosphereResource {} is resuming"",uuid())","logger.trace(""AtmosphereResource {} is resuming"",uuid())"
!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled(),!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()
closeCode < 1002,closeCode < 1001
"logger.debug(""Invalid Atmosphere Version {}"",javascriptVersion)","logger.error(""Invalid Atmosphere Version {}"",javascriptVersion)"
"logger.debug(""Invalid Atmosphere Version {}"",javascriptVersion)","logger.error(""Invalid Atmosphere Version {}"",javascriptVersion)"
UnsupportedOperationException ex,Exception ex
"logger.trace(""{} is already cancelled"",impl.uuid())","logger.error(""{} is already cancelled"",impl.uuid())"
"logger.trace(""{} is already cancelled"",impl.uuid())","logger.error(""{} is already cancelled"",impl.uuid())"
"servletPath.equals(""/"")","servletPath.equals(""/"") || servletPath.equals(""/*"")"
"logger.debug(""Removing: {}"",r)","logger.trace(""Removing: {}"",r)"
"logger.debug(""Removing: {}"",r)","logger.trace(""Removing: {}"",r)"
uuid.equals(NULL),!uuid.equals(NULL)
webSocketConnection.getRemote().sendString(s),webSocketConnection.getRemote().sendStringByFuture(s)
webSocketConnection.getRemote().sendString(s),webSocketConnection.getRemote().sendStringByFuture(s)
"webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))","webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))"
"webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))","webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))"
@Overridee,@Override
"synchronized (id) {   logger.trace(""About to create {}"",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException(""Broadcaster already exists "" + id + "". Use BroadcasterFactory.lookup instead"");   }   T b=(T)store.get(id);   logger.trace(""Looking in the store using {} returned {}"",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg=""Invalid lookup class "" + c.getName() + "". Cached class is: ""+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace(""Removing destroyed Broadcaster {}"",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace(""Added Broadcaster {} . Factory size: {}"",id,store.size());     }     b=(T)nb;   }   return b; } ","synchronized (c) {   logger.trace(""About to create {}"",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException(""Broadcaster already exists "" + id + "". Use BroadcasterFactory.lookup instead"");   }   T b=(T)store.get(id);   logger.trace(""Looking in the store using {} returned {}"",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg=""Invalid lookup class "" + c.getName() + "". Cached class is: ""+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace(""Removing destroyed Broadcaster {}"",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace(""Added Broadcaster {} . Factory size: {}"",id,store.size());     }     b=(T)nb;   }   return b; } "
r.getRequest(),rImpl.getRequest()
r.getRequest(),rImpl.getRequest()
s.contains(a.getName()),disables.contains(a.getName())
s.contains(a.getName()),disables.contains(a.getName())
AtmosphereResourceEventListener.class,AtmosphereResourceEventListenerAdapter.class
"webSocketProcessor.close(webSocket,0)","webSocketProcessor.close(webSocket,1000)"
"webSocketProcessor.close(webSocket,0)","webSocketProcessor.close(webSocket,1000)"
bc.getExecutorService(),bc.getAsyncWriteService()
bc.getExecutorService(),bc.getAsyncWriteService()
"framework.getBroadcasterFactory().lookup(a.broadcaster(),true)","framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)"
"framework.getBroadcasterFactory().lookup(a.broadcaster(),true)","framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)"
"framework.getBroadcasterFactory().lookup(m.broadcaster(),true)","framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)"
"config.getBroadcasterFactory().lookup(m.broadcaster(),true)","config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"
"config.getBroadcasterFactory().lookup(m.broadcaster(),true)","config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"
"config.getBroadcasterFactory().lookup(a.broadcaster(),true)","config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)"
"config.getBroadcasterFactory().lookup(a.broadcaster(),true)","config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)"
"config.getBroadcasterFactory().lookup(m.broadcaster(),true)","config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"
"config.getBroadcasterFactory().lookup(m.broadcaster(),true)","config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"
"t=b.getBroadcasterConfig().applyFilters(r,t)","cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)"
"cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)","t=b.getBroadcasterConfig().applyFilters(r,t)"
"b.getBroadcasterConfig().applyFilters(r,cachedMessages)","b.getBroadcasterConfig().applyFilters(r,t)"
headerHandled=false,headerHandled=true
interceptors.addFirst(newAInterceptor(a)),interceptors.addLast(newAInterceptor(a))
interceptors.addFirst(newAInterceptor(a)),interceptors.addLast(newAInterceptor(a))
defaultCometSupport(useServlet30Async),defaultCometSupport(defaultToBlocking)
defaultCometSupport(useServlet30Async),defaultCometSupport(defaultToBlocking)
configureWebDotXmlAtmosphereHandler(sc),configureWebDotXmlAtmosphereHandler(scFacade)
configureAtmosphereInterceptor(sc),configureAtmosphereInterceptor(scFacade)
annotations == null,annotations == null || annotations.isEmpty()
annotations == null,annotations == null || annotations.isEmpty()
"path.lastIndexOf(""/"") == 0","path.lastIndexOf(""/"") <= 0"
"path.lastIndexOf(""/"") == 0","path.lastIndexOf(""/"") <= 0"
"l.onSuspend(request,response)","l.onResume(request,response)"
"l.onSuspend(request,response)","l.onResume(request,response)"
!WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass()),WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())
"logger.info(""Session created"")","logger.trace(""Session created"")"
"logger.info(""Session created"")","logger.trace(""Session created"")"
"logger.info(""Session destroyed"")","logger.trace(""Session destroyed"")"
"logger.info(""Session destroyed"")","logger.trace(""Session destroyed"")"
hasMatch=true,hasMatch=false
data.getBytes(),data.getBytes(response.getCharacterEncoding())
o.toString().getBytes(),o.toString().getBytes(response.getCharacterEncoding())
AtmosphereResourceImpl.class.cast(r),AtmosphereResourceImpl.class.cast(resource)
"new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage)","new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage,entry.cache)"
AtmosphereResponse.create(),AtmosphereResponse.newInstance()
AtmosphereResponse.create(),AtmosphereResponse.newInstance()
AtmosphereResponse.create(),AtmosphereResponse.newInstance()
AtmosphereResponse.create(),AtmosphereResponse.newInstance()
!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass()),!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
List<Object>,LinkedList<Object>
"filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))","filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))"
"filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))","filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))"
event.isResuming(),event.isResuming() || event.isCancelled()
new BroadcastAction(originalMessage),new BroadcastAction(message)
"mf.filter(r,message,transformed.message())","mf.filter(r,originalMessage,transformed.message())"
queryStrings.append(name),queryStrings.append(key)
resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET,resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
1,33
notifierFuture.cancel(true),notifierFuture.cancel(false)
asyncWriteFuture.cancel(true),asyncWriteFuture.cancel(false)
value={XSSHtmlFilter.class},filters={XSSHtmlFilter.class}
value={StringFilterAggregator.class},filters={StringFilterAggregator.class}
value={XSSHtmlFilter.class},filters={XSSHtmlFilter.class}
value={StringFilterAggregator.class},filters={StringFilterAggregator.class}
value={StringFilterAggregator.class},filters={StringFilterAggregator.class}
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w2,request)","processor.open(w2,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"processor.open(w,request)","processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
"logger.debug(""Trying to map {} to {}"",t,path)","logger.trace(""Trying to map {} to {}"",t,path)"
"logger.debug(""Trying to map {} to {}"",t,path)","logger.trace(""Trying to map {} to {}"",t,path)"
"logger.debug(""Mapped {} to {}"",t,e.getValue())","logger.trace(""Mapped {} to {}"",t,e.getValue())"
"logger.debug(""Mapped {} to {}"",t,e.getValue())","logger.trace(""Mapped {} to {}"",t,e.getValue())"
broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName()),!broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())
existingOne == null,existingOne != null
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
SSEAtmosphereInterceptor.class,AtmosphereResourceLifecycleInterceptor.class
servletClass != null && filterClass != null,servletClass != null || filterClass != null
"DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)","DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)"
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource),"DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)"
w.println(padding),w.println(paddingText)
cache.remove(this),cache.remove(r)
"DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)","DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)"
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource),"DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)"
w.println(padding),w.println(paddingText)
cache.remove(this),cache.remove(r)
AsyncIOWriterAdapter.class,AtmosphereInterceptorWriter.class
webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName()),!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
BroadcasterFactory.getDefault().get(mapping),"BroadcasterFactory.getDefault().lookup(mapping,true)"
this.r != null,this.r != null && r != null
supportSession=true,supportSession=false
data + END,data + end
data + END,data + end
message + END,message + end
message + END,message + end
"END + "" End Message Interceptor""","end + "" End Message Interceptor"""
"END + "" End Message Interceptor""","end + "" End Message Interceptor"""
getSession(false),getSession(true)
new char[128],new char[8192]
new Server(port),new Server()
req.startAsync(),"req.startAsync(req,res)"
req.startAsync(),"req.startAsync(req,res)"
wrapRequest,!wrapRequest
"res.sendError(202,""Websocket protocol not supported"")","res.sendError(501,""Websocket protocol not supported"")"
"HttpServletResponse.class.cast(response).sendError(202,""Websocket protocol not supported"")","HttpServletResponse.class.cast(response).sendError(501,""Websocket protocol not supported"")"
session != null,session == null
"/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ AtmosphereResource addAtmosphereResource(AtmosphereResource resource); ","/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ Broadcaster addAtmosphereResource(AtmosphereResource resource); "
"/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ AtmosphereResource removeAtmosphereResource(AtmosphereResource resource); ","/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ Broadcaster removeAtmosphereResource(AtmosphereResource resource); "
"/**   * {@inheritDoc}  */ @Override public AtmosphereResource addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),""addAtmosphereResource(AtmosphereResource<?, ?> r"");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException(""Broadcaster "" + this + "" cannot be used as its scope is set to REQUEST"");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn(""Too many resource. Forcing resume of {} "",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn(""failed to resume resource {} "",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format(""Maximum suspended AtmosphereResources %s"",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } ","/**   * {@inheritDoc}  */ @Override public Broadcaster addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),""addAtmosphereResource(AtmosphereResource<?, ?> r"");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException(""Broadcaster "" + this + "" cannot be used as its scope is set to REQUEST"");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn(""Too many resource. Forcing resume of {} "",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn(""failed to resume resource {} "",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format(""Maximum suspended AtmosphereResources %s"",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } "
return r; ,return this; 
return r; ,return this; 
return r; ,return this; 
"/**   * {@inheritDoc}  */ @Override public AtmosphereResource removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),""removeAtmosphereResource(AtmosphereResource r)"");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } ","/**   * {@inheritDoc}  */ @Override public Broadcaster removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),""removeAtmosphereResource(AtmosphereResource r)"");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } "
return r; ,return this; 
return r; ,return this; 
"logger.warn(""{} {}"",errorCode,message)","logger.debug(""{} {}"",errorCode,message)"
"logger.warn(""{} {}"",errorCode,message)","logger.debug(""{} {}"",errorCode,message)"
r.getResponse().sendError(503),"r.getResponse().sendError(503,""Remotely closed"")"
"logger.debug(""{} {}"",errorCode,message)","logger.warn(""{} {}"",errorCode,message)"
"logger.debug(""{} {}"",errorCode,message)","logger.warn(""{} {}"",errorCode,message)"
"logger.warn(""{} {}"",errorCode,message)","logger.debug(""{} {}"",errorCode,message)"
"logger.warn(""{} {}"",errorCode,message)","logger.debug(""{} {}"",errorCode,message)"
BlockingIOCometSupport.class,NettyCometSupport.class
r.getRequest(false),r.getRequest(true)
AtmosphereRequest.class.isAssignableFrom(request.getClass()),!AtmosphereRequest.class.isAssignableFrom(request.getClass())
"factory.lookup(DefaultBroadcaster.class,id)","factory.lookup(DefaultBroadcaster.class,id,true)"
webSocket.resource().getAtmosphereResourceEvent().isSuspended(),!webSocket.resource().getAtmosphereResourceEvent().isSuspended()
5 * 60 * 100,5 * 60 * 1000
"logger.trace(""Trying to map {} to {}"",t,path)","logger.debug(""Trying to map {} to {}"",t,path)"
"logger.trace(""Trying to map {} to {}"",t,path)","logger.debug(""Trying to map {} to {}"",t,path)"
!b.getAtmosphereResources().contains(r),b.getAtmosphereResources().contains(r)
s != null,s != null && Boolean.parseBoolean(s)
config.properties().get(REDIS_SHARED_POOL) == null,config.properties().get(REDIS_SHARED_POOL) != null
Boolean.parseBoolean(ac),!Boolean.parseBoolean(ac)
resources.size() <= maxSuspendResource.get(),resources.size() >= maxSuspendResource.get()
WebSocketEventListener.class.cast(l).onMessage(event),WebSocketEventListener.class.cast(l).onHandshake(event)
WebSocketEventListener.class.cast(l).onMessage(event),WebSocketEventListener.class.cast(l).onHandshake(event)
WebSocketEventListener.class.cast(l).onMessage(event),WebSocketEventListener.class.cast(l).onClose(event)
WebSocketEventListener.class.cast(l).onMessage(event),WebSocketEventListener.class.cast(l).onClose(event)
b.getTopicId(),b.getMessage()
b.getTopicId(),b.getMessage()
"new JGroupsFilter(bc,event.getAtmosphereConfig().getWebServerName())",new JGroupsFilter(bc)
"logger.info(""Installing Filter {}"",servletClassName)","logger.info(""Installing Filter {}"",filterName)"
"Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,""Atmosphere-BroadcasterConfig-"" + count.getAndIncrement());   } } )","Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,""Atmosphere-BroadcasterConfig-"" + count.getAndIncrement());   } } )"
"Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,""Atmosphere-BroadcasterConfig-"" + count.getAndIncrement());   } } )","Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,""Atmosphere-BroadcasterConfig-"" + count.getAndIncrement());   } } )"
Bukkit.getOfflinePlayers(),Bukkit.getOperators()
Bukkit.getOfflinePlayers(),Bukkit.getOperators()
player.teleport(playerLocation),"player.teleport(playerLocation,TeleportCause.COMMAND)"
i=4,i=0
"soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)","location.add(deltaX / delta,deltaY / delta,deltaZ / delta)"
"soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)","location.add(deltaX / delta,deltaY / delta,deltaZ / delta)"
"player.playSound(soundLocation,soundArg,(float)minimumVolume,(float)pitch)","player.playSound(location,soundArg,(float)minimumVolume,(float)pitch)"
"ArrayUtils.subarray(args,4,args.length)","ArrayUtils.subarray(args,3,args.length)"
i > BY_WOOL_DATA.length,i >= BY_WOOL_DATA.length
i > BY_DYE_DATA.length,i >= BY_DYE_DATA.length
i=3,i=2
args.length == 3,args.length == 2
Color.fromRGB(0x1E1B1B),Color.fromRGB(0xF0F0F0)
Color.fromRGB(0x3B511A),Color.fromRGB(0xC354CD)
Color.fromRGB(0x51301A),Color.fromRGB(0x6689D3)
Color.fromRGB(0x253192),Color.fromRGB(0xDECF2A)
Color.fromRGB(0x7B2FBE),Color.fromRGB(0x41CD34)
Color.fromRGB(0x287697),Color.fromRGB(0xD88198)
Color.fromRGB(0xABABAB),Color.fromRGB(0x434343)
Color.fromRGB(0x434343),Color.fromRGB(0xABABAB)
Color.fromRGB(0xD88198),Color.fromRGB(0x287697)
Color.fromRGB(0x41CD34),Color.fromRGB(0x7B2FBE)
Color.fromRGB(0xDECF2A),Color.fromRGB(0x253192)
Color.fromRGB(0x6689D3),Color.fromRGB(0x51301A)
Color.fromRGB(0xC354CD),Color.fromRGB(0x3B511A)
Color.fromRGB(0xEB8844),Color.fromRGB(0xB3312C)
Color.fromRGB(0xF0F0F0),Color.fromRGB(0x1E1B1B)
"INVISIBILTY(14,PotionEffectType.INVISIBILITY,1)","INVISIBILITY(14,PotionEffectType.INVISIBILITY,1)"
return softDepend; ,return loadBefore; 
"this(type,0); ","this(type,1); "
"this(type,0); ","this(type,1); "
"IRON_GOLEM(""VillagerGolem"",IronGolem.class,98)","IRON_GOLEM(""VillagerGolem"",IronGolem.class,99)"
enchantments.putAll(stack.enchantments),this.addUnsafeEnchantments(stack.getEnchantments())
new Color(pixels[i]),"new Color(pixels[i],true)"
"result.addEnchantment(enchantment,(Integer)entry.getValue())","result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue())"
"result.addEnchantment(enchantment,(Integer)entry.getValue())","result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue())"
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
9,25
result.addEnchantments(getEnchantments()),result.addUnsafeEnchantments(getEnchantments())
result.addEnchantments(getEnchantments()),result.addUnsafeEnchantments(getEnchantments())
"(Integer)args.get(""damage"")","(Short)args.get(""damage"")"
"/**   * Represents black  */ BLACK('0',0x01)","/**   * Represents black  */ BLACK('0',0x00)"
ENTER_PORTAL_FRAME(120),ENDER_PORTAL_FRAME(120)
NETHER_WATER(115),NETHER_WARTS(115)
"FISHING_ROD(346,1,32)","FISHING_ROD(346,1,64)"
1,9
1,9
"IRON_SWORD(267,1,59)","IRON_SWORD(267,1,250)"
"FISHING_ROD(346,1,64)","FISHING_ROD(346,1,32)"
DIODE(100),DIODE(356)
BED(99),BED(355)
getData() ^ 0x8,getData() ^ 0x7
getData() ^ 0x8,getData() ^ 0x7
plugin.isEnabled(),!plugin.isEnabled()
!plugin.isEnabled(),plugin.isEnabled()
listeners != null,eventListeners != null
listeners != null,eventListeners != null
case JOIN: ,case PLAYER_JOIN: 
case QUIT: ,case PLAYER_QUIT: 
Exception ex,Throwable ex
LoopContextStepRetrieval retrievalToAdapt,LoopContextStateRetrieval retrievalToAdapt
LoopContextStepRetrieval retrievalToAdapt,LoopContextStateRetrieval retrievalToAdapt
"db.createIndex(new BasicDBObject(FIELD_UPDATED_AT,1).append(FIELD_UNCOMMITTED_ENTRIES,1).append(FIELD_WRITTEN_MESSAGES_1M,1))","db.createIndex(new BasicDBObject(FIELD_UPDATED_AT,1).append(FIELD_UNCOMMITTED_ENTRIES,1).append(FIELD_WRITTEN_MESSAGES_1M,1),new BasicDBObject(""name"",""compound_0""))"
assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7),assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)
assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7),assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5)
assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7),assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5)
assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7),assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)
assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(7),assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5)
"new AutoValue_RegistrationResponse(sidecarRegistrationConfiguration,configurationOverride,actions,assignments)","new AutoValue_RegistrationResponse(configuration,configurationOverride,actions,assignments)"
"DSVHTTPDataAdapter.Config.builder().type(NAME).url(""https://example.org/table.csv"").separator("","").lineSeparator(""\n"").quotechar(""\"""").ignorechar(""#"").keyColumn(1)","DSVHTTPDataAdapter.Config.builder().type(NAME).url(""https://example.org/table.csv"").separator("","").lineSeparator(""\n"").quotechar(""\"""").ignorechar(""#"").keyColumn(0)"
"fields.get(""last_seen"")","fields.getOrDefault(""last_seen"",0)"
JsonNode::isLong,JsonNode::isNumber
"fireMessageReceived(ctx,completeMessage)","fireMessageReceived(ctx,completeMessage,e.getRemoteAddress())"
"fireMessageReceived(ctx,message)","fireMessageReceived(ctx,message,e.getRemoteAddress())"
"fields.put(PERMISSIONS,permissions)","fields.put(PERMISSIONS,perms)"
"memoryMap.getInt(""mappedWithJournal"")","memoryMap.getInt(""mappedWithJournal"",-1)"
restEnableGzip=false,restEnableGzip=true
"LOG.debug(""Error while deserializing payload"",e)","LOG.error(""Error while deserializing payload"",e)"
"LOG.debug(""Error while deserializing payload"",e)","LOG.error(""Error while deserializing payload"",e)"
"LOG.error(""Read offset {} before start of log at {}, starting to read from the beginning of the journal."",readOffset,logStartOffset)","LOG.info(""Read offset {} before start of log at {}, starting to read from the beginning of the journal."",readOffset,logStartOffset)"
"LOG.error(""Read offset {} before start of log at {}, starting to read from the beginning of the journal."",readOffset,logStartOffset)","LOG.info(""Read offset {} before start of log at {}, starting to read from the beginning of the journal."",readOffset,logStartOffset)"
"ImmutableSet.<String>builder().add(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JOURNAL_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)","ImmutableSet.<String>builder().add(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JOURNAL_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ,CLUSTER_CONFIG_ENTRY_READ)"
Optional<T>,Optional<RemoteInterfaceType>
Call<L>,Call<RemoteCallResponseType>
Response<L>,Response<RemoteCallResponseType>
T,RemoteInterfaceType
"new DashboardServiceImpl(mongoRule.getMongoConnection(),metricRegistry,searches,dashboardWidgetCreator)","new DashboardServiceImpl(mongoRule.getMongoConnection(),dashboardWidgetCreator)"
"new DashboardServiceImpl(mongoRule.getMongoConnection(),metricRegistry,searches,dashboardWidgetCreator)","new DashboardServiceImpl(mongoRule.getMongoConnection(),dashboardWidgetCreator)"
final DeletionRetentionStrategy deletionRetentionStrategy=clusterConfigService.get(DeletionRetentionStrategy.class); ,final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig=clusterConfigService.get(DeletionRetentionStrategyConfig.class); 
deletionRetentionStrategy == null,deletionRetentionStrategyConfig == null
deletionRetentionStrategy == null,deletionRetentionStrategyConfig == null
DeletionRetentionStrategy.class,DeletionRetentionStrategyConfig.class
MessageOutput.Factory<GelfOutput>,MessageOutput.Factory<DiscardMessageOutput>
"@Override GelfOutput create(Stream stream,Configuration configuration); ","@Override DiscardMessageOutput create(Stream stream,Configuration configuration); "
"connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,""dn"",""uid"",""userPrincipalName"",""mail"",""rfc822Mailbox"",""memberOf"")","connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,""dn"",""uid"",""userPrincipalName"",""mail"",""rfc822Mailbox"",""memberOf"",""isMemberOf"")"
"""memberOf"".equalsIgnoreCase(attribute.getId())","""memberOf"".equalsIgnoreCase(attribute.getId()) || ""isMemberOf"".equalsIgnoreCase(attribute.getId())"
"new AutoValue_PackageFiles(chunks,jsFiles,cssFiles)","new AutoValue_ModuleFiles(chunks,jsFiles,cssFiles)"
!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION),!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) || !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)
"new Version(1,0,0)","new Version(0,1,0)"
routes.UsersController.index(),routes.UsersController.editUserForm(username)
new BadRequestException(),"new BadRequestException(""Field "" + field + "" is not of a numeric type and the cardinality could not be calculated either."",e1)"
role.description().get(),role.description().orNull()
role.description().get(),role.description().orNull()
Lists.newArrayList(stream1),"Lists.newArrayList(stream1,stream2)"
dbCollection.save(clusterEvent),"dbCollection.save(clusterEvent,WriteConcern.FSYNCED)"
PositiveIntegerValidator.class,PositiveDurationValidator.class
PositiveIntegerValidator.class,PositiveDurationValidator.class
gauge.getValue() instanceof Long,gauge.getValue() instanceof Number
"await().atMost(5,TimeUnit.SECONDS)","await().atMost(20,TimeUnit.SECONDS)"
"await().atMost(5,TimeUnit.SECONDS)","await().atMost(20,TimeUnit.SECONDS)"
"standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))","standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)"
"filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))","filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)"
"standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))","standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)"
"filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))","filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)"
"standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))","standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)"
"filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))","filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)"
"collection(StreamImpl.class).update(match,modify)","collection(StreamImpl.class).update(match,modify,false,true)"
Lists.newArrayListWithExpectedSize(resultMessages.size()),Lists.newArrayListWithCapacity(resultMessages.size())
Lists.newArrayListWithExpectedSize(resultMessages.size()),Lists.newArrayListWithCapacity(resultMessages.size())
HttpTransport.class,SyslogTcpTransport.class
matcher.groupCount() > 0,matched && matcher.groupCount() > 0
"clusterService.getIndexerFailures(0,0)","clusterService.getIndexerFailures(1,0)"
messageJournalEnabled=false,messageJournalEnabled=true
"UriBuilder.fromResource(AlarmCallbackResource.class).path(""{alarmCallbackId}"").build(id)","UriBuilder.fromResource(AlarmCallbackResource.class).path(""{alarmCallbackId}"").build(streamid,id)"
"UriBuilder.fromResource(AlarmCallbackResource.class).path(""{alarmCallbackId}"").build(id)","UriBuilder.fromResource(AlarmCallbackResource.class).path(""{alarmCallbackId}"").build(streamid,id)"
UriBuilder.fromResource(StreamAlertResource.class).build(),UriBuilder.fromResource(StreamAlertResource.class).build(streamid)
"UriBuilder.fromResource(StreamAlertConditionResource.class).path(""{conditionId}"").build(alertCondition.getId())","UriBuilder.fromResource(StreamAlertConditionResource.class).path(""{conditionId}"").build(stream.getId(),alertCondition.getId())"
routes.BufferResource(),routes.BuffersResource()
routes.BufferResource(),routes.BuffersResource()
routes.BufferResource(),routes.BuffersResource()
routes.BufferResource(),routes.BuffersResource()
super.remove(input),super.remove(inputState)
routes.InputsResource(),routes.InputTypesResource()
routes.InputsResource(),routes.InputTypesResource()
routes.InputsResource(),routes.InputTypesResource()
routes.InputsResource(),routes.InputTypesResource()
JavaConversions.asMap(logManager.logsByTopicPartition()),JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())
JavaConversions.asMap(logManager.logsByTopicPartition()),JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())
JavaConversions.asIterable(logManager.allLogs()),JavaConversions.asJavaIterable(logManager.allLogs())
JavaConversions.asIterable(logManager.allLogs()),JavaConversions.asJavaIterable(logManager.allLogs())
"JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))","JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))"
"JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))","JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))"
LocalMetricRegistry localRegistry,MetricRegistry localRegistry
new Notification(notification),"new Notification(notification,nodeService)"
"new AMQPProducer(configuration,metricRegistry)","new AMQPProducer(metricRegistry,configuration,serverStatus)"
routes.IndicesResource().single(index),routes.IndicesResource().delete(index)
routes.IndicesResource().single(index),routes.IndicesResource().delete(index)
new DateTime(Long.parseLong(firstTimestamp) * 1000),"new DateTime(Long.parseLong(firstTimestamp) * 1000,DateTimeZone.UTC)"
"resource.removeExtractor(input.getId(),extractorId)","resource.terminate(input.getId(),extractorId)"
"resource.removeExtractor(input.getId(),extractorId)","resource.terminate(input.getId(),extractorId)"
"resource.terminate(input.getId(),extractorId)","resource.removeExtractor(input.getId(),extractorId)"
"resource.terminate(input.getId(),extractorId)","resource.removeExtractor(input.getId(),extractorId)"
outputBatchSize=25,outputBatchSize=1000
response == null,response == null || response.value == null
response == null,response == null || response.value == null
routes.ExtractorsResource().list(input.getId()),routes.ExtractorsResource().create(input.getId())
routes.ExtractorsResource().list(input.getId()),routes.ExtractorsResource().create(input.getId())
KafkaInput.class,RadioKafkaInput.class
"Map<String,String>","Map<String,Object>"
"Map<String,String>","Map<String,Object>"
"Map<String,String>","Map<String,Object>"
Sets.newHashSet(),Sets.newLinkedHashSet()
Sets.newHashSet(),Sets.newLinkedHashSet()
"Lists.newArrayList(""timestamp"",""source"")","Lists.newArrayList(""timestamp"")"
"terms.facetFilter(standardFilters(range,filter))","stats.facetFilter(standardFilters(range,filter))"
"terms.facetFilter(standardFilters(range,filter))","stats.facetFilter(standardFilters(range,filter))"
outputBatchSize=5000,outputBatchSize=25
outputBufferProcessors=5,outputBufferProcessors=3
return 30; ,return 2; 
RawUDPInput.class,RawTCPInput.class
cr.session_timeout_ms != 0,cr.session_timeout_ms != null && cr.session_timeout_ms != 0
new InetSocketAddress(configuration.getRestListenUri().getPort()),"new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())"
new InetSocketAddress(configuration.getRestListenUri().getPort()),"new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())"
message.getFormattedFields(),message.getFilteredFields()
message.getFormattedFields(),message.getFilteredFields()
routes.SessionsController.index(),"routes.SessionsController.index("""")"
r.destination != null,r.destination != null && !r.destination.isEmpty()
message.getFormattedFields(),message.getFilteredFields()
message.getFormattedFields(),message.getFilteredFields()
new InetSocketAddress(configuration.getRestListenUri().getPort()),"new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())"
new InetSocketAddress(configuration.getRestListenUri().getPort()),"new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())"
routes.SessionsController.index(),"routes.SessionsController.index("""")"
r.destination != null,r.destination != null && !r.destination.isEmpty()
"Map<String,Integer>","Map<String,Long>"
Callable<Integer>,Callable<Long>
"@Override public Integer call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path(""/count/total"").execute();   return response.events; } ","@Override public Long call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path(""/count/total"").execute();   return response.events; } "
return false; ,return true; 
"LOG.error(""Could not parse syslog message. Not further handling."",e)","LOG.warn(""Could not parse syslog message. Not further handling."",e)"
"LOG.error(""Could not parse syslog message. Not further handling."",e)","LOG.warn(""Could not parse syslog message. Not further handling."",e)"
"LOG.info(""Date could not be parsed. Was set to NOW because {} is true."",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)","LOG.debug(""Date could not be parsed. Was set to NOW because {} is true."",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)"
"LOG.info(""Date could not be parsed. Was set to NOW because {} is true."",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)","LOG.debug(""Date could not be parsed. Was set to NOW because {} is true."",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)"
"LOG.info(""Syslog message is missing date or date could not be parsed. (Possibly set {} to true) "" + ""Not further handling. Message was: {}"",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))","LOG.warn(""Syslog message is missing date or date could not be parsed. (Possibly set {} to true) "" + ""Not further handling. Message was: {}"",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))"
"LOG.info(""Syslog message is missing date or date could not be parsed. (Possibly set {} to true) "" + ""Not further handling. Message was: {}"",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))","LOG.warn(""Syslog message is missing date or date could not be parsed. (Possibly set {} to true) "" + ""Not further handling. Message was: {}"",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))"
"Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ)","Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)"
EmptyResponse.class,InputLaunchResponse.class
Maps.newHashMap(),Maps.newTreeMap()
Maps.newHashMap(),Maps.newTreeMap()
"""streams:"" + filter","""streams:"" + streamId"
"""streams:"" + filter","""streams:"" + streamId"
"log.error(""Multiple nodes are set, but execute() was called. This is most likely a bug and you meant to call executeOnAll()!"")","log.error(""Multiple nodes are set, but execute() was called. This is most likely a bug and you meant to call executeOnAll()!"",new Throwable())"
"log.warn(""You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!"")","log.warn(""You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!"",new Throwable())"
"log.error(""Both session() and unauthenticated() are set for this request, this is a bug, using session id."")","log.error(""Both session() and unauthenticated() are set for this request, this is a bug, using session id."",new Throwable())"
"views.html.search.noresults.render(currentUser(),q,searchResult)","views.html.search.noresults.render(currentUser(),q,searchResult,null)"
"views.html.search.noresults.render(currentUser(),q,searchResult)","views.html.search.noresults.render(currentUser(),q,searchResult,stream)"
"app.configuration().getString(""timezone"")","app.configuration().getString(""timezone"","""")"
RawUDPInput.class,RawTCPInput.class
"config("" "",0)","config("" "",1)"
"assertEquals(13,lm.getFields().size())","assertEquals(11,lm.getFields().size())"
"assertEquals(8,lm.getFields().size())","assertEquals(5,lm.getFields().size())"
"assertEquals(8,lm.getFields().size())","assertEquals(5,lm.getFields().size())"
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias)),c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias)),c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
commandLineArguments.isLocal(),commandLineArguments.isLocal() || commandLineArguments.isDebug()
conn.getResponseCode() == HttpURLConnection.HTTP_OK,conn.getResponseCode() == HttpURLConnection.HTTP_OK || conn.getResponseCode() == HttpURLConnection.HTTP_BAD_REQUEST
conn.getResponseCode() == HttpURLConnection.HTTP_OK,conn.getResponseCode() == HttpURLConnection.HTTP_OK || conn.getResponseCode() == HttpURLConnection.HTTP_BAD_REQUEST
conn.getResponseCode() == 201,conn.getResponseCode() == 200
"MongoConnection.getInstance().connect(null,null,""localhost"",""graylog2test"",Integer.valueOf(27017),""false"")","MongoConnection.getInstance().connect(null,null,""localhost"",""graylog2test"",Integer.valueOf(27017),""false"",null)"
"instance.connect(null,null,""localhost"",""graylog2test"",Integer.valueOf(27017),""false"")","instance.connect(null,null,""localhost"",""graylog2test"",Integer.valueOf(27017),""false"",null)"
view.setTextColor(0xFFDADADA),view.setTextColor(0xffffffff)
(color & 0x00FFFFFF) & (alpha << 24),(color & 0x00FFFFFF) | (alpha << 24)
MenuInflater.this.getClass(),mContext.getClass()
"mMethod.invoke(MenuInflater.this,params)","mMethod.invoke(mContext,params)"
!mShowsDialog,mShowsDialog
itemActionLayout >= 0,itemActionLayout > 0
proxy == null,proxy == null || proxy != view.getAnimation()
proxy == null,proxy == null || proxy != view.getAnimation()
sX != 0,sY != 0
sX != 0,sY != 0
item == null,item == null || item.getStatus() < 2
item == null,item == null || item.getStatus() < 2
inputPath=args[1],outputPath=args[1]
1,17
1,17
FilterModifWord.modifResult(result),"FilterModifWord.modifResult(result,forests)"
!mpline.contains(boundary),mpline == null || !mpline.contains(boundary)
2,66
"new GZIPOutputStream(outputStream,true)",new GZIPOutputStream(outputStream)
"new GZIPOutputStream(outputStream,true)",new GZIPOutputStream(outputStream)
indexFile.exists(),indexFile.isFile()
indexFile.exists(),indexFile.isFile()
plugin != null,"plugin != null && plugin.canServeUri(uri,homeDir)"
len % (1024 * 1024) / 10,len % (1024 * 1024) / 10000
len % (1024 * 1024) / 10,len % (1024 * 1024) / 10000
"line.substring(0,p).trim().toLowerCase()","line.substring(0,p).trim().toLowerCase(Locale.US)"
"mpline.substring(0,p).trim().toLowerCase()","mpline.substring(0,p).trim().toLowerCase(Locale.US)"
"token.substring(0,p).trim().toLowerCase()","token.substring(0,p).trim().toLowerCase(Locale.US)"
"boundary.startsWith(""\"""")","boundary.endsWith(""\"""")"
"boundary.startsWith(""\"""")","boundary.endsWith(""\"""")"
imageUrl.length() >= MAX_FILE_NAME_LENGTH,imageUrl.length() > MAX_FILE_NAME_LENGTH
"logger.error(""table: {} column: {}, failed convert type {} to {}"",columnName,value,sqlType)","logger.error(""table: {} column: {}, failed convert type {} to {}"",tableName,columnName,value,sqlType)"
"logger.error(""table: {} column: {}, failed convert type {} to {}"",columnName,value,sqlType)","logger.error(""table: {} column: {}, failed convert type {} to {}"",tableName,columnName,value,sqlType)"
configMonitor.init(this),"configMonitor.init(this,envProperties)"
new Entry[0xff],new Entry[2048]
"!StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""flush"") && !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""grant"")","!StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""flush"") && !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""grant"") && !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""create user"")&& !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""drop user"")&& !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""create database"")&& !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),""drop database"")"
entry.getHeader().getEventLength() * 3,entry.getHeader().getEventLength() * 6
i > 0,i >= 0
i > 0,i >= 0
buffer.nextOneRow(changeColumns),"buffer.nextOneRow(changeColumns,true)"
"buffer.nextValue(info.type,info.meta)","buffer.nextValue(null,i,info.type,info.meta)"
buffer.getInt8(),buffer.getUint8()
buffer.getInt8(),buffer.getUint8()
buffer.getInt8(),buffer.getUint8()
buffer.getInt8(),buffer.getUint8()
index <= next,index < next
type != EventType.QUERY,type != EventType.QUERY && type != EventType.INSERT && type != EventType.UPDATE && type != EventType.DELETE
endPosition.getPosition() < logfileoffset,endPosition.getPosition() <= logfileoffset
parameters.getPositions().get(0),parameters.getPositions().get(1)
"new ClosedByInterruptException(""Interrupted while reading."")",new ClosedByInterruptException()
CanalParseException e,Throwable e
name.length() > 2,name != null && name.length() > 2
name.length() > 2,name != null && name.length() > 2
buffer.rewind().forward((int)n).getFixString((int)str_len),"buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)"
m_data.rewind().forward((int)key_offset).getFixString((int)key_length),"m_data.rewind().forward((int)key_offset).getFixString((int)key_length,charsetName)"
m_data.getFixString((int)m_length),"m_data.getFixString((int)m_length,charsetName)"
1,1
"new RuntimeException(""should execute connector.connect() first"")","new IOException(""should execute connector.connect() first"")"
1,1
"new RuntimeException(""should execute connector.connect() first"")","new IOException(""should execute connector.connect() first"")"
heartBeatTimerTask != null,heartBeatTimerTask != null && heartBeatTimerTask instanceof MysqlDetectingTimeTask
dumpErrorCountThreshold=3,dumpErrorCountThreshold=2
"new SimpleCanalConnector(address,username,password,destination,null)","new SimpleCanalConnector(address,username,password,destination)"
event.getColumns(),event.getChangeColumns()
event.getColumns(),event.getChangeColumns()
this.getNotEmptyWaitThreadPeak(),this.getNotEmptyWaitThreadCount()
this.getNotEmptyWaitThreadPeak(),this.getNotEmptyWaitThreadCount()
this.getNotEmptyWaitThreadPeak(),this.getNotEmptyWaitThreadCount()
this.getNotEmptyWaitThreadPeak(),this.getNotEmptyWaitThreadCount()
this.posColumn=posColumn,this.posColumn=column
dataSource.setInitExceptionThrow(true),dataSource.setInitExceptionThrow(false)
table != null,table == null
table != null,table == null
"assertEquals(4,visitor.getTables().size())","assertEquals(2,visitor.getTables().size())"
"Assert.assertEquals(3,visitor.getConditions().size())","Assert.assertEquals(4,visitor.getConditions().size())"
"Assert.assertEquals(2,visitor.getConditions().size())","Assert.assertEquals(3,visitor.getConditions().size())"
"assertEquals(11,visitor.getConditions().size())","assertEquals(12,visitor.getConditions().size())"
lexer.token == Token.HINT,lexer.token == Token.HINT && !lexer.isEnabled(SQLParserFeature.StrictForWall)
"new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup)","new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup,SQLParserFeature.StrictForWall)"
RevisionVersion=2,RevisionVersion=3
2,66
2,66
"""LEVEL"".equalsIgnoreCase(ident)","""LEVEL"".equalsIgnoreCase(ident) || ""CONNECT_BY_ISCYCLE"".equalsIgnoreCase(ident)"
ch == '?',ch == '?' && JdbcConstants.POSTGRESQL.equals(dbType)
ch == '|',ch == '|' && JdbcConstants.POSTGRESQL.equals(dbType)
ch == '&',ch == '&' && JdbcConstants.POSTGRESQL.equals(dbType)
excludesPattern == null,excludesPattern == null || requestURI == null
excludesPattern == null,excludesPattern == null || requestURI == null
"StringUtils.subString(url,""weburi-"","".json"")","StringUtils.subString(url,""weburi-"","".json"",true)"
"this(parameters,new StringBuilder(),false); ","this(parameters,new StringBuilder(),true); "
"this(parameters,new StringBuilder(),false); ","this(parameters,new StringBuilder(),true); "
1000 * 1,10 * 1
Exception e,Throwable e
lexer.token() == (Token.SELECT),lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)
lexer.token() == (Token.SELECT),lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)
lock.lock(),lock.unlock()
lock.lock(),lock.unlock()
lock.lock(),lock.unlock()
lock.lock(),lock.unlock()
"getLog().error(""register druid-driver mbean error"",ex)","getLog().warn(""register druid-driver mbean error"",ex)"
"getLog().error(""register druid-driver mbean error"",ex)","getLog().warn(""register druid-driver mbean error"",ex)"
"LOG.error(""register druid-driver mbean error"",ex)","LOG.warn(""register druid-driver mbean error"",ex)"
"LOG.error(""register druid-driver mbean error"",ex)","LOG.warn(""register druid-driver mbean error"",ex)"
"getLog().error(""register druid-driver mbean error"",ex)","getLog().warn(""register druid-driver mbean error"",ex)"
"getLog().error(""register druid-driver mbean error"",ex)","getLog().warn(""register druid-driver mbean error"",ex)"
"LOG.error(""register druid-driver mbean error"",ex)","LOG.warn(""register druid-driver mbean error"",ex)"
"LOG.error(""register druid-driver mbean error"",ex)","LOG.warn(""register druid-driver mbean error"",ex)"
"new Histogram(10,100,1000,10 * 1000,100 * 1000)","new Histogram(1,10,100,1000,10 * 1000,100 * 1000)"
"new Histogram(10,100,1000,10 * 1000,100 * 1000)","new Histogram(1,10,100,1000,10 * 1000,100 * 1000)"
this.isDefaultAutoCommit(),this.getDefaultReadOnly()
this.isDefaultAutoCommit(),this.getDefaultReadOnly()
this.isDefaultAutoCommit(),this.getDefaultReadOnly()
this.isDefaultAutoCommit(),this.getDefaultReadOnly()
this.createError == null,this.createError != null
1,33
"Assert.assertTrue(provider.checkValid(""SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))""))","Assert.assertFalse(provider.checkValid(""SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))""))"
"Assert.assertTrue(provider.checkValid(""SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))""))","Assert.assertFalse(provider.checkValid(""SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))""))"
"LOG.warn(""clear parameter error"",ex)","LOG.error(""clear parameter error"",ex)"
"LOG.warn(""clear parameter error"",ex)","LOG.error(""clear parameter error"",ex)"
principalCookieName != null,principalCookieName != null && httpRequest.getCookies() != null
DruidDataSourceUtils.isRemoveAbandoned(datasource),!DruidDataSourceUtils.isRemoveAbandoned(datasource)
1,1
1,1
1,1
17,1
1,17
4,68
raw.getParameters(),raw.getOutParameters()
raw.getParameters(),raw.getOutParameters()
raw.getParameters(),raw.getOutParameters()
raw.getParameters(),raw.getOutParameters()
raw.getParameters(),raw.getOutParameters()
raw.getParameters(),raw.getOutParameters()
this.setAutoCommitOnClose(false),this.setAutoCommitOnClose(true)
rsMeta.getColumnName(i + 1),rsMeta.getColumnLabel(i + 1)
rsMeta.getColumnName(i + 1),rsMeta.getColumnLabel(i + 1)
"new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,true)","new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,false)"
"new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,true)","new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,false)"
"concurrent(driver,dataSource,100)","concurrent(driver,dataSource,30)"
i < 10,i < 3
i < 10,i < 3
i < 10,i < 3
i < 10,i < 3
i < 10,i < 3
i < 10,i < 3
activeCount == maxActive,activeCount >= maxActive
url.getServiceInterface(),url.getServiceKey()
url.getServiceInterface(),url.getServiceKey()
clazz.getInterfaces().length <= 0,clazz.getInterfaces().length == 0
"getUrl().getMethodParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)","getUrl().getMethodPositiveParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)"
"getUrl().getMethodParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)","getUrl().getMethodPositiveParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)"
"map.put(USERNAME_KEY,password)","map.put(PASSWORD_KEY,password)"
UrlUtils.getIdleTimeout(getUrl()),UrlUtils.getHeartbeat(getUrl())
UrlUtils.getIdleTimeout(getUrl()),UrlUtils.getHeartbeat(getUrl())
boolean injvm() default false; ,boolean injvm() default true; 
!first,first
!first,first
StringUtils.isEmpty(parameter),StringUtils.isEmpty(password)
"setBytes(0,data,index,length)","setBytes(index,data,0,length)"
"setBytes(0,data,index,length)","setBytes(index,data,0,length)"
10,74
0,64
n.intValue(),n.doubleValue()
n.intValue(),n.doubleValue()
n.intValue(),n.floatValue()
n.intValue(),n.floatValue()
n.intValue(),n.longValue()
n.intValue(),n.longValue()
dic.buildRouterChain(invokers),dic.buildRouterChain()
dic.buildRouterChain(invokers),dic.buildRouterChain()
dic.buildRouterChain(invokers),dic.buildRouterChain()
"routerChain.notifyFullInvokers(groupInvokers,getUrl())","routerChain.notifyFullInvokers(invokers,getUrl())"
"subProperties.put(subName,value)","subProperties.putIfAbsent(subName,value)"
"subProperties.put(subName,value)","subProperties.putIfAbsent(subName,value)"
Thread.sleep(100),Thread.sleep(300)
Thread.sleep(100),Thread.sleep(300)
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
getTimeout(),getConnectTimeout()
url.toServiceString(),url.toServiceStringWithoutResolving()
url.toServiceString(),url.toServiceStringWithoutResolving()
"fileName.startsWith(""/"")","fileName.startsWith(""/"") || fileName.matches(""^[A-z]:\\\\\\S+$"")"
testConsumerConfig(),testProviderConfig()
testConsumerConfig(),testProviderConfig()
0,2
int retries() default 0; ,int retries() default 2; 
/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 0; ,/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 2; 
Integer.valueOf(2),Integer.valueOf(1)
retries=2,retries=1
invocation.addAttachmentsIfAbsent(context),invocation.addAttachments(context)
invocation.addAttachmentsIfAbsent(context),invocation.addAttachments(context)
providerConfig.setTimeout(1000),providerConfig.setTimeout(5000)
((ExecutorService)executor).isShutdown(),((ExecutorService)executor).isTerminated()
((ExecutorService)executor).isShutdown(),((ExecutorService)executor).isTerminated()
"logger.info(""fail-mock: "" + invocation.getMethodName() + "" fail-mock enabled , url : ""+ directory.getUrl(),e)","logger.warn(""fail-mock: "" + invocation.getMethodName() + "" fail-mock enabled , url : ""+ directory.getUrl(),e)"
"logger.info(""fail-mock: "" + invocation.getMethodName() + "" fail-mock enabled , url : ""+ directory.getUrl(),e)","logger.warn(""fail-mock: "" + invocation.getMethodName() + "" fail-mock enabled , url : ""+ directory.getUrl(),e)"
"assertEquals(12,url.getPort())","assertEquals(0,url.getPort())"
"{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}","{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"
"{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}","{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"
(byte)0xff,(byte)0xe2
(byte)0xff,(byte)0xe2
(byte)0xff,(byte)0xe2
(byte)0xdf,(byte)0xe2
(byte)0xdf,(byte)0xe2
"{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}","{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"
providers.size() >= 0,providers.size() > 0
ctClass.toClass(),"ctClass.toClass(clazz.getClassLoader(),null)"
"oldOverride.removeParameter(""enabled"")","oldOverride.addParameter(""enabled"",""enabled"")"
"PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes())","PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes())"
MAX_LENGTH=100,MAX_LENGTH=200
c.getDeclaredConstructors(),t.getDeclaredConstructors()
c.getDeclaredConstructors(),t.getDeclaredConstructors()
directoryUrl.getParameter(Constants.GROUP_KEY),"directoryUrl.getParameter(Constants.GROUP_KEY,"""")"
exported,!exported
millis % offset == 0,offset == 0 || millis % offset == 0
millis % offset == 0,offset == 0 || millis % offset == 0
new String(bytes2),"new String(bytes2,""UTF8"")"
new String(bytes2),"new String(bytes2,""UTF8"")"
new String(bytes2),"new String(bytes2,""UTF8"")"
new String(bytes2),"new String(bytes2,""UTF8"")"
new String(bytes2),"new String(bytes2,""UTF8"")"
new String(bytes2),"new String(bytes2,""UTF8"")"
toJSON(entry.getValue()),"toJSON(entry.getValue(),config)"
toJSON(item),"toJSON(item,config)"
count < 12,count < 17
1000 * 1000 * 10,1000 * 1000 * 1
DateTimeZone.getDefault(),"DateTimeZone.forID(""Asia/Shanghai"")"
100,-100
100,-100
TypeUtils.getKoltinConstructor(constructors),"TypeUtils.getKoltinConstructor(constructors,paramNames)"
arguments == null,arguments == null || class_gd == null
arguments == null,arguments == null || class_gd == null
1024 * 64,1024 * 128
"deserialze(parser,type,fieldName,null,0,null)","deserialze(parser,type,fieldName,0)"
new SimpleDateFormat(format),"new SimpleDateFormat(format,JSON.defaultLocale)"
fieldDeser.getPropertyValue(currentObject),fieldDeser.getPropertyValueDirect(currentObject)
fieldDeser.getPropertyValue(currentObject),fieldDeser.getPropertyValueDirect(currentObject)
(ObjectDeserializer)value,(ObjectSerializer)value
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
Calendar.getInstance(JSON.defaultLocale),"Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
new ASMClassLoader(),new ASMClassLoader(ASMSerializerFactory.class.getClassLoader())
elementClass != null,elementClass != null && Modifier.isPublic(elementClass.getModifiers())
elementClass != null,elementClass != null && Modifier.isPublic(elementClass.getModifiers())
"Assert.assertEquals(1,fastJsonConfig.getFeatures().length)","Assert.assertEquals(0,fastJsonConfig.getFeatures().length)"
javaBeanSerializer.getFieldValues(json),"javaBeanSerializer.getFieldValues(javaObject,json)"
javaBeanSerializer.getFieldValues(json),"javaBeanSerializer.getFieldValues(javaObject,json)"
isDoubleA && isIntA,isDoubleA && isIntB
isDoubleA && isIntA,isDoubleA && isIntB
"Assert.assertEquals(2,json.size())","Assert.assertEquals(3,json.size())"
superClass == Object.class,superClass == Object.class || superClass == null
superClass == Object.class,superClass == Object.class || superClass == null
superClass == Object.class,superClass == Object.class || superClass == null
superClass == Object.class,superClass == Object.class || superClass == null
type instanceof WildcardType || type instanceof TypeVariable,type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType
"context.var(""long"")","context.var(""long"",2)"
"context.var(""double"")","context.var(""double"",2)"
"context.var(""double"")","context.var(""double"",2)"
"context.var(""long"")","context.var(""long"",2)"
"context.var(""double"")","context.var(""double"",2)"
"context.var(""long"")","context.var(""long"",2)"
"context.var(""double"")","context.var(""double"",2)"
"context.var(""long"")","context.var(""long"",2)"
"context.var(""double"")","context.var(""double"",2)"
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
StatBuckets.prettyUptime(secs),StatBuckets.prettyUptimeStr(secs)
"libDirectory="".""","outputDirectory=""."""
"libDirectory="".""","outputDirectory=""."""
outputFile.lastModified() < grammarFile.lastModified(),outputFile.lastModified() <= grammarFile.lastModified()
"Arrays.asList(""Java"",""CSharp"",""Python2"",""Python3"",""Node"")","Arrays.asList(""Java"",""CSharp"",""Python2"",""Python3"",""Node"",""Cpp"")"
"Arrays.asList(""Java"",""CSharp"")","Arrays.asList(""Java"",""CSharp"",""Cpp"")"
"g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token)","g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token,""''"")"
i < getATN().maxTokenType,i <= getATN().maxTokenType
i < getATN().maxTokenType,i <= getATN().maxTokenType
n <= k,n <= k && i > 0
new StringBuilder(674),new StringBuilder(734)
new StringBuilder(674),new StringBuilder(734)
new StringBuilder(167),new StringBuilder(194)
new StringBuilder(709),new StringBuilder(726)
new StringBuilder(709),new StringBuilder(726)
new StringBuilder(254),new StringBuilder(253)
new StringBuilder(254),new StringBuilder(253)
new StringBuilder(254),new StringBuilder(253)
new StringBuilder(246),new StringBuilder(245)
new StringBuilder(246),new StringBuilder(245)
new StringBuilder(246),new StringBuilder(245)
new StringBuilder(741),new StringBuilder(740)
new StringBuilder(741),new StringBuilder(740)
new StringBuilder(741),new StringBuilder(740)
new StringBuilder(741),new StringBuilder(740)
new StringBuilder(247),new StringBuilder(246)
new StringBuilder(247),new StringBuilder(246)
new StringBuilder(247),new StringBuilder(246)
new StringBuilder(730),new StringBuilder(729)
new StringBuilder(730),new StringBuilder(729)
new StringBuilder(730),new StringBuilder(729)
new StringBuilder(730),new StringBuilder(729)
new StringBuilder(246),new StringBuilder(245)
new StringBuilder(246),new StringBuilder(245)
new StringBuilder(246),new StringBuilder(245)
new StringBuilder(639),new StringBuilder(638)
new StringBuilder(639),new StringBuilder(638)
new StringBuilder(639),new StringBuilder(638)
new StringBuilder(639),new StringBuilder(638)
new StringBuilder(239),new StringBuilder(238)
new StringBuilder(239),new StringBuilder(238)
new StringBuilder(239),new StringBuilder(238)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(239),new StringBuilder(238)
new StringBuilder(239),new StringBuilder(238)
new StringBuilder(239),new StringBuilder(238)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(561),new StringBuilder(560)
new StringBuilder(561),new StringBuilder(560)
gen.generateParser(),gen.generateParser(false)
new StringBuilder(247),new StringBuilder(259)
return false; ,return true; 
return false; ,return true; 
"NONCONFORMING_LR_RULE(165,""rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle"",ErrorSeverity.ERROR)","NONCONFORMING_LR_RULE(169,""rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle"",ErrorSeverity.ERROR)"
"/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPython3Target {   protected static final String[] python2Keywords={""abs"",""all"",""any"",""apply"",""as"",""bin"",""bool"",""buffer"",""bytearray"",""callable"",""chr"",""classmethod"",""coerce"",""compile"",""complex"",""delattr"",""dict"",""dir"",""divmod"",""enumerate"",""eval"",""execfile"",""file"",""filter"",""float"",""format"",""frozenset"",""getattr"",""globals"",""hasattr"",""hash"",""help"",""hex"",""id"",""input"",""int"",""intern"",""isinstance"",""issubclass"",""iter"",""len"",""list"",""locals"",""map"",""max"",""min"",""next"",""memoryview"",""object"",""oct"",""open"",""ord"",""pow"",""print"",""property"",""range"",""raw_input"",""reduce"",""reload"",""repr"",""reversed"",""round"",""set"",""setattr"",""slice"",""sorted"",""staticmethod"",""str"",""sum"",""super"",""tuple"",""type"",""unichr"",""unicode"",""vars"",""with"",""xrange"",""zip"",""__import__"",""True"",""False"",""None""};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,""Python2"");   }   @Override public String getVersion(){     return ""4.4.0"";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add(""rule"");     badWords.add(""parserRule"");   } } ","/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPythonTarget {   protected static final String[] python2Keywords={""abs"",""all"",""any"",""apply"",""as"",""bin"",""bool"",""buffer"",""bytearray"",""callable"",""chr"",""classmethod"",""coerce"",""compile"",""complex"",""delattr"",""dict"",""dir"",""divmod"",""enumerate"",""eval"",""execfile"",""file"",""filter"",""float"",""format"",""frozenset"",""getattr"",""globals"",""hasattr"",""hash"",""help"",""hex"",""id"",""input"",""int"",""intern"",""isinstance"",""issubclass"",""iter"",""len"",""list"",""locals"",""map"",""max"",""min"",""next"",""memoryview"",""object"",""oct"",""open"",""ord"",""pow"",""print"",""property"",""range"",""raw_input"",""reduce"",""reload"",""repr"",""reversed"",""round"",""set"",""setattr"",""slice"",""sorted"",""staticmethod"",""str"",""sum"",""super"",""tuple"",""type"",""unichr"",""unicode"",""vars"",""with"",""xrange"",""zip"",""__import__"",""True"",""False"",""None""};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,""Python2"");   }   @Override public String getVersion(){     return ""4.4.0"";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add(""rule"");     badWords.add(""parserRule"");   } } "
grammar.getTokenNames(),grammar.getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
grammar.getTokenNames(),grammar.getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
getTokenNames(),getTokenDisplayNames()
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))),isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) && !errorElements.contains(overriderParameters.get(i))&& warnedElements.add(overriderParameters.get(i))
a.entrySet(),b.entrySet()
a.entrySet(),b.entrySet()
r.locals.ast=returns,r.locals.ast=locals
dfa == null,dfa == null || dfa.states.isEmpty()
dfa == null,dfa == null || dfa.states.isEmpty()
options != null,options != null && options.getChildCount() > 0
index > n,index >= n
"g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),expr)","g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),rref.name,expr)"
"/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(130,""your grammars contain a circular dependency and cannot be sorted into a valid build order"",ErrorSeverity.ERROR)","/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(200,""your grammars contain a circular dependency and cannot be sorted into a valid build order"",ErrorSeverity.ERROR)"
p > 0,p >= 0
tokens.toString(),tokens.getText()
tokens.toString(),tokens.getText()
tokens.toString(),tokens.getText()
tokens.toString(),tokens.getText()
"failOrAccept(prevAccept,input,reach,t)","failOrAccept(prevAccept,input,closure,t)"
annotations.get(node),annotations.remove(node)
annotations.get(node),annotations.remove(node)
"/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } ","/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer<Symbol> recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } "
"/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } ","/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } "
ast.atnState != null,ast != null && ast.atnState != null
p == null,p == null || t < -1
p == null,p == null || t < -1
public class Arial extends FontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } ,public class Arial extends BasicFontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
public class ArialBlack extends FontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } ,public class ArialBlack extends BasicFontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
public class CourierNew extends FontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } ,public class CourierNew extends BasicFontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
protected FontMetrics fontMetrics; ,protected BasicFontMetrics fontMetrics; 
(FontMetrics)c.newInstance(),(BasicFontMetrics)c.newInstance()
public class TimesNewRoman extends FontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } ,public class TimesNewRoman extends BasicFontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } 
assertNotPresent(GsonConverter.class),assertPresent(GsonConverter.class)
assertNotPresent(GsonConverter.class),assertPresent(GsonConverter.class)
"Assert.assertEquals(1456,details.get(6).getAbsolutePosition())","Assert.assertEquals(1455,details.get(6).getAbsolutePosition())"
""""" + SYSTEM_PROPERTIES_MODE_FALLBACK",""""" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE"
""""" + SYSTEM_PROPERTIES_MODE_FALLBACK",""""" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE"
environmentVariableMode=1,environmentVariableMode=2
1,0
mock.expectedMessageCount(3),mock.expectedMessageCount(4)
0,2
IllegalArgumentException.class,IllegalStateException.class
Thread.sleep(200),Thread.sleep(1000)
getConfiguration().getConnectionFactory(),getConfiguration().getOrCreateConnectionFactory()
getConfiguration().getConnectionFactory(),getConfiguration().getOrCreateConnectionFactory()
getConnectionFactory(),getOrCreateConnectionFactory()
getConnectionFactory(),getOrCreateConnectionFactory()
amq.getConfiguration().getConnectionFactory(),amq.getConfiguration().getOrCreateConnectionFactory()
amq.getConfiguration().getConnectionFactory(),amq.getConfiguration().getOrCreateConnectionFactory()
getConnectionFactory(),getOrCreateConnectionFactory()
getConnectionFactory(),getOrCreateConnectionFactory()
getConnectionFactory(),getOrCreateConnectionFactory()
getConnectionFactory(),getOrCreateConnectionFactory()
javaClass.addNestedType().setPublic(),javaClass.addNestedType().setPackagePrivate()
javaClass.addNestedType().setPublic(),javaClass.addNestedType().setPackagePrivate()
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
9,1
1,17
new ClientBuilderImpl().serviceUrl(getPulsarBrokerUrl()).ioThreads(2),new ClientBuilderImpl().serviceUrl(getPulsarBrokerUrl()).ioThreads(5)
new PulsarComponent(),new PulsarComponent(context)
url2 != null,url3 != null
url2 != null,url3 != null
context.getStreamCachingStrategy().getSpoolChiper(),context.getStreamCachingStrategy().getSpoolCipher()
context.getStreamCachingStrategy().getSpoolChiper(),context.getStreamCachingStrategy().getSpoolCipher()
1,17
1,0
@UriParam,@UriPath
"catalog.validateLanguagePredicate(null,""simple"",detail.getSimple())","catalog.validateLanguageExpression(null,""simple"",detail.getSimple())"
"catalog.validateLanguagePredicate(null,""simple"",detail.getSimple())","catalog.validateLanguageExpression(null,""simple"",detail.getSimple())"
super.createDataFormat(camelContext),super.doCreateDataFormat(camelContext)
super.createDataFormat(camelContext),super.doCreateDataFormat(camelContext)
loadResourceAsURL(name),"loadResourceAsURL(name,loader)"
type.getDeclaredConstructor(String.class),type.getConstructor(String.class)
type.getDeclaredConstructor(String.class),type.getConstructor(String.class)
return false; ,return true; 
"LOG.trace(""Trying to open resource [{}] as a class path resource using the classloader [{}]."",this.getClass().getClassLoader())","LOG.trace(""Trying to open resource [{}] as a class path resource using the classloader [{}]."",resource,this.getClass().getClassLoader())"
"LOG.warn(""Cannot create the SAXParser XMLReader, due to {}"",ex)","LOG.warn(""Cannot create the SAXParser XMLReader, due to {}"",ex.getMessage(),ex)"
"LOG.error(""XMLStreamReader {} not supporting Location"")","LOG.error(""XMLStreamReader {} not supporting Location"",reader)"
"LOG.trace(""No binding to service interface as @Body,@Header,@ExchangeProperty not detected. Using BeanInvocation as message body when calling proxy method: {}"")","LOG.trace(""No binding to service interface as @Body,@Header,@ExchangeProperty not detected. Using BeanInvocation as message body when calling proxy method: {}"",method)"
"Assert.assertEquals(1062,details.get(0).getAbsolutePosition())","Assert.assertEquals(1061,details.get(0).getAbsolutePosition())"
"Assert.assertEquals(1145,details.get(1).getAbsolutePosition())","Assert.assertEquals(1144,details.get(1).getAbsolutePosition())"
"Assert.assertEquals(1203,details.get(2).getAbsolutePosition())","Assert.assertEquals(1202,details.get(2).getAbsolutePosition())"
"Assert.assertEquals(1457,details.get(6).getAbsolutePosition())","Assert.assertEquals(1456,details.get(6).getAbsolutePosition())"
"log.warn(""Annotation scanning mode loaded {} type converters. Its recommended to migrate to @Converter(loader = true) for fast type converter mode."")","log.warn(""Annotation scanning mode loaded {} type converters. Its recommended to migrate to @Converter(loader = true) for fast type converter mode."",additional)"
"/**   * Returns messages older than the message ID specified as a numeric string. This is useful for paginating messages. For example, if you're currently viewing 20 messages and the oldest is number 2912, you could append ""?olderThan=2912″ to your request to get the 20 messages prior to those you're seeing.  */ private Integer olderThan=-1; ","/**   * Returns messages older than the message ID specified as a numeric string. This is useful for paginating messages. For example, if you're currently viewing 20 messages and the oldest is number 2912, you could append ""?olderThan=2912″ to your request to get the 20 messages prior to those you're seeing.  */ private Long olderThan=-1L; "
"/**   * Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages. If you're looking at messages, and the most recent message returned is 3516, you can make a request with the parameter ""?newerThan=3516″ to ensure that you do not get duplicate copies of messages already on your page.  */ private Integer newerThan=-1; ","/**   * Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages. If you're looking at messages, and the most recent message returned is 3516, you can make a request with the parameter ""?newerThan=3516″ to ensure that you do not get duplicate copies of messages already on your page.  */ private Long newerThan=-1L; "
public Integer getOlderThan(){   return olderThan; } ,public Long getOlderThan(){   return olderThan; } 
Integer olderThan,Long olderThan
public Integer getNewerThan(){   return newerThan; } ,public Long getNewerThan(){   return newerThan; } 
Integer newerThan,Long newerThan
"registry.put(""curator"",client)","registry.bind(""curator"",client)"
"registry.put(""curator"",client)","registry.bind(""curator"",client)"
"registry.put(""sessionStateListener"",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )","registry.bind(""sessionStateListener"",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )"
"registry.put(""sessionStateListener"",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )","registry.bind(""sessionStateListener"",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )"
"registry.put(""dummy"",new ReactiveStreamsTestService(""from-registry""))","registry.bind(""dummy"",new ReactiveStreamsTestService(""from-registry""))"
"registry.put(""dummy"",new ReactiveStreamsTestService(""from-registry""))","registry.bind(""dummy"",new ReactiveStreamsTestService(""from-registry""))"
"registry.put(""connectionFactoryMock"",connectionFactoryMock)","registry.bind(""connectionFactoryMock"",connectionFactoryMock)"
"registry.put(""connectionFactoryMock"",connectionFactoryMock)","registry.bind(""connectionFactoryMock"",connectionFactoryMock)"
"reg.put(LDAP_CONN_NAME,getWiredConnection(ldapServer))","reg.bind(LDAP_CONN_NAME,getWiredConnection(ldapServer))"
"reg.put(LDAP_CONN_NAME,getWiredConnection(ldapServer))","reg.bind(LDAP_CONN_NAME,getWiredConnection(ldapServer))"
"reg.put(""localhost:"" + port,ctx)","reg.bind(""localhost:"" + port,ctx)"
"reg.put(""localhost:"" + port,ctx)","reg.bind(""localhost:"" + port,ctx)"
"reg.put(""localhost:"" + port,env)","reg.bind(""localhost:"" + port,env)"
"reg.put(""localhost:"" + port,env)","reg.bind(""localhost:"" + port,env)"
"registry.put(""params"",params)","registry.bind(""params"",params)"
"registry.put(""params"",params)","registry.bind(""params"",params)"
"registry.put(""params"",params)","registry.bind(""params"",params)"
"registry.put(""params"",params)","registry.bind(""params"",params)"
"getRegistry().put(""hb"",hb)","getRegistry().bind(""hb"",hb)"
"getRegistry().put(""hb"",hb)","getRegistry().bind(""hb"",hb)"
"getRegistry().put(""myFilter"",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )","getRegistry().bind(""myFilter"",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )"
"getRegistry().put(""myFilter"",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )","getRegistry().bind(""myFilter"",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )"
"getRegistry().put(""myTable"",ht)","getRegistry().bind(""myTable"",ht)"
"getRegistry().put(""myTable"",ht)","getRegistry().bind(""myTable"",ht)"
"registry.put(""eventBus"",new EventBus())","registry.bind(""eventBus"",new EventBus())"
"registry.put(""eventBus"",new EventBus())","registry.bind(""eventBus"",new EventBus())"
"registry.put(""myConf"",new XmlConfiguration(getClass().getResource(""/ehcache/ehcache-file-config.xml"")))","registry.bind(""myConf"",new XmlConfiguration(getClass().getResource(""/ehcache/ehcache-file-config.xml"")))"
"registry.put(""myConf"",new XmlConfiguration(getClass().getResource(""/ehcache/ehcache-file-config.xml"")))","registry.bind(""myConf"",new XmlConfiguration(getClass().getResource(""/ehcache/ehcache-file-config.xml"")))"
"registry.put(""myManager"",cacheManager)","registry.bind(""myManager"",cacheManager)"
"registry.put(""myManager"",cacheManager)","registry.bind(""myManager"",cacheManager)"
"registry.put(""amazonSQSClient"",clientMock)","registry.bind(""amazonSQSClient"",clientMock)"
"registry.put(""amazonSQSClient"",clientMock)","registry.bind(""amazonSQSClient"",clientMock)"
"registry.put(""amazonSQSClient"",clientMock)","registry.bind(""amazonSQSClient"",clientMock)"
"registry.put(""amazonSQSClient"",clientMock)","registry.bind(""amazonSQSClient"",clientMock)"
"registry.put(""firehoseClient"",amazonKinesisFirehoseClient)","registry.bind(""firehoseClient"",amazonKinesisFirehoseClient)"
"registry.put(""firehoseClient"",amazonKinesisFirehoseClient)","registry.bind(""firehoseClient"",amazonKinesisFirehoseClient)"
"registry.put(""kinesisClient"",amazonKinesisClient)","registry.bind(""kinesisClient"",amazonKinesisClient)"
"registry.put(""kinesisClient"",amazonKinesisClient)","registry.bind(""kinesisClient"",amazonKinesisClient)"
"registry.put(""blogService"",new BlogService())","registry.bind(""blogService"",new BlogService())"
"registry.put(""blogService"",new BlogService())","registry.bind(""blogService"",new BlogService())"
"registry.put(""myConfigurer"",configurer)","registry.bind(""myConfigurer"",configurer)"
"registry.put(""myConfigurer"",configurer)","registry.bind(""myConfigurer"",configurer)"
"registry.put(""groovyShellFactory"",groovyShellFactory)","registry.bind(""groovyShellFactory"",groovyShellFactory)"
"registry.put(""groovyShellFactory"",groovyShellFactory)","registry.bind(""groovyShellFactory"",groovyShellFactory)"
value == 0,value <= 0
result.expectedMessageCount(0),result.expectedMessageCount(1)
"new DynamicAwareEntry(uri,properties,lenient)","new DynamicAwareEntry(uri,originalUri,properties,lenient)"
entry.getOriginalUri(),entry.getUri()
entry.getOriginalUri(),entry.getUri()
"new DynamicAwareEntry(""http://localhost/test"",null,null)","new DynamicAwareEntry(""http://localhost/test"",null,null,null)"
"new DynamicAwareEntry(""https://localhost/test"",null,null)","new DynamicAwareEntry(""https://localhost/test"",null,null,null)"
"new DynamicAwareEntry(""http4://localhost/test"",null,null)","new DynamicAwareEntry(""http4://localhost/test"",null,null,null)"
"new DynamicAwareEntry(""https4://localhost/test"",null,null)","new DynamicAwareEntry(""https4://localhost/test"",null,null,null)"
"new DynamicAwareEntry(""http://localhost:80/test"",null,null)","new DynamicAwareEntry(""http://localhost:80/test"",null,null,null)"
"new DynamicAwareEntry(""https://localhost:443/test"",null,null)","new DynamicAwareEntry(""https://localhost:443/test"",null,null,null)"
"new DynamicAwareEntry(""http://localhost:8080/test"",null,null)","new DynamicAwareEntry(""http://localhost:8080/test"",null,null,null)"
"new DynamicAwareEntry(""https://localhost:8443/test"",null,null)","new DynamicAwareEntry(""https://localhost:8443/test"",null,null,null)"
expectedMinimumCount == -1,expectedMinimumCount == -1 && expectedCount <= 0
return false; ,return true; 
"ReactiveHelper.scheduleLast(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException(""Error processing aggregated exchange"",exchange,exchange.getException());   }  else {     log.trace(""Processing aggregated exchange: {} complete."",exchange);   } } ),""sending aggregated exchange"")","ReactiveHelper.scheduleSync(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException(""Error processing aggregated exchange"",exchange,exchange.getException());   }  else {     log.trace(""Processing aggregated exchange: {} complete."",exchange);   } } ),""sending aggregated exchange"")"
"ReactiveHelper.scheduleLast(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException(""Error processing aggregated exchange"",exchange,exchange.getException());   }  else {     log.trace(""Processing aggregated exchange: {} complete."",exchange);   } } ),""sending aggregated exchange"")","ReactiveHelper.scheduleSync(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException(""Error processing aggregated exchange"",exchange,exchange.getException());   }  else {     log.trace(""Processing aggregated exchange: {} complete."",exchange);   } } ),""sending aggregated exchange"")"
"ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""CamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())","ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""CamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())"
"ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""CamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())","ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""CamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())"
"ReactiveHelper.scheduleLast(runnable,""Multicast next step"")","ReactiveHelper.schedule(runnable,""Multicast next step"")"
"ReactiveHelper.scheduleLast(runnable,""Multicast next step"")","ReactiveHelper.schedule(runnable,""Multicast next step"")"
"ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""SharedCamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())","ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""SharedCamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())"
"ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""SharedCamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())","ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace(""Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}"",exchange.getExchangeId(),exchange);   } } ,""SharedCamelInternalProcessor - UnitOfWork - afterProcess - "" + processor + "" - ""+ exchange.getExchangeId())"
0,2
0,2
"LOG.debug(""Received ping --> {}"",payload)","log.debug(""Received ping --> {}"",payload)"
"LOG.debug(""Received ping --> {}"",payload)","log.debug(""Received ping --> {}"",payload)"
"context.startRoute(""consumer"")",context.start()
"context.startRoute(""consumer"")",context.start()
SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules()),SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())
SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules()),SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())
"assertEquals(7,LambdaOperations.values().length)","assertEquals(8,LambdaOperations.values().length)"
response.getHeader(Exchange.CONTENT_TYPE) != null,response.getHeader(Exchange.CONTENT_TYPE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.CONTENT_TYPE)
1,1
2,2
classResolver.resolveClass(type),classResolver.resolveMandatoryClass(type)
classResolver.resolveClass(type),classResolver.resolveMandatoryClass(type)
1,1
offsetRepository != null,!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null
0,16
"typeConverter.convertTo(XMLStreamReader.class,createNonXmlFilterReader(exchange,stream))","typeConverter.convertTo(XMLStreamReader.class,exchange,createNonXmlFilterReader(exchange,stream))"
"typeConverter.convertTo(XMLStreamReader.class,stream)","typeConverter.convertTo(XMLStreamReader.class,exchange,stream)"
"typeConverter.convertTo(XMLStreamReader.class,stream)","typeConverter.convertTo(XMLStreamReader.class,exchange,stream)"
assertThat(xml).isEqualTo(expectedContent),assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
assertThat(xml).isEqualTo(expectedContent),assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService),camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService),camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService),camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService),camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
testOffset=4875454l,testOffset=4875454L
"getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)","getCamelContext().getTypeConverter().convertTo(int.class,timeout)"
"getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)","getCamelContext().getTypeConverter().convertTo(int.class,timeout)"
"assertEquals(""One propagated header is expected."",5,headers.toArray().length)","assertEquals(""One propagated header is expected."",6,headers.toArray().length)"
watch.stop(),watch.taken()
watch.stop(),watch.taken()
entry != null,entry != null && !DropboxUploadMode.force.equals(mode)
entry != null,entry != null && !DropboxUploadMode.force.equals(mode)
camelContext.getComponent(component),"camelContext.getComponent(component,false)"
notifier.isIgnoreExchangeSentEvents(),notifier.isIgnoreExchangeSendingEvents()
notifier.isIgnoreExchangeSentEvents(),notifier.isIgnoreExchangeSendingEvents()
return false; ,return true; 
streamCachingStrategy.setSpoolThreshold(1l),streamCachingStrategy.setSpoolThreshold(1L)
new KafkaComponent(),new KafkaComponent(context)
2,18
"LOG.debug(""EOL(end-of-line) defined for the CSV: {}"",crlf)","LOG.debug(""EOL(end-of-line) defined for the CSV: {}"",eol)"
"assertEquals(mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.INSERT)","assertEquals(ChronicleEngineMapEventType.INSERT,mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))"
"assertEquals(mock.getExchanges().get(0).getIn().getBody(String.class),""val-1"")","assertEquals(""val-1"",mock.getExchanges().get(0).getIn().getBody(String.class))"
"assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.REMOVE)","assertEquals(ChronicleEngineMapEventType.REMOVE,mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))"
"assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),""val-2"")","assertEquals(""val-2"",mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE))"
route.getOutputs().isEmpty(),route.getOutputs() == null || route.getOutputs().isEmpty()
"String retval=""""; ",StringBuilder retval=new StringBuilder(); 
ObjectHelper.isEmpty(configuration.getClusterService()),ObjectHelper.isNotEmpty(configuration.getClusterService())
ObjectHelper.isEmpty(configuration.getClusterService()),ObjectHelper.isNotEmpty(configuration.getClusterService())
clusterService != null,routeController != null
clusterService != null,routeController != null
exchange.getOut(),exchange.getIn()
exchange.getOut(),exchange.getIn()
resultEndpoint.assertIsNotSatisfied(),resultEndpoint.assertIsSatisfied()
resultEndpoint.assertIsNotSatisfied(),resultEndpoint.assertIsSatisfied()
1,17
1,17
12,28
group != null,"group != null && !""0"".equals(group)"
val=1,val=2
"mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false)","mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true)"
"LOG.trace(""Terminating gRPC server"")","LOG.debug(""Terminating gRPC server"")"
"LOG.trace(""Terminating gRPC server"")","LOG.debug(""Terminating gRPC server"")"
"LOG.info(""Building gRPC server on "" + configuration.getHost() + "":""+ configuration.getPort())","LOG.debug(""Building gRPC server on "" + configuration.getHost() + "":""+ configuration.getPort())"
"LOG.info(""Building gRPC server on "" + configuration.getHost() + "":""+ configuration.getPort())","LOG.debug(""Building gRPC server on "" + configuration.getHost() + "":""+ configuration.getPort())"
"LOG.info(""Building gRPC server on <any address>"" + "":"" + configuration.getPort())","LOG.debug(""Building gRPC server on <any address>"" + "":"" + configuration.getPort())"
"LOG.info(""Building gRPC server on <any address>"" + "":"" + configuration.getPort())","LOG.debug(""Building gRPC server on <any address>"" + "":"" + configuration.getPort())"
"LOG.info(""Getting synchronous method stub from channel"")","LOG.debug(""Getting synchronous method stub from channel"")"
"LOG.info(""Getting synchronous method stub from channel"")","LOG.debug(""Getting synchronous method stub from channel"")"
"LOG.info(""Getting asynchronous method stub from channel"")","LOG.debug(""Getting asynchronous method stub from channel"")"
"LOG.info(""Getting asynchronous method stub from channel"")","LOG.debug(""Getting asynchronous method stub from channel"")"
"LOG.trace(""Terminating channel to the remote gRPC server"")","LOG.debug(""Terminating channel to the remote gRPC server"")"
"LOG.trace(""Terminating channel to the remote gRPC server"")","LOG.debug(""Terminating channel to the remote gRPC server"")"
option.getType(),option.getJavaType()
option.getType(),option.getJavaType()
option.getType(),option.getJavaType()
option.getType(),option.getJavaType()
CONCURRENT_THREAD_COUNT=300,CONCURRENT_THREAD_COUNT=30
EmitterProcessor.create(1),"EmitterProcessor.create(1,false)"
Flux.create(camelSink::set),"Flux.create(camelSink::set,FluxSink.OverflowStrategy.IGNORE)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
"LOG.error(""OpenTracing: Failed to capture tracing data"",t)","LOG.warn(""OpenTracing: Failed to capture tracing data"",t)"
1,0
1,0
0,16
1,0
10,26
CamelCloudServiceCallConfiguration.class,CamelCloudServiceCallRoutesAutoConfiguration.class
CamelCloudServiceCallConfiguration.class,CamelCloudServiceCallRoutesAutoConfiguration.class
10,26
1,0
"assertResultExchange(result.getExchanges().get(0),false)","assertResultExchange(result.getExchanges().get(0),true)"
"oldModel.getVendorExtensions().get(""x-className"") == null","oldModel.getVendorExtensions().get(""x-className"") != null"
0,1
"assertEquals(9,rows.size())","assertEquals(10,rows.size())"
"assertEquals(15,rows.size())","assertEquals(16,rows.size())"
"assertEquals(2,data.size())","assertEquals(3,data.size())"
new DefaultAsyncHttpClient(),new DefaultAsyncHttpClient(config)
endpoint.setDataSource(ds),endpoint.setDataSource(target)
"Arrays.asList(""onContextStart"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onComponentAdd"",""onEndpointAdd"",""onComponentRemove"",""onContextStop"")","Arrays.asList(""onContextStart"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onComponentAdd"",""onEndpointAdd"",""onComponentRemove"",""onContextStop"")"
"assertEquals(9,set.size())","assertEquals(10,set.size())"
"assertEquals(8,set.size())","assertEquals(9,set.size())"
services=8,services=9
services=8,services=9
requestModels.entrySet(),responseModels.entrySet()
requestModels.entrySet(),responseModels.entrySet()
f.getAttrs().getMTime() * 1000,f.getAttrs().getMTime() * 1000L
"assertEquals(503,cause.getStatusCode())","assertEquals(504,cause.getStatusCode())"
queueView.get().get(index.longValue()),queueView.get().getExcerpt(index.longValue())
queueView.get().get(index.longValue()),queueView.get().getExcerpt(index.longValue())
HELSINKY{   @Override public ServiceNowProducer get(  ServiceNowEndpoint endpoint) throws Exception {     return new HelsinkiServiceNowProducer(endpoint);   } } ,HELSINKI{   @Override public ServiceNowProducer get(  ServiceNowEndpoint endpoint) throws Exception {     return new HelsinkiServiceNowProducer(endpoint);   } } 
ctx.alloc().heapBuffer(),ctx.alloc().buffer()
ctx.alloc().heapBuffer(),ctx.alloc().buffer()
"((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)","!((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)"
return true; ,return false; 
ActionsEnum.valueOf(action),AsteriskActionEnum.valueOf(action)
ActionsEnum.valueOf(action),AsteriskActionEnum.valueOf(action)
route.setDelay(5000),route.setDelay(6000)
route.setDelay(5),route.setDelay(5000)
delay=2,delay=5000
"dataFormatModel.setLabel(row.get(""description""))","dataFormatModel.setDescription(row.get(""description""))"
"dataFormatModel.setLabel(row.get(""description""))","dataFormatModel.setDescription(row.get(""description""))"
"new JCacheProducer(this,cacheCnfiguration)","new JCacheProducer(this,cacheConfiguration)"
propertiesComponent.isDefaultCreated(),propertiesComponent == null || propertiesComponent.isDefaultCreated()
aliases.size() > 0,aliases.size() > 1
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
ChronicleEngineEnpoint.class,ChronicleEngineEndpoint.class
ChronicleEngineEnpoint.class,ChronicleEngineEndpoint.class
"new ChronicleEngineEnpoint(uri,this,configuration)","new ChronicleEngineEndpoint(uri,this,configuration)"
ChronicleEngineEnpoint endpoint,ChronicleEngineEndpoint endpoint
ChronicleEngineEnpoint endpoint=(ChronicleEngineEnpoint)getEndpoint(); ,ChronicleEngineEndpoint endpoint=(ChronicleEngineEndpoint)getEndpoint(); 
ChronicleEngineEnpoint endpoint,ChronicleEngineEndpoint endpoint
(ChronicleEngineEnpoint)getEndpoint(),(ChronicleEngineEndpoint)getEndpoint()
model.getModelName(),model.getName()
model.getModelName(),model.getName()
Vector<>,ArrayList<>
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel()),endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel()),endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
1,0
1,0
1,0
"KeyValueHolder<RouteContext,Processor>","KeyValueHolder<String,Processor>"
RouteContext key,String key
@UriParam,@UriPath
1,0
results.expectedMessageCount(2),results.expectedMessageCount(3)
"@UriParam(label=""producer"",defaultValue=""1"") private Integer requestRequiredAcks=1; ","@UriParam(label=""producer"",defaultValue=""1"") private String requestRequiredAcks=""1""; "
public Integer getRequestRequiredAcks(){   return requestRequiredAcks; } ,public String getRequestRequiredAcks(){   return requestRequiredAcks; } 
Integer requestRequiredAcks,String requestRequiredAcks
public Integer getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } ,public String getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
Integer requestRequiredAcks,String requestRequiredAcks
Mockito.any(),Mockito.any(ProducerRecord.class)
Mockito.any(),Mockito.any(ProducerRecord.class)
17,1
17,1
1,0
1,0
1,0
1,0
component.setMaxThreads(11),component.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
websocketComponent.setMaxThreads(11),websocketComponent.setMaxThreads(20)
new NotifyBuilder(context).whenDone(4),new NotifyBuilder(context).whenDone(2)
@UriPath,@UriParam
@UriPath,@UriParam
"@UriPath(label=""producer"",defaultValue=""true"")","@UriParam(label=""producer"",defaultValue=""true"")"
"@UriPath(label=""producer"",defaultValue=""true"")","@UriParam(label=""producer"",defaultValue=""true"")"
"@UriPath(label=""producer"",defaultValue=""true"")","@UriParam(label=""producer"",defaultValue=""true"")"
"dir.isDirectory() && !""target"".equals(dir.getName())","dir.isDirectory() && !""target"".equals(dir.getName()) && !dir.getName().startsWith(""."")"
before != after,before == after
0,2
1,0
1,0
0,1
1,0
1,0
configure(COMPONENT),"configure(COMPONENT,""cxf-jaxb"")"
"IntrospectionSupport.getProperties(configuration,params,null)","IntrospectionSupport.getProperties(configuration,params,null,false)"
0,1
0,1
0,1
0,1
0,1
request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM),"request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM,true)"
1,0
1,17
18,26
1,0
return false; ,return true; 
1,0
1,0
Thread.sleep(1000),Thread.sleep(2000)
"delegate.tokenize(token,regex)","delegate.tokenize(token,regex,group)"
"exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)","exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)"
"exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)","exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)"
"ProxyHelper.createProxy(endpoint,ISay.class)","ProxyHelper.createProxy(endpoint,false,ISay.class)"
"AdviceWithTasks.removeByToString(route,toString,selectLast,selectFirst,selectFrom,selectTo,maxDeep)","AdviceWithTasks.removeByToString(route,toString,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"
"AdviceWithTasks.beforeByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)","AdviceWithTasks.beforeByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"
"AdviceWithTasks.afterByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)","AdviceWithTasks.afterByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"
"AdviceWithTasks.removeByType(route,type,selectFirst,selectFirst,selectFrom,selectTo,maxDeep)","AdviceWithTasks.removeByType(route,type,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"
new ZipAggregationStrategy(true),"new ZipAggregationStrategy(true,true)"
Exception e,Throwable e
Exception e,Throwable e
Exception e,Throwable e
1,17
100 * 1000,10 * 1000
"from(""direct:b"").delay(3000)","from(""direct:b"").delay(4000)"
9,1
9,1
getEndpoint().getConfig().getIndexName(),getEndpoint().getConfig().getIndexType()
getEndpoint().getConfig().getIndexName(),getEndpoint().getConfig().getIndexType()
"exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + currentToken)","exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + currentToken)"
"exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + currentToken)","exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + currentToken)"
"exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + accessToken)","exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + accessToken)"
"exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + accessToken)","exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,""OAuth "" + accessToken)"
EndpointOption that=(EndpointOption)o; ,ComponentOption that=(ComponentOption)o; 
resultEndpoint.expectedMessageCount(2),resultEndpoint.expectedMinimumMessageCount(2)
resultEndpoint.expectedMessageCount(2),resultEndpoint.expectedMinimumMessageCount(2)
System.currentTimeMillis() - start + 200,System.currentTimeMillis() - start + 750
oldestInflightEntry != null,oldestInflightEntry == null
new InputStreamReader(in),"new InputStreamReader(in,""UTF-8"")"
new InputStreamReader(in),"new InputStreamReader(in,""UTF-8"")"
"combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add(""META-INF/persistence.xml"",BlobStoreBlueprintRouteTest.class.getResource(""/META-INF/persistence.xml"")).add(""OSGI-INF/blueprint/test.xml"",BlobStoreBlueprintRouteTest.class.getResource(""blueprintCamelContext.xml"")).set(Constants.BUNDLE_SYMBOLICNAME,""CamelBlueprintJcloudsTestBundle"").set(Constants.DYNAMICIMPORT_PACKAGE,""*"").set(""Meta-Persistence"",""META-INF/persistence.xml"").build()),bundle(TinyBundles.bundle().add(""OSGI-INF/blueprint/test.xml"",BlobStoreBlueprintRouteTest.class.getResource(""blueprintBlobStoreService.xml"")).set(Constants.BUNDLE_SYMBOLICNAME,""org.apache.camel.jclouds.blobstore.service"").set(Constants.BUNDLE_VERSION,""1.0.0"").set(Constants.DYNAMICIMPORT_PACKAGE,""*"").build()).start(),loadCamelFeatures(""camel-blueprint"",""camel-jclouds""),workingDirectory(""target/paxrunner/""),felix())","combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add(""META-INF/persistence.xml"",BlobStoreBlueprintRouteTest.class.getResource(""/META-INF/persistence.xml"")).add(""OSGI-INF/blueprint/test.xml"",BlobStoreBlueprintRouteTest.class.getResource(""blueprintCamelContext.xml"")).set(Constants.BUNDLE_SYMBOLICNAME,""CamelBlueprintJcloudsTestBundle"").set(Constants.DYNAMICIMPORT_PACKAGE,""*"").set(""Meta-Persistence"",""META-INF/persistence.xml"").build()),bundle(TinyBundles.bundle().add(""OSGI-INF/blueprint/test.xml"",BlobStoreBlueprintRouteTest.class.getResource(""blueprintBlobStoreService.xml"")).set(Constants.BUNDLE_SYMBOLICNAME,""org.apache.camel.jclouds.blobstore.service"").set(Constants.BUNDLE_VERSION,""1.0.0"").set(Constants.DYNAMICIMPORT_PACKAGE,""*"").build()).start(),loadCamelFeatures(""camel-blueprint"",""camel-jclouds""),workingDirectory(""target/paxrunner/""))"
channel.close(),channel.disconnect()
channel.close(),channel.disconnect()
10,2
10,26
10,26
"new ResultSetIterator(generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())","new ResultSetIterator(conn,generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())"
"new ResultSetIterator(rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())","new ResultSetIterator(conn,rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())"
acceptor.getFilterChain(),connector.getFilterChain()
acceptor.getFilterChain(),connector.getFilterChain()
onCompletions != null,unitOfWork != null && onCompletions != null
dbCol.findOne(),dbCol.findOne(filter)
0,16
"assertEquals(6,data.size())","assertEquals(8,data.size())"
QuartzEndpoint.class,QuartzHelper.class
1,33
"headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(),entry.getValue(),camelExchange)","headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),entry.getValue(),camelExchange)"
"headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(),entry.getValue(),camelExchange)","headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),entry.getValue(),camelExchange)"
2,18
"complete.expectedBodiesReceived(""finish"",""stop"",""faulted"",""except"")","complete.expectedBodiesReceivedInAnyOrder(""finish"",""stop"",""faulted"",""except"")"
"complete.expectedBodiesReceived(""finish"",""stop"",""faulted"",""except"")","complete.expectedBodiesReceivedInAnyOrder(""finish"",""stop"",""faulted"",""except"")"
this.traceHandlers.add(traceHandler),this.traceHandlers.remove(traceHandler)
this.traceHandlers.add(traceHandler),this.traceHandlers.remove(traceHandler)
Character.toLowerCase(ch),Character.toUpperCase(ch)
Character.toLowerCase(ch),Character.toUpperCase(ch)
Character.toLowerCase(ch),Character.toUpperCase(ch)
Character.toLowerCase(ch),Character.toUpperCase(ch)
body[0][0][0],body[0][0][1]
1,0
lastUpdate.after(updated),lastUpdate.after(updated) || lastUpdate.equals(updated)
"ApiConsumerHelper.findMethod(endpoint,this,log)","ApiConsumerHelper.findMethod(endpoint,this)"
this.alphabet,this.dataCoding
10,2
i < uri.length() - 2,i <= uri.length() - 2
endpoint.getConnectionFactory(),endpoint.getOrCreateConnectionFactory()
endpoint.getConnectionFactory(),endpoint.getOrCreateConnectionFactory()
AvailablePortFinder.getNextAvailable(),AvailablePortFinder.getNextAvailable(3000)
AvailablePortFinder.getNextAvailable(),AvailablePortFinder.getNextAvailable(4000)
"mock.expectedBodiesReceived(""B+END"",""A+END"")","mock.expectedBodiesReceivedInAnyOrder(""B+END"",""A+END"")"
"mock.expectedBodiesReceived(""B+END"",""A+END"")","mock.expectedBodiesReceivedInAnyOrder(""B+END"",""A+END"")"
mock.setMinimumResultWaitTime(1900),mock.setMinimumResultWaitTime(1500)
mock.setMinimumResultWaitTime(1900),mock.setMinimumResultWaitTime(1500)
"createMessageConsumer(session,destinationName,null,false,null,true)","createMessageConsumer(session,destinationName,null,false,null)"
"createMessageConsumer(session,destinationName,messageSelector,false,null,true)","createMessageConsumer(session,destinationName,messageSelector,false,null)"
"createMessageConsumer(session,destinationName,messageSelector,true,null,true)","createMessageConsumer(session,destinationName,messageSelector,true,null)"
"createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,true)","createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,false)"
encoding=options.get(ELEMENT_NAME),elementName=options.get(ELEMENT_NAME)
elementName=options.get(ARRAY_NAME),arrayName=options.get(ARRAY_NAME)
mail.getClass().getName(),mail.getClass().getSimpleName()
mail.getClass().getName(),mail.getClass().getSimpleName()
"timeoutLatch.await(1200,TimeUnit.MILLISECONDS)","timeoutLatch.await(2500,TimeUnit.MILLISECONDS)"
"completionLatch.await(1200,TimeUnit.MILLISECONDS)","completionLatch.await(2500,TimeUnit.MILLISECONDS)"
"expression.indexOf(""${"") >= 0","""simple"".equalsIgnoreCase(language) && expression.indexOf(""${"") >= 0"
"LOG.info(""Finding all components using class resolver: {} -> {}"",new Object[]{resolver})","LOG.debug(""Finding all components using class resolver: {} -> {}"",new Object[]{resolver})"
"LOG.info(""Finding all components using class resolver: {} -> {}"",new Object[]{resolver})","LOG.debug(""Finding all components using class resolver: {} -> {}"",new Object[]{resolver})"
"LOG.info(""Finding components in url: {}"",url)","LOG.trace(""Finding components in url: {}"",url)"
"LOG.info(""Finding components in url: {}"",url)","LOG.trace(""Finding components in url: {}"",url)"
!isXop,isXop
headerRow != null,footerRow != null
headerRow != null,footerRow != null
"IntrospectionSupport.setProperties(config,componentProperties,null)","IntrospectionSupport.setProperties(config,componentProperties)"
loader.loadClass(name),"ObjectHelper.loadClass(name,loader)"
nodeId.equals(message.getToNode()),nodeId.equals(message.getToNode()) || nodeId.equals(message.getRouteId())
stopWatch.taken() < 100,stopWatch.taken() < 1000
mock.expectedMessageCount(1),mock.expectedMessageCount(3)
"new CamelExchangeException(""JettyClient failed with state "" + exchangeState,exchange)","new CamelExchangeException(""JettyClient failed with state "" + exchangeState,exchange,exchange.getException())"
consumer.endpoint.isAutoAck(),!consumer.endpoint.isAutoAck()
"HashMap<Object,AggregationStrategy>","ConcurrentHashMap<Object,AggregationStrategy>"
"HashMap<Object,AggregationStrategy>","ConcurrentHashMap<Object,AggregationStrategy>"
size=500,size=10
hotDrinkDelay=500,hotDrinkDelay=300
simple.getFromSentDate(),simple.getToSentDate()
simple.getFromSentDate(),simple.getToSentDate()
simple.getFromSentDate(),simple.getFromReceivedDate()
simple.getFromSentDate(),simple.getFromReceivedDate()
simple.getFromSentDate(),simple.getToReceivedDate()
simple.getFromSentDate(),simple.getToReceivedDate()
timeout=3000,timeout=30000
DataFormat.PAYLOAD == message.get(DataFormat.class),DataFormat.PAYLOAD == message.get(DataFormat.class) && params[0] instanceof CxfPayload
2,18
"LOG.debug(""Created new Configuration {}"")","LOG.debug(""Created new Configuration {}"",configuration)"
25,0
1,0
1,0
(Long)123l,(Long)123L
(Long)123l,(Long)123L
Thread.sleep(500),Thread.sleep(800)
Thread.sleep(500),Thread.sleep(800)
Thread.sleep(500),Thread.sleep(800)
Thread.sleep(500),Thread.sleep(800)
Thread.sleep(500),Thread.sleep(800)
Thread.sleep(200),Thread.sleep(500)
Thread.sleep(200),Thread.sleep(500)
Thread.sleep(200),Thread.sleep(500)
Thread.sleep(200),Thread.sleep(500)
Thread.sleep(200),Thread.sleep(500)
delayer != null,inflightRepository != null
delayer != null,inflightRepository != null
"from(""jms:queue:order"").to(""bean:validateOrder"").to(""mock:validate"").threads(20).unmarshal(mySecureDataFormat).delay(1000)","from(""jms:queue:order"").to(""bean:validateOrder"").to(""mock:validate"").threads(20).unmarshal(mySecureDataFormat).delay(500)"
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
2,18
(Source)src,(Source)value
FileUtil.compactPath(path),"FileUtil.compactPath(path,'/')"
payload.getBodySources().size() == 1,payload.getBodySources() != null && payload.getBodySources().size() == 1
"future.get(30,TimeUnit.SECONDS)","future.get(120,TimeUnit.SECONDS)"
mock.expectedMinimumMessageCount(3),mock.expectedMinimumMessageCount(2)
mock2.expectedMinimumMessageCount(3),mock2.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(3),mock.expectedMinimumMessageCount(3)
mock.expectedMessageCount(3),mock.expectedMinimumMessageCount(3)
mock.expectedMessageCount(10),mock.expectedMinimumMessageCount(10)
mock.expectedMessageCount(10),mock.expectedMinimumMessageCount(10)
mock.expectedMessageCount(10),mock.expectedMinimumMessageCount(10)
mock.expectedMessageCount(10),mock.expectedMinimumMessageCount(10)
"mock.expectedFileExists(""target/failed/error/bye.txt"",""Kabom"")","mock.expectedFileExists(""target/failed/error/bye.txt"")"
Thread.sleep(3000),Thread.sleep(4000)
mock.expectedMessageCount(1),mock.expectedMinimumMessageCount(1)
mock.expectedMessageCount(1),mock.expectedMinimumMessageCount(1)
size=500,size=100
Thread.sleep(100),Thread.sleep(1000)
2,18
2,18
26,18
Thread.sleep(110),Thread.sleep(130)
"IntrospectionSupport.setProperties(jpa,options)","IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(),jpa,options)"
"IntrospectionSupport.setProperty(jpa,""timestamp"",msg.getTimestamp())","IntrospectionSupport.setProperty(exchange.getContext().getTypeConverter(),jpa,""timestamp"",msg.getTimestamp())"
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
"getMockEndpoint(""mock:test.after.1"").expectedMinimumMessageCount(10)","getMockEndpoint(""mock:test.after.1"").expectedMessageCount(10)"
"getMockEndpoint(""mock:test.after.1"").expectedMinimumMessageCount(10)","getMockEndpoint(""mock:test.after.1"").expectedMessageCount(10)"
"body.endsWith(""6"")","body.endsWith(""6"") || body.endsWith(""10"")"
file.getFileName(),file.getFileNameOnly()
file.getFileName(),file.getFileNameOnly()
file.getFileName(),file.getFileNameOnly()
file.getFileName(),file.getFileNameOnly()
Thread.sleep(2200),Thread.sleep(3000)
System.currentTimeMillis() + 5000,System.currentTimeMillis() + 10000
Thread.sleep(100),Thread.sleep(200)
Thread.sleep(100),Thread.sleep(200)
Thread.sleep(100),Thread.sleep(200)
Thread.sleep(100),Thread.sleep(200)
Thread.sleep(100),Thread.sleep(200)
mock.setResultWaitTime(3000),mock.setResultWaitTime(4000)
size=1000,size=500
getExecutorServiceManager().shutdown(errorHandlerExecutorService),getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
getExecutorServiceManager().shutdown(errorHandlerExecutorService),getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
1,33
body.getData(),body.toByteArray()
body.getData(),body.toByteArray()
bundleContext.getBundle().getEntry(uri),bundleContext.getBundle().getResource(uri)
bundleContext.getBundle().getEntry(uri),bundleContext.getBundle().getResource(uri)
(uptime - days) * 60,(uptime - days) * 24
+portNum,portNum
Thread.sleep(3000),Thread.sleep(4000)
1,33
1,33
f.getAttrs().getATime(),f.getAttrs().getMTime()
f.getAttrs().getATime(),f.getAttrs().getMTime()
"converter.convertTo(rightValue.getClass(),leftValue)","converter.tryConvertTo(rightValue.getClass(),leftValue)"
"converter.convertTo(rightValue.getClass(),leftValue)","converter.tryConvertTo(rightValue.getClass(),leftValue)"
"converter.convertTo(leftValue.getClass(),rightValue)","converter.tryConvertTo(leftValue.getClass(),rightValue)"
"converter.convertTo(leftValue.getClass(),rightValue)","converter.tryConvertTo(leftValue.getClass(),rightValue)"
sshd.stop(),sshd.stop(true)
Thread.sleep(200),Thread.sleep(300)
9,25
mock.expectedMessageCount(1),mock.expectedMinimumMessageCount(1)
mock.expectedMessageCount(1),mock.expectedMinimumMessageCount(1)
4,36
Thread.sleep(1000),Thread.sleep(1500)
"Arrays.asList(""onThreadPoolAdd"",""onContextStart"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onComponentAdd"",""onEndpointAdd"",""onComponentRemove"",""onThreadPoolAdd"",""onContextStop"")","Arrays.asList(""onThreadPoolAdd"",""onContextStart"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onServiceAdd"",""onComponentAdd"",""onEndpointAdd"",""onComponentRemove"",""onContextStop"")"
ServiceHelper.startService(jmx),ServiceHelper.startService(answer)
"mock.message(0).arrives().between(7,9)","mock.message(0).arrives().between(6,9)"
"mock.expectedBodiesReceived(""Hello World"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World"")"
"mock.expectedBodiesReceived(""Hello World"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World"")"
"mock.expectedBodiesReceived(""Hello World 2"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World 2"")"
"mock.expectedBodiesReceived(""Hello World 2"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World 2"")"
"mock.expectedBodiesReceived(""Hello World 2"",""Hello World 4"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World 2"",""Hello World 4"")"
"mock.expectedBodiesReceived(""Hello World 2"",""Hello World 4"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World 2"",""Hello World 4"")"
"mock.expectedBodiesReceived(""Hello World 3"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World 3"")"
"mock.expectedBodiesReceived(""Hello World 3"")","mock.expectedBodiesReceivedInAnyOrder(""Hello World 3"")"
size=5000,size=1000
"getMockEndpoint(""mock:start"").expectedMinimumMessageCount(4)","getMockEndpoint(""mock:start"").expectedMinimumMessageCount(5)"
"scanFeatures(getCamelKarafFeatureUrl(),""camel-core"",""camel-spring"",""camel-"" + feature)","scanFeatures(getCamelKarafFeatureUrl(),""xml-specs-api"",""camel-core"",""camel-spring"",""camel-"" + feature)"
"scanFeatures(getCamelKarafFeatureUrl(),""camel-core"",""camel-spring"",""camel-test"")","scanFeatures(getCamelKarafFeatureUrl(),""xml-specs-api"",""camel-core"",""camel-spring"",""camel-test"")"
elements.size() > i,elements != null && elements.size() > i
9,1
9,1
10,2
10,2
9,1
9,1
9,1
9,1
9,1
IOHelper.getCharsetName(exchange),"IOHelper.getCharsetName(exchange,useDefault)"
ErrorHandlerFactory builder=routeContext.getRoute().getErrorHandlerBuilder(); ,ErrorHandlerBuilder builder=(ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder(); 
return false; ,return true; 
"from(""direct:c"").delay(500)","from(""direct:c"").delay(1000)"
"from(""direct:a"").delay(500)","from(""direct:a"").delay(1000)"
node.getNodeName(),node.getLocalName()
node.getNodeName(),node.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
element.getNodeName(),element.getLocalName()
"scanFeatures(getKarafFeatureUrl(),""spring"",""spring-dm"",""jetty"")","scanFeatures(getKarafFeatureUrl(),""jetty"")"
"endpointA.expectedBodiesReceived(""A blue car!"",""A blue car, again!"")","endpointA.expectedBodiesReceivedInAnyOrder(""A blue car!"",""A blue car, again!"")"
"endpointA.expectedBodiesReceived(""A blue car!"",""A blue car, again!"")","endpointA.expectedBodiesReceivedInAnyOrder(""A blue car!"",""A blue car, again!"")"
"getMockEndpoint(""mock:line"").expectedMinimumMessageCount(1)","getMockEndpoint(""mock:line"").expectedMinimumMessageCount(0)"
1,33
1,33
Thread.sleep(100),Thread.sleep(200)
start.expectedMessageCount(6),start.expectedMessageCount(7)
start.expectedMessageCount(6),start.expectedMessageCount(7)
start.expectedMessageCount(6),start.expectedMessageCount(7)
"cache.put(new Element(key,element),true)","cache.put(new Element(key,element))"
"cache.put(new Element(key,element),true)","cache.put(new Element(key,element))"
"cache.remove(key,true)",cache.remove(key)
"new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))","new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))"
"new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)","new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"
"new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)","new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"
"new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_8_BIT)","new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_8_BIT)"
"CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime)","CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize)"
10,26
4,36
4,36
18,26
2,18
2,18
"from(""direct:b"").delay(500)","from(""direct:b"").delay(1000)"
"assertEquals(6,set.size())","assertEquals(5,set.size())"
delta < 5000,delta < 7000
146,154
mock.expectedMessageCount(1),mock.expectedMinimumMessageCount(1)
mock.expectedMessageCount(1),mock.expectedMinimumMessageCount(1)
"from(""jms:queue:order"").to(""bean:validateOrder"").to(""mock:validate"").threads(20).unmarshal(mySecureDataFormat).delay(500)","from(""jms:queue:order"").to(""bean:validateOrder"").to(""mock:validate"").threads(20).unmarshal(mySecureDataFormat).delay(1000)"
1,33
redeliveryDelay > maximumRedeliveryDelay,redeliveryDelayResult > maximumRedeliveryDelay
redeliveryDelay > maximumRedeliveryDelay,redeliveryDelayResult > maximumRedeliveryDelay
"mock.expectedBodiesReceived(""c"",""b"",""a"")","mock.expectedBodiesReceivedInAnyOrder(""c"",""b"",""a"")"
"mock.expectedBodiesReceived(""c"",""b"",""a"")","mock.expectedBodiesReceivedInAnyOrder(""c"",""b"",""a"")"
"from(""jms:queue:order"").to(""bean:validateOrder"").to(""mock:validate"").threads(20).unmarshal(mySecureDataFormat).delay(100)","from(""jms:queue:order"").to(""bean:validateOrder"").to(""mock:validate"").threads(20).unmarshal(mySecureDataFormat).delay(500)"
"from(""direct:a"").delay(3000)","from(""direct:a"").delay(2000)"
timeout=2000,timeout=1000
"assertEquals(2000,timeout)","assertEquals(1000,timeout)"
"from(""direct:start"").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)","from(""direct:start"").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)"
"from(""direct:start"").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(2000)","from(""direct:start"").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(1000)"
"from(""direct:a"").delay(3000)","from(""direct:a"").delay(2000)"
"assertEquals(2000,timeout)","assertEquals(1000,timeout)"
"from(""direct:start"").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)","from(""direct:start"").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)"
"from(""direct:start"").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)","from(""direct:start"").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)"
"from(""direct:start"").recipientList(header(""slip"")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)","from(""direct:start"").recipientList(header(""slip"")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)"
"from(""direct:a"").delay(3000)","from(""direct:a"").delay(5000)"
Thread.sleep(1000),Thread.sleep(2000)
i < 1000,i < 10000
defaultCamelContext.removeRouteDefinition(id),defaultCamelContext.removeRoute(id)
defaultCamelContext.removeRouteDefinition(id),defaultCamelContext.removeRoute(id)
33,1
"request.getContentType().equals(""application/x-www-form-urlencoded"")","request.getContentType().startsWith(""application/x-www-form-urlencoded"")"
"request.getContentType().equals(""application/x-www-form-urlencoded"")","request.getContentType().startsWith(""application/x-www-form-urlencoded"")"
"request.getContentType().equals(""application/x-www-form-urlencoded"")","request.getContentType().startsWith(""application/x-www-form-urlencoded"")"
"request.getContentType().equals(""application/x-www-form-urlencoded"")","request.getContentType().startsWith(""application/x-www-form-urlencoded"")"
"repo.setRecoveryInterval(500,TimeUnit.MILLISECONDS)","repo.setRecoveryInterval(1000,TimeUnit.MILLISECONDS)"
assertMockEndpointsSatisfied(),"assertMockEndpointsSatisfied(30,TimeUnit.SECONDS)"
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
mock.expectedMessageCount(2),mock.expectedMinimumMessageCount(2)
numMessages=1000,numMessages=200
idGenerator.generateId(),idGenerator.generateUuid()
idGenerator.generateId(),idGenerator.generateUuid()
customerResourceLocator(url),customResourceLocator(url)
customerResourceLocator(url),customResourceLocator(url)
bar.expectedMinimumMessageCount(1),bar.expectedMinimumMessageCount(2)
"result.expectedBodiesReceived(""A+C+E+G+I"",""B+D+F+H+J"")","result.expectedBodiesReceivedInAnyOrder(""A+C+E+G+I"",""B+D+F+H+J"")"
"result.expectedBodiesReceived(""A+C+E+G+I"",""B+D+F+H+J"")","result.expectedBodiesReceivedInAnyOrder(""A+C+E+G+I"",""B+D+F+H+J"")"
"result.expectedBodiesReceived(""A+C+E+G+I"",""B+D+F+H+J"")","result.expectedBodiesReceivedInAnyOrder(""A+C+E+G+I"",""B+D+F+H+J"")"
"result.expectedBodiesReceived(""A+C+E+G+I"",""B+D+F+H+J"")","result.expectedBodiesReceivedInAnyOrder(""A+C+E+G+I"",""B+D+F+H+J"")"
ran.nextInt(500),ran.nextInt(250)
ran.nextInt(500),ran.nextInt(250)
ran.nextInt(500),ran.nextInt(250)
ran.nextInt(500),ran.nextInt(250)
taken > 190,taken > 150
taken > 190,taken > 150
taken > 190,taken > 150
taken > 90,taken > 50
"new NagiosNscaStub(25667,""secret"")","new NagiosNscaStub(25668,""secret"")"
config.setPort(25667),config.setPort(25668)
"new NagiosNscaStub(25667,""password"")","new NagiosNscaStub(25669,""password"")"
notifier.getConfiguration().setPort(25667),notifier.getConfiguration().setPort(25669)
9,9
getRedeliverDelay(),getRedeliveryDelay()
getRedeliverDelay(),getRedeliveryDelay()
port > 21000,port >= 21000
12,28
12,28
getHttpConnectionManager(),getClientConnectionManager()
getHttpConnectionManager(),getClientConnectionManager()
"assertEquals(10,events.size())","assertEquals(12,events.size())"
"assertEquals(10,events.size())","assertEquals(11,events.size())"
"""Deleting existing file: "" + tempTarget","""Deleting existing file: "" + target"
"""Deleting existing file: "" + tempTarget","""Deleting existing file: "" + target"
context.setDelayer(2000),context.setDelayer(2000L)
"Boolean.getBoolean(""java.awt.headless"")","Boolean.getBoolean(""java.awt.headless"") || System.getProperty(""os.name"").startsWith(""Mac OS"") && System.getProperty(""user.name"").equals(""cruise"")"
"Boolean.getBoolean(""java.awt.headless"")","Boolean.getBoolean(""java.awt.headless"") || System.getProperty(""os.name"").startsWith(""Mac OS"") && System.getProperty(""user.name"").equals(""cruise"")"
"Boolean.getBoolean(""java.awt.headless"")","Boolean.getBoolean(""java.awt.headless"") || System.getProperty(""os.name"").startsWith(""Mac OS"") && System.getProperty(""user.name"").equals(""cruise"")"
@Converter,@Deprecated
@Converter,@Deprecated
@Converter,@Deprecated
@Converter,@Deprecated
"setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get(""timeToIdleSeconds"")).longValue())","setTimeToIdleSeconds(Long.valueOf((String)cacheSettings.get(""timeToIdleSeconds"")).longValue())"
"setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get(""timeToIdleSeconds"")).longValue())","setTimeToIdleSeconds(Long.valueOf((String)cacheSettings.get(""timeToIdleSeconds"")).longValue())"
"setEternal(Boolean.valueOf((String)cacheSettings.get(""diskPersistent"")))","setDiskPersistent(Boolean.valueOf((String)cacheSettings.get(""diskPersistent"")))"
"setEternal(Boolean.valueOf((String)cacheSettings.get(""diskPersistent"")))","setDiskPersistent(Boolean.valueOf((String)cacheSettings.get(""diskPersistent"")))"
"setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue())","setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue())"
"setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue())","setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue())"
2,18
2,18
2,18
"getMockEndpoint(""mock:event"").expectedMessageCount(5)","getMockEndpoint(""mock:event"").expectedMessageCount(6)"
"getMockEndpoint(""mock:event"").expectedMessageCount(5)","getMockEndpoint(""mock:event"").expectedMessageCount(6)"
bar.setResultWaitTime(1000),bar.setResultWaitTime(3500)
bar.setResultWaitTime(3000),bar.setResultWaitTime(1000)
"from(""seda:foo"").startupOrder(1).delay(1000)","from(""seda:foo"").startupOrder(1).delay(500)"
endpoint.getBus().getInInterceptors().size() == 1,endpoint.getBus().getInInterceptors().size() >= 1
result.expectedMessageCount(1),result.expectedMinimumMessageCount(1)
result.expectedMessageCount(1),result.expectedMinimumMessageCount(1)
Thread.sleep(200),Thread.sleep(2000)
IOConverter.toString(out),"IOConverter.toString(out,null)"
Thread.sleep(200),Thread.sleep(2000)
IOConverter.toString(out),"IOConverter.toString(out,null)"
delta < 9000,delta < 11000
Thread.sleep(1000),Thread.sleep(2000)
Thread.sleep(1000),Thread.sleep(2000)
ProcessorDefinition<ProcessorDefinition>,ProcessorDefinition<ExpressionNode>
"log.debug(message,exception)","log.info(message,exception)"
"log.debug(message,exception)","log.info(message,exception)"
mock.message(0).outBody(String.class),mock.message(0).body(String.class)
mock.message(0).outBody(String.class),mock.message(0).body(String.class)
Thread.sleep(200),Thread.sleep(500)
"public static XQueryBuilder xquery(File file,String characterSet) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),characterSet); } ","public static XQueryBuilder xquery(File file,String characterSet) throws IOException {   return xquery(IOConverter.toInputStream(file),characterSet); } "
"public static XQueryBuilder xquery(File file) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } ","public static XQueryBuilder xquery(File file) throws IOException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } "
size=500,size=250
mock.expectedMessageCount(0),mock.expectedMessageCount(1)
mock.expectedMessageCount(0),mock.expectedMessageCount(1)
mock.expectedMessageCount(0),mock.expectedMessageCount(1)
"getMockEndpoint(""mock:"" + i).expectedMessageCount(1000)","getMockEndpoint(""mock:"" + i).expectedMessageCount(200)"
i < 1000,i < 200
"getMockEndpoint(""mock:"" + i).expectedMessageCount(1000)","getMockEndpoint(""mock:"" + i).expectedMessageCount(200)"
i < 1000,i < 200
"new DefaultRouteContext(route,null,list)","new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(),route,null,list)"
size=50000,size=500
size=10000,size=500
Thread.sleep(2000),Thread.sleep(3000)
Thread.sleep(2000),Thread.sleep(3000)
error.expectedMessageCount(2),error.expectedMinimumMessageCount(2)
error.expectedMessageCount(2),error.expectedMinimumMessageCount(2)
error.expectedMessageCount(1),error.expectedMinimumMessageCount(1)
error.expectedMessageCount(1),error.expectedMinimumMessageCount(1)
9,9
9,9
9,9
9,9
9,9
9,9
9,9
9,9
"assertEquals(""There should be no files"",files.length,0)","assertEquals(""There should be no files"",0,files.length)"
"assertEquals(""There should be no files"",files.length,0)","assertEquals(""There should be no files"",0,files.length)"
OptionalIdentifiedType<FromDefinition>,OptionalIdentifiedDefinition<FromDefinition>
OptionalIdentifiedType<Type>,OptionalIdentifiedDefinition<Type>
OptionalIdentifiedType<RoutesDefinition>,OptionalIdentifiedDefinition<RoutesDefinition>
context.setDelayer(1000),context.setDelayer(2000)
"from(""seda:a"").delayer(500)","from(""seda:a"").delayer(1000)"
out != null,out != null && out.getJmsMessage() != null
mock.expectedMessageCount(3),mock.expectedMinimumMessageCount(3)
mock.expectedMessageCount(3),mock.expectedMinimumMessageCount(3)
1,-1
total=10000,total=2000
resultEndpoint.setMinimumResultWaitTime(1000),resultEndpoint.setMinimumResultWaitTime(900)
Newer,Never
"to(""bar"")","sendTo(""bar"")"
"to(""bar"")","sendTo(""bar"")"
"to(""direct:foo"")","sendTo(""direct:foo"")"
"to(""direct:foo"")","sendTo(""direct:foo"")"
"resultEndpoint.expectedBodiesReceived(""one"",""two"",""three"")","resultEndpoint.expectedBodiesReceivedInAnyOrder(""one"",""two"",""three"")"
"resultEndpoint.expectedBodiesReceived(""one"",""two"",""three"")","resultEndpoint.expectedBodiesReceivedInAnyOrder(""one"",""two"",""three"")"
"resultEndpoint.expectedBodiesReceived(""one"",""three"")","resultEndpoint.expectedBodiesReceivedInAnyOrder(""one"",""three"")"
"resultEndpoint.expectedBodiesReceived(""one"",""three"")","resultEndpoint.expectedBodiesReceivedInAnyOrder(""one"",""three"")"
"from(""direct:start"").transform(body().append("" World"")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to(""mock:foo"").delay(500)","from(""direct:start"").transform(body().append("" World"")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to(""mock:foo"").delay(1000)"
"assertEquals(70011,exchange.getIn().getBody().toString().length())","assertEquals(70008,exchange.getIn().getBody().toString().length())"
"from(""timer://foo?fixedRate=true&delay=0&period=500"").to(""bean:myBean"")","from(""timer://foo?fixedRate=true&delay=0&period=500"").to(""bean:myBean"",""mock:result"")"
isStarted(),isStarted() || isStarting()
"from(""direct:tap"").delay(100)","from(""direct:tap"").delay(1000)"
Object getBean() throws Exception ; ,Object getBean() throws NoBeanAvailableException ; 
"public Object getBean() throws Exception {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } ","public Object getBean() throws NoBeanAvailableException {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } "
4,4
type.createDataFormat(routeContext),type.getDataFormat(routeContext)
type.createDataFormat(routeContext),type.getDataFormat(routeContext)
resultEndpoint.setResultWaitTime(1000),resultEndpoint.setResultWaitTime(5000)
Thread.sleep(100),Thread.sleep(500)
1,17
connector.setPort(8080),connector.setPort(9080)
IOConverter.toInputStream(s),"IOConverter.toInputStream(s,null)"
IOConverter.toInputStream(s),"IOConverter.toInputStream(s,null)"
routeList == null,routeList == null || routeList.isEmpty()
routeList == null,routeList == null || routeList.isEmpty()
CxfEndpointBean.class,CxfSpringEndpointBean.class
"from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)","from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)"
"from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)","from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)"
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true),from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true),from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
"from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)","from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)"
"from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)","from(""jms:queue2:parallelLoanRequestQueue"").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)"
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true),from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true),from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
new ExchangePatternType(exchangePattern),new SetExchangePatternType(exchangePattern)
getCompletePredicate(),getHandledPredicate()
getCompletePredicate(),getHandledPredicate()
agg.setBatchTimeout(1000L),agg.setBatchTimeout(2000L)
"from(""direct:start"").aggregator().header(""id"").batchTimeout(2000L)","from(""direct:start"").aggregator().header(""id"").batchTimeout(500L)"
result.expectedMessageCount(3),result.expectedMinimumMessageCount(3)
result.expectedMessageCount(3),result.expectedMinimumMessageCount(3)
"from(""direct:start"").aggregator().header(""id"").batchTimeout(2000L)","from(""direct:start"").aggregator().header(""id"").batchTimeout(500L)"
result.expectedMessageCount(2),result.expectedMinimumMessageCount(2)
result.expectedMessageCount(2),result.expectedMinimumMessageCount(2)
result.expectedMessageCount(3),result.expectedMinimumMessageCount(3)
result.expectedMessageCount(3),result.expectedMinimumMessageCount(3)
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
assertMockEndpointsSatisifed(),assertMockEndpointsSatisfied()
"buffer.append(KEY_NODE_ID + ""="").append(id)","buffer.append(KEY_NODE_ID + ""="").append(nodeId)"
createConfig(),getConfig()
createConfig(),getConfig()
ObjectConverter.toBoolean(scriptValue),ObjectConverter.toBool(scriptValue)
ObjectConverter.toBoolean(scriptValue),ObjectConverter.toBool(scriptValue)
mock.expectedMessageCount(4),mock.expectedMessageCount(2)
PORT=6335,PORT=6336
"new InetSocketAddress(""localhost"",8888)","new InetSocketAddress(""localhost"",6333)"
setExpectedMessageCount(messageCount),setExpectedMessageCount(expected)
Thread.sleep(20000),Thread.sleep(2000)
"createNextExchange(processor,exchange)","createNextExchange(processor,nextExchange)"
isIgnoreUriScheme(),!isIgnoreUriScheme()
"compare(leftValue,rightValue) < 0","compare(leftValue,rightValue) >= 0"
callback.done(true),callback.done(false)
endpoint.expectedMessageCount(1),endpoint.expectedMinimumMessageCount(1)
endpoint.expectedMessageCount(1),endpoint.expectedMinimumMessageCount(1)
callback.done(true),callback.done(false)
resultEndpoint.assertIsSatisfied(5000),resultEndpoint.assertIsSatisfied(10000)
4,4
"LOG.info(""Set the current default database as [{}] in the current default catalog [{}]."",currentCatalogName,currentDatabaseName)","LOG.info(""Set the current default database as [{}] in the current default catalog [{}]."",currentDatabaseName,currentCatalogName)"
"LOG.warn(""Requesting paths for query services failed."",throwable)","LOG.debug(""Requesting paths for query services failed."",throwable)"
"LOG.warn(""Requesting paths for query services failed."",throwable)","LOG.debug(""Requesting paths for query services failed."",throwable)"
"LOG.warn(""Requesting TaskManager's path for query services failed."",throwable)","LOG.debug(""Requesting TaskManager's path for query services failed."",throwable)"
"LOG.warn(""Requesting TaskManager's path for query services failed."",throwable)","LOG.debug(""Requesting TaskManager's path for query services failed."",throwable)"
"LOG.warn(""Exception while fetching metrics."",e)","LOG.debug(""Exception while fetching metrics."",e)"
"LOG.warn(""Exception while fetching metrics."",e)","LOG.debug(""Exception while fetching metrics."",e)"
"OperandTypes.or(OperandTypes.NILADIC,OperandTypes.family(SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.STRING,SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.TIMESTAMP))","OperandTypes.or(OperandTypes.NILADIC,OperandTypes.family(SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.STRING,SqlTypeFamily.STRING))"
/**   * <code>CONCAT_AGG</code> aggregate function.  */ public static final SqlConcatAggFunction CONCAT_AGG=new SqlConcatAggFunction(); ,/**   * <code>CONCAT_AGG</code> aggregate function.  */ public static final SqlListAggFunction LISTAGG=new SqlListAggFunction(); 
1,0
"julianDateFloor(range,(int)date + EPOCH_JULIAN,true)","julianDateFloor(range,(int)date + EPOCH_JULIAN,false)"
2,18
2,18
2,18
"ExceptionUtils.firstOrSuppressed(collectedExceptions,e)","ExceptionUtils.firstOrSuppressed(e,collectedExceptions)"
"new ResourceProfile(Double.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,managedMemoryPerSlot,Collections.emptyMap())","new ResourceProfile(Double.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,managedMemoryPerSlotMB,Collections.emptyMap())"
18,26
argumentCount.isValidCount(actualCount),!argumentCount.isValidCount(actualCount)
currentTime.get() / 1_000L,currentTime.get() / 1_000_000L
currentTime.get() / 1_000L,currentTime.get() / 1_000_000L
"new TableException(String.format(""Unable to generate a string representation of the serializer snapshot of '%s' "" + ""describing the class '%s' for the ANY type."",serializer.getClass().getName(),clazz.toString()))","new TableException(String.format(""Unable to generate a string representation of the serializer snapshot of '%s' "" + ""describing the class '%s' for the ANY type."",serializer.getClass().getName(),clazz.toString()),e)"
DataTypes.TIME(9),DataTypes.TIME(3)
checkArgument(keyGroupRange.contains(keyGroup)),"checkArgument(keyGroupRange.contains(keyGroup),""%s does not contain key group %s"",keyGroupRange,keyGroup)"
"new FlinkRuntimeException(""Unexpected list element deserialization failure"")","new FlinkRuntimeException(""Unexpected list element deserialization failure"",e)"
visitor.visit(this),visitor.visitTypeLiteral(this)
visitor.visit(this),visitor.visitTypeLiteral(this)
"(new Path(testBucket.getParent(),"".test.inprogress"")).toString()","(new Path(testBucket.getParent(),"".test.inprogress"")).getPath()"
"(new Path(testBucket.getParent(),"".test.inprogress"")).toString()","(new Path(testBucket.getParent(),"".test.inprogress"")).getPath()"
"new Path(bucketPath,""part-"" + i + '-'+ j).toString()","new Path(bucketPath,""part-"" + i + '-'+ j).getPath()"
"new Path(bucketPath,""part-"" + i + '-'+ j).toString()","new Path(bucketPath,""part-"" + i + '-'+ j).getPath()"
"new Path(testBucket.getParent(),"".test-2.inprogress"").toString()","new Path(testBucket.getParent(),"".test-2.inprogress"").getPath()"
"new Path(testBucket.getParent(),"".test-2.inprogress"").toString()","new Path(testBucket.getParent(),"".test-2.inprogress"").getPath()"
"new Path(bucketPath,""test-"" + i + '-'+ j).toString()","new Path(bucketPath,""test-"" + i + '-'+ j).getPath()"
"new Path(bucketPath,""test-"" + i + '-'+ j).toString()","new Path(bucketPath,""test-"" + i + '-'+ j).getPath()"
i / 2,i % 2
28,25
"Math.min(RETRY_INTERVAL,timeout.timeLeft().toMillis())","Math.min(retryIntervalMillis,timeout.timeLeft().toMillis())"
9,10
i < maxIndex,i <= maxIndex
i < maxIndex,i <= maxIndex
"Tuple2.of(timeoutPattern2,13L)","Tuple2.of(timeoutPattern2,12L)"
"Tuple2.of(timeoutPattern4,13L)","Tuple2.of(timeoutPattern4,12L)"
"new ValidationException(""Unable to deserialize string '"" + base64String + ""' of base class '""+ baseClass.getName()+ ""'."")","new ValidationException(""Unable to deserialize string '"" + base64String + ""' of base class '""+ baseClass.getName()+ ""'."",e)"
new StreamTaskException(exceptionMessage),"new StreamTaskException(exceptionMessage,e)"
10,9
"Class.forName(serializerConfigClassname,true,userCodeClassLoader)","Class.forName(serializerConfigClassname,false,userCodeClassLoader)"
"Preconditions.checkNotNull(""Streaming Job name should not be null."")","Preconditions.checkNotNull(jobName,""Streaming Job name should not be null."")"
heartbeatTimeoutIntervalMs >= 0L,heartbeatTimeoutIntervalMs > 0L
"bucketerContext.update(context.timestamp(),currentProcessingTime,context.currentWatermark())","bucketerContext.update(context.timestamp(),context.currentWatermark(),currentProcessingTime)"
"serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))","MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))"
"serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))","MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))"
"log.debug(""Failed to transfer file from TaskExecutor {}."",taskManagerId,throwable)","log.error(""Failed to transfer file from TaskExecutor {}."",taskManagerId,throwable)"
"log.debug(""Failed to transfer file from TaskExecutor {}."",taskManagerId,throwable)","log.error(""Failed to transfer file from TaskExecutor {}."",taskManagerId,throwable)"
"new RuntimeException(""Could not create TypeInformation for type "" + data[0].getClass().getName() + ""; please specify the TypeInformation manually via ""+ ""ExecutionEnvironment#fromElements(Collection, TypeInformation)"")","new RuntimeException(""Could not create TypeInformation for type "" + data[0].getClass().getName() + ""; please specify the TypeInformation manually via ""+ ""ExecutionEnvironment#fromElements(Collection, TypeInformation)"",e)"
"new RuntimeException(""Could not create TypeInformation for type "" + type.getName() + ""; please specify the TypeInformation manually via ""+ ""ExecutionEnvironment#fromElements(Collection, TypeInformation)"")","new RuntimeException(""Could not create TypeInformation for type "" + type.getName() + ""; please specify the TypeInformation manually via ""+ ""ExecutionEnvironment#fromElements(Collection, TypeInformation)"",e)"
"new RuntimeException(""Could not create TypeInformation for type "" + data[0].getClass().getName() + ""; please specify the TypeInformation manually via ""+ ""StreamExecutionEnvironment#fromElements(Collection, TypeInformation)"")","new RuntimeException(""Could not create TypeInformation for type "" + data[0].getClass().getName() + ""; please specify the TypeInformation manually via ""+ ""StreamExecutionEnvironment#fromElements(Collection, TypeInformation)"",e)"
"new RuntimeException(""Could not create TypeInformation for type "" + type.getName() + ""; please specify the TypeInformation manually via ""+ ""StreamExecutionEnvironment#fromElements(Collection, TypeInformation)"")","new RuntimeException(""Could not create TypeInformation for type "" + type.getName() + ""; please specify the TypeInformation manually via ""+ ""StreamExecutionEnvironment#fromElements(Collection, TypeInformation)"",e)"
"new RuntimeException(""Could not create TypeInformation for type "" + first.getClass() + ""; please specify the TypeInformation manually via ""+ ""StreamExecutionEnvironment#fromElements(Collection, TypeInformation)"")","new RuntimeException(""Could not create TypeInformation for type "" + first.getClass() + ""; please specify the TypeInformation manually via ""+ ""StreamExecutionEnvironment#fromElements(Collection, TypeInformation)"",e)"
"LOG.debug(""Retrieving location for state={} of job={} from the cache."",jobId,queryableStateName)","LOG.debug(""Retrieving location for state={} of job={} from the cache."",queryableStateName,jobId)"
"LOG.debug(""Retrieving location for state={} of job={} from the key-value state location oracle."",jobId,queryableStateName)","LOG.debug(""Retrieving location for state={} of job={} from the key-value state location oracle."",queryableStateName,jobId)"
1,1
1,1
1,1
1,1
1,1
nioGroup.shutdownGracefully(),"nioGroup.shutdownGracefully(0,10,TimeUnit.SECONDS)"
NIO_GROUP.shutdownGracefully(),"NIO_GROUP.shutdownGracefully(0,10,TimeUnit.SECONDS)"
group.shutdownGracefully(),"group.shutdownGracefully(0,10,TimeUnit.SECONDS)"
1,0
"LOG.debug(""Consumer subtask {} is trying to discover new partitions ..."")","LOG.debug(""Consumer subtask {} is trying to discover new partitions ..."",getRuntimeContext().getIndexOfThisSubtask())"
Boolean success,Void value
CompletableFuture<Boolean>,CompletableFuture<Void>
Boolean ignored,Void ignored
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
CompletableFuture<Boolean>,CompletableFuture<Void>
in.read(serCondition),in.readFully(serCondition)
in.read(serCondition),in.readFully(serCondition)
1024,1025
FlinkKafkaProducerBase.class,FlinkKafkaProducer011.class
"LOG.error(""Async Kafka commit failed."",cause)","LOG.warn(""Async Kafka commit failed."",cause)"
"LOG.error(""Async Kafka commit failed."",cause)","LOG.warn(""Async Kafka commit failed."",cause)"
"new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)","new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])"
"new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)","new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])"
"new MockEnvironment(""MockTask"",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,numSubtasks,subtaskIndex)","new MockEnvironment(""MockTask"",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,parallelism,subtaskIndex)"
stackTrace.length < depth,stackTrace.length <= depth
msgType <= values.length,msgType < values.length
10,9
10,9
10,9
10,9
10,9
"checkNotNull(jobName,""The data sink must not be null."")","checkNotNull(sink,""The data sink must not be null."")"
Thread.sleep(500),Thread.sleep(500L)
ASYNC_CONSUMER_THREAD.getStackTrace(),ASYNC_PRODUCER_THREAD.getStackTrace()
ASYNC_CONSUMER_THREAD.getStackTrace(),ASYNC_PRODUCER_THREAD.getStackTrace()
Thread.sleep(500),Thread.sleep(500L)
sr0.getValue().f1,sr0.getValue().f2
sr0.getValue().f1,sr0.getValue().f2
"LOG.error(""Failed to shut down ActorSystem"")","LOG.error(""Failed to shut down ActorSystem"",t)"
state.isGloballyTerminalState(),state.isTerminalState()
state.isGloballyTerminalState(),state.isTerminalState()
cacheDirectory.exists(),cacheDirectory.mkdirs()
cacheDirectory.exists(),cacheDirectory.mkdirs()
JoinFunction.class,FlatJoinFunction.class
"assertNotNull(savepointPath,""Failed to trigger savepoint"")","assertNotNull(""Failed to trigger savepoint"",savepointPath)"
executionJobVertex.getParallelism(),executionJobVertex.getMaxParallelism()
executionJobVertex.getParallelism(),executionJobVertex.getMaxParallelism()
typesArray.length == row.productArity(),typesArray.length != row.productArity()
"""Segment initialized with too large address: "" + address + "" ; Max allowed address is ""+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)","""Segment initialized with too large address: "" + offHeapAddress + "" ; Max allowed address is ""+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)"
"""Segment initialized with too large address: "" + address + "" ; Max allowed address is ""+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)","""Segment initialized with too large address: "" + offHeapAddress + "" ; Max allowed address is ""+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)"
"dis.read(serializedData,0,length)","dis.readFully(serializedData,0,length)"
"dis.read(serializedData,0,length)","dis.readFully(serializedData,0,length)"
"dis.read(serializedData,0,length)","dis.readFully(serializedData,0,length)"
"dis.read(serializedData,0,length)","dis.readFully(serializedData,0,length)"
1 << 20,1 << 15
"RestartStrategies.fixedDelayRestart(3,0)","RestartStrategies.fixedDelayRestart(1,0)"
"RestartStrategies.fixedDelayRestart(3,0)","RestartStrategies.fixedDelayRestart(1,0)"
"RestartStrategies.fixedDelayRestart(3,0)","RestartStrategies.fixedDelayRestart(1,0)"
incomingDir.exists(),incomingDir.mkdirs()
incomingDir.exists(),incomingDir.mkdirs()
1024 * 1024 * 14,1024 * 1024 * 15
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class)),Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class)),Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
"params.getInt(""numPages"")","params.getInt(""numPages"",PageRankData.getNumberOfPages())"
"parser.parse(INFO_OPTIONS,args,false)","parser.parse(INFO_OPTIONS,args,true)"
"synchronized (this) {   if (transformed != null) {     if (transformed instanceof List) {       @SuppressWarnings(""unchecked"") List<T> casted=(List<T>)transformed;       return casted;     }  else {       throw new InitializationTypeConflictException(transformed.getClass());     }   }  else {     return data;   } } ","synchronized (references) {   if (transformed != null) {     if (transformed instanceof List) {       @SuppressWarnings(""unchecked"") List<T> casted=(List<T>)transformed;       return casted;     }  else {       throw new InitializationTypeConflictException(transformed.getClass());     }   }  else {     return data;   } } "
synchronized (this) {   if (transformed == null) {     transformed=initializer.initializeBroadcastVariable(data);     data=null;   }   return transformed; } ,synchronized (references) {   if (transformed == null) {     transformed=initializer.initializeBroadcastVariable(data);     data=null;   }   return transformed; } 
config.getServerNumThreads(),config.getClientNumThreads()
config.getServerNumThreads(),config.getClientNumThreads()
4,68
5 * 1000,10 * 1000
5 * 1000,10 * 1000
9,0
1,0
1,0
"new DefaultMemoryManager(totalMemory,numSlots,pageSize)","new DefaultMemoryManager(totalMemory,numSlots,pageSize,true)"
getStreamNode(iterationHead),getStreamNode(vertexID)
DEFAULT_HEAP_LIMIT_CAP=500,DEFAULT_HEAP_LIMIT_CAP=700
"Assert.assertEquals(9500,Utils.calculateHeapSize(10000))","Assert.assertEquals(9300,Utils.calculateHeapSize(10000))"
pti.getTotalFields(),pti.getArity()
pti.getTotalFields(),pti.getArity()
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=false,DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=true
(JobResponse)response,(JobResponse)result
(JobFound)response,(JobFound)result
"new ValueComparator(sortOrderAscending,type)","new CopyableValueComparator(sortOrderAscending,type)"
"new CopyableValueComparator(sortOrderAscending,type)","new ValueComparator(sortOrderAscending,type)"
"Class.forName(className.replace('/','.'))","Class.forName(className.replace('/','.'),true,Thread.currentThread().getContextClassLoader())"
(next=this.input.get(currentPosition++)) != null,currentPosition < input.size() && (next=this.input.get(currentPosition++)) != null
InetAddress.getLoopbackAddress(),InetAddress.getLocalHost()
InetAddress.getLoopbackAddress(),InetAddress.getLocalHost()
this.instanceManager != null,this.instanceManager != null && this.scheduler != null
"GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,true)","GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,false)"
fields[i] >= 0,fields[i] >= 0 && in1 != null
fields[i] >= 0,fields[i] >= 0 && in2 != null
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
DataStream<OUT>,DataStreamSink<OUT>
2,130
"new UnsupportedOperationException(""This should never happen."")","new RuntimeException(""Error while creating the data flow plan for an iteration: The iteration end was not specified correctly."")"
MAX_ARITY=22,MAX_ARITY=25
types.length >= Tuple.MAX_ARITY,types.length > Tuple.MAX_ARITY
"LOG.info(getName() + "" caught: "",e)","LOG.error(getName() + "" caught: "",e)"
"LOG.info(getName() + "" caught: "",e)","LOG.error(getName() + "" caught: "",e)"
"LOG.info(getName() + "" caught: "",e)","LOG.error(getName() + "" caught: "",e)"
"LOG.info(getName() + "" caught: "",e)","LOG.error(getName() + "" caught: "",e)"
LOG.error(e.getMessage()),"LOG.error(e.getMessage(),e)"
LOG.error(result.getDescription()),"LOG.error(result.getDescription(),t)"
LOG.error(result.getDescription()),"LOG.error(result.getDescription(),e)"
next.getField(0),next.getField(1)
LogUtils.initializeDefaultConsoleLogger(),LogUtils.initializeDefaultTestConsoleLogger()
LogUtils.initializeDefaultConsoleLogger(),LogUtils.initializeDefaultTestConsoleLogger()
"cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)","cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)"
"cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)","cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)"
(strLine=br.readLine()) != null,(strLine=br.readLine()) != null && !strLine.isEmpty()
this.vertices.containsKey(node) || this.chainedTasks.containsKey(node),this.vertices.containsKey(node) || this.chainedTasks.containsKey(node) || this.iterations.containsKey(node)
pos < len,pos < end
pos < len,pos < end
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
1,1025
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"assertEquals(expectedPlan,actualPlan)","assertPlanEquals(expectedPlan,actualPlan)"
"this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,false)","this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,true)"
"this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,false)","this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,true)"
"this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,false)","this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,true)"
"this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,false)","this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,true)"
"this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,false)","this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,true)"
"kryo.readObjectOrNull(input,JobID.class)","kryo.readObject(input,JobID.class)"
"kryo.readObjectOrNull(input,JobID.class)","kryo.readObject(input,JobID.class)"
Collection<? extends IJsonNode>,Iterable<? extends IJsonNode>
64 * 1024 * 0124,512 * 1024 * 1024
32 * 1024 * 1024,10 * 1024 * 1024
32 * 1024 * 1024,10 * 1024 * 1024
"runPartialSorter(sorter,NUM_RECORDS,28)","runPartialSorter(sorter,NUM_RECORDS,25)"
64 * 1024 * 0124,512 * 1024 * 1024
32 * 1024 * 1024,10 * 1024 * 1024
32 * 1024 * 1024,10 * 1024 * 1024
"runPartialSorter(sorter,NUM_RECORDS,28)","runPartialSorter(sorter,NUM_RECORDS,25)"
tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS || tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND,tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS && tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND
new IndexOutOfBoundsException(),"new IndexOutOfBoundsException(fieldNum + "" for range [0.."" + (this.numFields - 1)+ ""]"")"
target == null,target == null || target.getNumFields() < this.mappings.size() + 1
target == null,target == null || target.getNumFields() < this.mappings.size() + 1
out.write(this.connectionAddress.getPort()),out.writeInt(this.connectionAddress.getPort())
out.write(this.connectionAddress.getPort()),out.writeInt(this.connectionAddress.getPort())
ArrayNodeBaseTest<LazyTailArrayNode>,ArrayNodeBaseTest<LazyHeadArrayNode>
TailArraySchema schema=new TailArraySchema(); ,HeadArraySchema schema=new HeadArraySchema(); 
"new LazyTailArrayNode(record,schema)","new LazyHeadArrayNode(record,schema)"
return true; ,return false; 
"isFieldKept(uniqueField,input)","isFieldKept(input,uniqueField)"
it.next().hasFinished(),!it.next().hasFinished()
secConn != null,secConn != null && secConn.size() > 0
preds2.size() == 1,preds2 != null && preds2.size() == 1
"target.setField(0,val2)","target.setField(1,val2)"
isTrivial(),!isTrivial()
transitiveClosure.setNumberOfPartitions(6),transitiveClosure.setNumberOfPartitions(3)
i >= 0,i > 0
i >= 0,i > 0
i >= 0,i > 0
i >= 0,i > 0
17,1
return false; ,return true; 
2,66
2,66
-1,1
new DeserializationException(e),"new DeserializationException(""Error reading field "" + fieldNumber + "" as ""+ target.getClass().getName(),e)"
"target.setField(1,edge)","target.setField(0,edge)"
"new BuildSecondHashMatchIterator(this.inputs[0],this.inputs[1],keyPositions1,keyPositions2,keyClasses,memoryManager,ioManager,this,availableMemory)","new BuildSecondHashMatchIterator(this.inputs[0],this.inputs[1],keyPositions2,keyPositions1,keyClasses,memoryManager,ioManager,this,availableMemory)"
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xff,byteBuffer.get((SIZEOFLONG - 1) - i) & 0xffL
0xff << shift,0xffL << shift
"new FunctionCall(""substring"",new PathExpression(new ObjectAccess(""addresses""),new ArrayAccess(0),new ObjectAccess(""zipCode"")))","new FunctionCall(""substring"",new PathExpression(new ObjectAccess(""addresses""),new ArrayAccess(0),new ObjectAccess(""zipCode"")),new ConstantExpression(0),new ConstantExpression(2))"
config.getInputShipStrategy(0),config.getInputShipStrategy(1)
DEFAULT_NUMBER_OF_READ_BUFFERS=128,DEFAULT_NUMBER_OF_READ_BUFFERS=256
DEFAULT_NUMBER_OF_WRITE_BUFFERS=128,DEFAULT_NUMBER_OF_WRITE_BUFFERS=256
128 * 1024,64 * 1024
outList.size(),aggMap.size()
outList.size(),aggMap.size()
"new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2,keySerialization,valSerialization,keyComparator,reader,parentTask)","new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2,keySerialization,valSerialization,keyComparator,reader,parentTask,0.7f)"
this.totalBytesWritten+=bytesWritten,this.totalBytesWritten+=b
"Collections.sort(runningJobs,njec)","Collections.sort(scheduledJobs,njec)"
17,1
return 0; ,return 1; 
DEFAULT_ALLOW_SPILLING=false,DEFAULT_ALLOW_SPILLING=true
case NONE: ,case FORWARD: 
"System.arraycopy(bytes,0,this.bytes,0,SIZE)","System.arraycopy(src,0,this.bytes,0,SIZE)"
super.equals(obj),!super.equals(obj)
this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName()),!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
new ArrayList<FileInputSplit>(numSubtasks),new ArrayList<FileInputSplit>()
LOG.warn(e),"LOG.warn(""Error invoking metrics timer"",e)"
9,25
this.context.getLogAggregationStatusForApps().add(report),this.context.getLogAggregationStatusForApps().add(finalReport)
this.conf.addResource(coreSiteXMLInputStream),"this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)"
this.conf.addResource(yarnSiteXMLInputStream),"this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)"
entry.getValue().acccessibleNodeLabels,entry.getValue().accessibleNodeLabels
Thread.sleep(2000),Thread.sleep(3000)
"LOG.error(""Cannot create writer for app "" + this.applicationId + "". Skip log upload this time. "")","LOG.error(""Cannot create writer for app "" + this.applicationId + "". Skip log upload this time. "",e1)"
"LOG.error(""Couldn't upload logs for "" + containerId + "". Skipping this container."")","LOG.error(""Couldn't upload logs for "" + containerId + "". Skipping this container."",e)"
1,33
"barrier1.await(2,TimeUnit.SECONDS)","barrier.await(2,TimeUnit.SECONDS)"
"barrier1.await(2,TimeUnit.SECONDS)","barrier.await(2,TimeUnit.SECONDS)"
4,36
1,33
2,34
assertTrue(exitStatuses.contains(status.getExitStatus())),"assertTrue(""Exit Statuses are supposed to be in: "" + exitStatuses + "", but the actual exit status code is: ""+ status.getExitStatus(),exitStatuses.contains(status.getExitStatus()))"
volumes.toString(),Arrays.toString(volumes.get())
e.getMessage(),e.toString()
e.getMessage(),e.toString()
e.getMessage(),e.toString()
e.getMessage(),e.toString()
e.getMessage(),e.toString()
e.getMessage(),e.toString()
e.getMessage(),e.toString()
e.getMessage(),e.toString()
"LOG.warn(""DataNode is out of memory. Will retry in 30 seconds."",ie)","LOG.error(""DataNode is out of memory. Will retry in 30 seconds."",ie)"
"LOG.warn(""DataNode is out of memory. Will retry in 30 seconds."",ie)","LOG.error(""DataNode is out of memory. Will retry in 30 seconds."",ie)"
is(4),is(5)
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
-1,1
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf),WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf),WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration()),WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration()),WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())
Thread.sleep(100),Thread.sleep(300)
CAPACITY=500L,CAPACITY=6000L
DEFAULT_BLOCK_SIZE=10,DEFAULT_BLOCK_SIZE=100
timeout=120000,timeout=150000
FSImageFormatProtobuf.class,FSImageFormatPBINode.class
TIMEOUT=20000L,TIMEOUT=40000L
1,33
TIMEOUT=20000L,TIMEOUT=40000L
args.length != 2,args.length != 3
"assertEquals(3,historyServer.getServices().size())","assertEquals(2,historyServer.getServices().size())"
"LOG.error(""PriviledgedActionException as:"" + this + "" cause:""+ cause)","LOG.warn(""PriviledgedActionException as:"" + this + "" cause:""+ cause)"
"LOG.error(""PriviledgedActionException as:"" + this + "" cause:""+ cause)","LOG.warn(""PriviledgedActionException as:"" + this + "" cause:""+ cause)"
1,33
34,2
writeLock(),readLock()
writeLock(),readLock()
writeUnlock(),readUnlock()
writeUnlock(),readUnlock()
0,32
1,33
"Arrays.asList(""bash"",""-c"",command)","Arrays.asList(""bash"",command)"
9,41
"fullName.split(""[/@]"",2)","fullName.split(""[/@]"",3)"
(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0)),!(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
DEFAULT_SHUFFLE_PORT=11000,DEFAULT_SHUFFLE_PORT=13562
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS,noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS,noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS
ugi.reloginFromKeytab(),ugi.checkTGTAndReloginFromKeytab()
ugi.reloginFromKeytab(),ugi.checkTGTAndReloginFromKeytab()
UserGroupInformation.getLoginUser().reloginFromKeytab(),UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getLoginUser().reloginFromKeytab(),UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getCurrentUser().reloginFromKeytab(),UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getCurrentUser().reloginFromKeytab(),UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getCurrentUser().reloginFromKeytab(),UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getCurrentUser().reloginFromKeytab(),UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getCurrentUser().reloginFromKeytab(),UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
UserGroupInformation.getCurrentUser().reloginFromKeytab(),UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
DEFAULT_SHUFFLE_PORT=8080,DEFAULT_SHUFFLE_PORT=11000
"WebServicesTestUtils.checkStringMatch(""hadoopBuildVersion"",VersionInfo.getBuildVersion(),hadoopBuildVersion)","WebServicesTestUtils.checkStringEqual(""hadoopBuildVersion"",VersionInfo.getBuildVersion(),hadoopBuildVersion)"
"WebServicesTestUtils.checkStringMatch(""hadoopBuildVersion"",VersionInfo.getBuildVersion(),hadoopBuildVersion)","WebServicesTestUtils.checkStringEqual(""hadoopBuildVersion"",VersionInfo.getBuildVersion(),hadoopBuildVersion)"
4,1
4,1
4,1
0,1
4,1
4,1
4,1
DEFAULT_USER_AS_DEFAULT_QUEUE=false,DEFAULT_USER_AS_DEFAULT_QUEUE=true
"assertEquals(1,scheduler.getQueueManager().getQueues().size())","assertEquals(2,scheduler.getQueueManager().getQueues().size())"
"LOG.info(""Storage directory "" + rootPath + "" does not exist"")","LOG.warn(""Storage directory "" + rootPath + "" does not exist"")"
"LOG.info(""Storage directory "" + rootPath + "" does not exist"")","LOG.warn(""Storage directory "" + rootPath + "" does not exist"")"
"LOG.info(rootPath + ""is not a directory"")","LOG.warn(rootPath + ""is not a directory"")"
"LOG.info(rootPath + ""is not a directory"")","LOG.warn(rootPath + ""is not a directory"")"
"LOG.info(""Cannot access storage directory "" + rootPath)","LOG.warn(""Cannot access storage directory "" + rootPath)"
"LOG.info(""Cannot access storage directory "" + rootPath)","LOG.warn(""Cannot access storage directory "" + rootPath)"
"LOG.info(""Cannot access storage directory "" + rootPath,ex)","LOG.warn(""Cannot access storage directory "" + rootPath,ex)"
"LOG.info(""Cannot access storage directory "" + rootPath,ex)","LOG.warn(""Cannot access storage directory "" + rootPath,ex)"
"FsDatasetImpl.LOG.info(""Completed checkDirs. Removed "" + removedVols.size() + "" volumes. Current volumes: ""+ this)","FsDatasetImpl.LOG.warn(""Completed checkDirs. Removed "" + removedVols.size() + "" volumes. Current volumes: ""+ this)"
"FsDatasetImpl.LOG.info(""Completed checkDirs. Removed "" + removedVols.size() + "" volumes. Current volumes: ""+ this)","FsDatasetImpl.LOG.warn(""Completed checkDirs. Removed "" + removedVols.size() + "" volumes. Current volumes: ""+ this)"
"public void testJobQueues() throws IOException {   JobClient jc=new JobClient(mrCluster.createJobConf());   String expectedQueueInfo=""Maximum Tasks Per Job :: 10"";   JobQueueInfo[] queueInfos=jc.getQueues();   assertNotNull(queueInfos);   assertEquals(1,queueInfos.length);   assertEquals(""default"",queueInfos[0].getQueueName());   assertEquals(QueueState.RUNNING.getStateName(),queueInfos[0].getQueueState());   JobConf conf=mrCluster.createJobConf();   FileSystem fileSys=dfsCluster.getFileSystem();   conf=configureWaitingJob(conf);   conf.setJobName(""test-job-queue-info-test"");   fileSys.delete(SHARE_DIR,true);   RunningJob rJob=jc.submitJob(conf);   while (rJob.getJobState() != JobStatus.RUNNING) {     UtilsForTests.waitFor(10);   }   int numberOfJobs=0;   for (  JobQueueInfo queueInfo : queueInfos) {     JobStatus[] jobStatusList=jc.getJobsFromQueue(queueInfo.getQueueName());     assertNotNull(queueInfo.getQueueName());     assertNotNull(queueInfo.getSchedulingInfo());     assertEquals(expectedQueueInfo,queueInfo.getSchedulingInfo());     numberOfJobs+=jobStatusList.length;     for (    JobStatus status : jobStatusList) {       assertEquals(JOB_SCHEDULING_INFO,status.getSchedulingInfo());     }   }   assertEquals(1,numberOfJobs);   UtilsForTests.signalTasks(dfsCluster,fileSys,getSignalFile(),getSignalFile(),4); } ","public void testJobQueues() throws Exception {   JobClient jc=new JobClient(mrCluster.createJobConf());   String expectedQueueInfo=""Maximum Tasks Per Job :: 10"";   JobQueueInfo[] queueInfos=jc.getQueues();   assertNotNull(queueInfos);   assertEquals(1,queueInfos.length);   assertEquals(""default"",queueInfos[0].getQueueName());   assertEquals(QueueState.RUNNING.getStateName(),queueInfos[0].getQueueState());   JobConf conf=mrCluster.createJobConf();   FileSystem fileSys=dfsCluster.getFileSystem();   conf=configureWaitingJob(conf);   conf.setJobName(""test-job-queue-info-test"");   fileSys.delete(SHARE_DIR,true);   RunningJob rJob=jc.submitJob(conf);   while (rJob.getJobState() != JobStatus.RUNNING) {     UtilsForTests.waitFor(10);   }   int numberOfJobs=0;   for (  JobQueueInfo queueInfo : queueInfos) {     JobStatus[] jobStatusList=jc.getJobsFromQueue(queueInfo.getQueueName());     assertNotNull(queueInfo.getQueueName());     assertNotNull(queueInfo.getSchedulingInfo());     assertEquals(expectedQueueInfo,queueInfo.getSchedulingInfo());     numberOfJobs+=jobStatusList.length;     for (    JobStatus status : jobStatusList) {       assertEquals(JOB_SCHEDULING_INFO,status.getSchedulingInfo());     }   }   assertEquals(1,numberOfJobs);   UtilsForTests.signalTasks(dfsCluster,fileSys,getSignalFile(),getSignalFile(),4); } "
"/**   * Tests setup and cleanup attempts getting killed from command-line  and lost tracker  * @param mr  * @param dfs  * @param commandLineKill if true, test with command-line killelse, test with lost tracker  * @throws IOException  */ private void testSetupAndCleanupKill(MiniMRCluster mr,MiniDFSCluster dfs,boolean commandLineKill) throws IOException {   RunningJob job=launchJobWithWaitingSetupAndCleanup(mr);   JobTracker jt=mr.getJobTrackerRunner().getJobTracker();   JobInProgress jip=jt.getJob(job.getID());   TaskAttemptID setupID=getRunningTaskID(jip.getTasks(TaskType.JOB_SETUP));   if (commandLineKill) {     killTaskFromCommandLine(job,setupID,jt);   }  else {     killTaskWithLostTracker(mr,setupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),setupSignalFile,(short)3);   while (job.reduceProgress() != 1.0f) {     try {       Thread.sleep(100);     }  catch (    InterruptedException ie) {     }   }   TaskAttemptID cleanupID=getRunningTaskID(jip.getTasks(TaskType.JOB_CLEANUP));   if (commandLineKill) {     killTaskFromCommandLine(job,cleanupID,jt);   }  else {     killTaskWithLostTracker(mr,cleanupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),cleanupSignalFile,(short)3);   job.waitForCompletion();   assertEquals(JobStatus.SUCCEEDED,job.getJobState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(setupID).getRunState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(cleanupID).getRunState()); } ","/**   * Tests setup and cleanup attempts getting killed from command-line  and lost tracker  * @param mr  * @param dfs  * @param commandLineKill if true, test with command-line killelse, test with lost tracker  * @throws IOException  */ private void testSetupAndCleanupKill(MiniMRCluster mr,MiniDFSCluster dfs,boolean commandLineKill) throws Exception {   RunningJob job=launchJobWithWaitingSetupAndCleanup(mr);   JobTracker jt=mr.getJobTrackerRunner().getJobTracker();   JobInProgress jip=jt.getJob(job.getID());   TaskAttemptID setupID=getRunningTaskID(jip.getTasks(TaskType.JOB_SETUP));   if (commandLineKill) {     killTaskFromCommandLine(job,setupID,jt);   }  else {     killTaskWithLostTracker(mr,setupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),setupSignalFile,(short)3);   while (job.reduceProgress() != 1.0f) {     try {       Thread.sleep(100);     }  catch (    InterruptedException ie) {     }   }   TaskAttemptID cleanupID=getRunningTaskID(jip.getTasks(TaskType.JOB_CLEANUP));   if (commandLineKill) {     killTaskFromCommandLine(job,cleanupID,jt);   }  else {     killTaskWithLostTracker(mr,cleanupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),cleanupSignalFile,(short)3);   job.waitForCompletion();   assertEquals(JobStatus.SUCCEEDED,job.getJobState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(setupID).getRunState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(cleanupID).getRunState()); } "
"public void testWithDFS() throws IOException {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } ","public void testWithDFS() throws Exception {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } "
"/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws IOException {   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication); } ","/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws Exception {   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication); } "
"/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws IOException {   writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1); } ","/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws Exception {   writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1); } "
"static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws IOException {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } ","static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws Exception {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } "
KEY_LENGTH=20,KEY_LENGTH=64
"new RMNodeImpl(nodeId,rmContext,null,0,0,null,null,null)","new RMNodeImpl(nodeId,rmContext,null,0,0,null,null)"
"new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null,null)","new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null)"
2,66
"format(conf,false)","format(conf,true)"
"format(conf,true)","format(conf,false)"
urlToNotify.openConnection(),urlToNotify.openConnection(proxyToUse)
seenServiceNames.contains(serviceName),serviceName == null || seenServiceNames.contains(serviceName)
1,33
1,33
new JobConf(config_),"new JobConf(config_,StreamJob.class)"
dstPath.getValue(),destination.getValue()
dstPath.getValue(),destination.getValue()
DEFAULT_RM_ACL_ENABLE=false,DEFAULT_RM_ACL_ENABLE=true
18,26
"this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)","this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)"
"lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)","lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)"
10,42
keyClass(NullWritable.class),valueClass(NullWritable.class)
keyClass(NullWritable.class),valueClass(NullWritable.class)
IOException.class,NullPointerException.class
IOException.class,IllegalArgumentException.class
SocketTimeoutException.class,RetriesExhaustedException.class
SocketTimeoutException.class,RetriesExhaustedException.class
"WALSplitter.moveAsideBadEditsFile(walFS,edits)","WALSplitter.moveAsideBadEditsFile(fs,edits)"
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor()),ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor()),ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor()),ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor()),ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor()),ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor()),ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
"LOG.warn(""calculatedMaxSteps:{} for loadbalancer's stochastic walk is larger than "" + ""maxSteps:{}. Hence load balancing may not work well. Setting parameter "" + ""\""hbase.master.balancer.stochastic.runMaxSteps\"" to true can overcome this issue.""+ ""(This config change does not require service restart)"",calculatedMaxSteps,maxRunningTime)","LOG.warn(""calculatedMaxSteps:{} for loadbalancer's stochastic walk is larger than "" + ""maxSteps:{}. Hence load balancing may not work well. Setting parameter "" + ""\""hbase.master.balancer.stochastic.runMaxSteps\"" to true can overcome this issue.""+ ""(This config change does not require service restart)"",calculatedMaxSteps,maxSteps)"
histogram.getCount(),snapshot.getCount()
histogram.getCount(),snapshot.getCount()
region.getRegionId(),region.getReplicaId()
region.getRegionId(),region.getReplicaId()
"LOG.info(""Table {} is disabled, give up reopening its regions"")","LOG.info(""Table {} is disabled, give up reopening its regions"",tableName)"
"LOG.trace(""The sequence id for {} is continuous, pass"")","LOG.trace(""The sequence id for {} is continuous, pass"",entry)"
"""Unsupported filesystem scheme found in the backup target url. Error Message: "" + newMsg","""Unsupported filesystem scheme found in the backup target url. Error Message: "" + expMsg"
"""Unsupported filesystem scheme found in the backup target url. Error Message: "" + newMsg","""Unsupported filesystem scheme found in the backup target url. Error Message: "" + expMsg"
"LOG.error(""Failed to transit standby cluster to "" + SyncReplicationState.DOWNGRADE_ACTIVE)","LOG.error(""Failed to transit standby cluster to "" + SyncReplicationState.DOWNGRADE_ACTIVE,e)"
ProtobufUtil.createSnapshotDesc(reqSnapshot),ProtobufUtil.createSnapshotDesc(snapshot)
ProtobufUtil.createSnapshotDesc(reqSnapshot),ProtobufUtil.createSnapshotDesc(snapshot)
String.valueOf(0.02),String.valueOf(0.09)
1,0
timeout(1000),timeout(10000)
timeout(1000),timeout(10000)
"addRegionStateToPut(putA,RegionState.State.CLOSED)","addRegionStateToPut(putB,RegionState.State.CLOSED)"
"assertEquals(5,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())","assertEquals(4,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())"
"assertEquals(5,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size())","assertEquals(4,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size())"
TEST_UTIL.getHBaseAdmin(),TEST_UTIL.getAdmin()
TEST_UTIL.getHBaseAdmin(),TEST_UTIL.getAdmin()
TEST_UTIL.getHBaseAdmin(),TEST_UTIL.getAdmin()
TEST_UTIL.getHBaseAdmin(),TEST_UTIL.getAdmin()
"""ppc64"".equals(arch) || ""ppc64le"".equals(arch)","""ppc64"".equals(arch) || ""ppc64le"".equals(arch) || ""aarch64"".equals(arch)"
"@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } ","@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } "
"@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new TagRewriteCell(clonedBaseCell,this.tags); } ","@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new TagRewriteCell(clonedBaseCell,this.tags); } "
"@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } ","@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } "
"@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } ","@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } "
"@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new ValueAndTagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.value,this.tags);   }   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } ","@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new ValueAndTagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.value,this.tags);   }   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } "
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ Cell deepClone(); ,/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ ExtendedCell deepClone(); 
@Override public Cell deepClone(){   return new KeyValue(this); } ,@Override public ExtendedCell deepClone(){   return new KeyValue(this); } 
"@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } ","@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } "
"@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } ","@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } "
"@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } ","@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } "
@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } ,@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } 
@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } ,@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } 
final HColumnDescriptor hcd=htd.getFamily(familyName); ,final ColumnFamilyDescriptor hcd=htd.getColumnFamily(familyName); 
QuotaCache.this.tableQuotaCache.contains(table),QuotaCache.this.tableQuotaCache.containsKey(table)
QuotaCache.this.tableQuotaCache.contains(table),QuotaCache.this.tableQuotaCache.containsKey(table)
QuotaCache.this.namespaceQuotaCache.contains(ns),QuotaCache.this.namespaceQuotaCache.containsKey(ns)
QuotaCache.this.namespaceQuotaCache.contains(ns),QuotaCache.this.namespaceQuotaCache.containsKey(ns)
this.getLimit(),other.getLimit()
sorted_files.get(i).createReader(),sorted_files.get(i).createReader(canUseDrop)
"new FastPathBalancedQueueRpcExecutor(""deafult.FPBQ"",handlerCount,maxPriorityQueueLength,priority,conf,server)","new FastPathBalancedQueueRpcExecutor(""deafult.FPBQ"",handlerCount,maxQueueLength,priority,conf,server)"
locator.getRegionLocation(regionName),"locator.getRegionLocation(regionName,true)"
counter + 2,counter + 1
counter + 2,counter + 1
"c.setLong(""hbase.hregion.memstore.flush.size"",100000)","c.setLong(""hbase.hregion.memstore.flush.size"",25000)"
8,9
DEFAULT_MOVE_COST=100,DEFAULT_MOVE_COST=7
left.getQualifierLength(),left.getRowLength()
left.getQualifierLength(),left.getRowLength()
cached.get(walCacheLock),cached.get(group)
34,2
33,1
33,1
33,1
33,1
49,1
"""Refreshing storefiles of region "" + regionToFlush + "" due to global heap pressure. memstore size=""+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())","""Refreshing storefiles of region "" + bestRegionReplica + "" due to global heap pressure. memstore size=""+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())"
"""Refreshing storefiles of region "" + regionToFlush + "" due to global heap pressure. memstore size=""+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())","""Refreshing storefiles of region "" + bestRegionReplica + "" due to global heap pressure. memstore size=""+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())"
"""Excluding secondary region "" + regionToFlush + "" - trying to find a different region to refresh files.""","""Excluding secondary region "" + bestRegionReplica + "" - trying to find a different region to refresh files."""
"""Excluding secondary region "" + regionToFlush + "" - trying to find a different region to refresh files.""","""Excluding secondary region "" + bestRegionReplica + "" - trying to find a different region to refresh files."""
"LOG.fatal(""Could not append. Requesting close of wal"",e)","LOG.warn(""Could not append. Requesting close of wal"",e)"
"LOG.fatal(""Could not append. Requesting close of wal"",e)","LOG.warn(""Could not append. Requesting close of wal"",e)"
CellUtil.estimatedHeapSizeOf(c),CellUtil.estimatedHeapSizeOfWithoutTags(c)
CellUtil.estimatedHeapSizeOf(c),CellUtil.estimatedHeapSizeOfWithoutTags(c)
CellUtil.estimatedHeapSizeOf(cell),CellUtil.estimatedHeapSizeOfWithoutTags(cell)
CellUtil.estimatedHeapSizeOf(cell),CellUtil.estimatedHeapSizeOfWithoutTags(cell)
TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName()),TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())
TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName()),TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())
TEST_UTIL.waitTableEnabled(tableName),TEST_UTIL.waitUntilAllRegionsAssigned(tableName)
TEST_UTIL.waitTableEnabled(tableName),TEST_UTIL.waitUntilAllRegionsAssigned(tableName)
13 * Bytes.SIZEOF_LONG,14 * Bytes.SIZEOF_LONG
call.getRpcTimeout(),call.getStartTime()
call.getRpcTimeout(),call.getStartTime()
Bytes.toString(qualifierName),"Bytes.toString(qualifierName,start,end)"
"oldestUnflushedStoreSequenceIds.put(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)","oldestUnflushedStoreSequenceIds.putIfAbsent(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)"
"oldestUnflushedStoreSequenceIds.put(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)","oldestUnflushedStoreSequenceIds.putIfAbsent(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)"
1,33
1,33
4,36
1,33
rsWrap.getMobFileCacheAccessCount(),rsWrap.getMobFileCacheMissCount()
rsWrap.getMobFileCacheAccessCount(),rsWrap.getMobFileCacheMissCount()
isAllFiles(),!isAllFiles()
"toShortUnsafe(bytes,0)","toShort(bytes,0,SIZEOF_SHORT)"
getTablename().getBytes(),getTablename().getName()
getTablename().getBytes(),getTablename().getName()
"region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),put,true)","region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),delete,true)"
"new MetaTableLocator().waitMetaRegionLocation(watcher,100)","new MetaTableLocator().waitMetaRegionLocation(watcher,10000)"
numKeys > 1,numKeys > 0
"methodName.equals(""scan"")","methodName.equalsIgnoreCase(""scan"")"
"methodName.equals(""scan"")","methodName.equalsIgnoreCase(""scan"")"
"new RuntimeException(""Mocked failed close!"")","new IOException(""Mocked failed close!"")"
"LOG.error(""Cannot resolve the host name for "" + regionAddress + "" because of ""+ e)","LOG.warn(""Cannot resolve the host name for "" + regionAddress + "" because of ""+ e)"
"LOG.error(""Cannot resolve the host name for "" + regionAddress + "" because of ""+ e)","LOG.warn(""Cannot resolve the host name for "" + regionAddress + "" because of ""+ e)"
"LOG.error(""Failed to look for classes in "" + jarFileName + "": ""+ ioEx)","LOG.warn(""Failed to look for classes in "" + jarFileName + "": ""+ ioEx)"
"LOG.error(""Failed to look for classes in "" + jarFileName + "": ""+ ioEx)","LOG.warn(""Failed to look for classes in "" + jarFileName + "": ""+ ioEx)"
"LOG.error(""Failed to get next entry from "" + jarFileName + "": ""+ ioEx)","LOG.warn(""Failed to get next entry from "" + jarFileName + "": ""+ ioEx)"
"LOG.error(""Failed to get next entry from "" + jarFileName + "": ""+ ioEx)","LOG.warn(""Failed to get next entry from "" + jarFileName + "": ""+ ioEx)"
"LOG.error(""Ignoring duplicate class "" + className)","LOG.warn(""Ignoring duplicate class "" + className)"
"LOG.error(""Ignoring duplicate class "" + className)","LOG.warn(""Ignoring duplicate class "" + className)"
"LOG.error(""Failed to find "" + baseDirectory.getAbsolutePath())","LOG.warn(""Failed to find "" + baseDirectory.getAbsolutePath())"
"LOG.error(""Failed to find "" + baseDirectory.getAbsolutePath())","LOG.warn(""Failed to find "" + baseDirectory.getAbsolutePath())"
"LOG.error(""Failed to get files from "" + baseDirectory.getAbsolutePath())","LOG.warn(""Failed to get files from "" + baseDirectory.getAbsolutePath())"
"LOG.error(""Failed to get files from "" + baseDirectory.getAbsolutePath())","LOG.warn(""Failed to get files from "" + baseDirectory.getAbsolutePath())"
"LOG.error(""Ignoring duplicate class "" + className)","LOG.warn(""Ignoring duplicate class "" + className)"
"LOG.error(""Ignoring duplicate class "" + className)","LOG.warn(""Ignoring duplicate class "" + className)"
a.getTypeByte(),b.getTypeByte()
a.getTypeByte(),b.getTypeByte()
a.getTypeByte(),b.getTypeByte()
a.getTypeByte(),b.getTypeByte()
1,33
1,33
1,33
util.getDataTestDir(table),util.getDataTestDirOnTestFS(table)
util.getDataTestDir(table),util.getDataTestDirOnTestFS(table)
util.getDataTestDir(table),util.getDataTestDirOnTestFS(table)
util.getDataTestDir(table),util.getDataTestDirOnTestFS(table)
4 * Bytes.SIZEOF_BOOLEAN,5 * Bytes.SIZEOF_BOOLEAN
lastException != null,lastException != null && i < (flushRetriesNumber - 1)
super.getFamilyMap(),super.getFamilyCellMap()
s.setMaxVersions(),s.setMaxVersions(region.getStores().values().iterator().next().getScanInfo().getMaxVersions())
Bytes.toBytesBinary(regionname),Bytes.toBytes(regionname)
Bytes.toBytesBinary(regionname),Bytes.toBytes(regionname)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableOrRegionName),Bytes.toBytes(tableOrRegionName)
Bytes.toBytesBinary(tableOrRegionName),Bytes.toBytes(tableOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
Bytes.toBytesBinary(tableNameOrRegionName),Bytes.toBytes(tableNameOrRegionName)
"new StoreFile(this.fs,linkFilePath,conf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)","new StoreFile(this.fs,linkFilePath,testConf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)"
f.cancel(true),f.cancel(false)
mockRegionInfo.isMetaRegion(),mockRegionInfo.isMetaTable()
mockRegionInfo.isMetaRegion(),mockRegionInfo.isMetaTable()
mockRegionInfo.isMetaRegion(),mockRegionInfo.isMetaTable()
mockRegionInfo.isMetaRegion(),mockRegionInfo.isMetaTable()
mockRegionInfo.isMetaRegion(),mockRegionInfo.isMetaTable()
mockRegionInfo.isMetaRegion(),mockRegionInfo.isMetaTable()
"ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())","authManager.refresh(conf,new HBasePolicyProvider())"
"ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())","authManager.refresh(conf,new HBasePolicyProvider())"
SLEEP_TIME=500,SLEEP_TIME=1500
6 * Bytes.SIZEOF_LONG,4 * Bytes.SIZEOF_LONG
"LOG.error(""Node "" + path + "" already exists and this is not a ""+ ""retry"")","LOG.info(""Node "" + path + "" already exists and this is not a ""+ ""retry"")"
"LOG.error(""Node "" + path + "" already exists and this is not a ""+ ""retry"")","LOG.info(""Node "" + path + "" already exists and this is not a ""+ ""retry"")"
metric instanceof MetricsRate || metric instanceof MetricsString,metric instanceof MetricsRate || metric instanceof MetricsString || metric instanceof MetricsHistogram|| metric instanceof ExactCounterMetric
HBaseFsck.class,OfflineMetaRepair.class
"this.fs.delete(filePath,false)","!this.fs.delete(filePath,false)"
"LOG.fatal(""Cannot run ThriftServer"")","LOG.fatal(""Cannot run ThriftServer"",e)"
2,10
8,9
"LOG.debug(""recovered from "" + StringUtils.stringifyException(e))","LOG.info(""recovered from "" + StringUtils.stringifyException(e))"
"LOG.debug(""recovered from "" + StringUtils.stringifyException(e))","LOG.info(""recovered from "" + StringUtils.stringifyException(e))"
1,1
27 * ClassSize.REFERENCE,28 * ClassSize.REFERENCE
8 * Bytes.SIZEOF_LONG,7 * Bytes.SIZEOF_LONG
log.rollWriter(),log.rollWriter(true)
InetAddress.getLocalHost(),"InetAddress.getByName(""0.0.0.0"")"
"assertTrue(CompressionTest.testCompression(""SNAPPY""))","assertFalse(CompressionTest.testCompression(""SNAPPY""))"
"assertTrue(CompressionTest.testCompression(""SNAPPY""))","assertFalse(CompressionTest.testCompression(""SNAPPY""))"
serversByLoad.lastKey(),serversByLoad.firstKey()
serversByLoad.lastKey(),serversByLoad.firstKey()
11 * ClassSize.REFERENCE,12 * ClassSize.REFERENCE
MAX_CACHED_HBASE_INSTANCES=31,MAX_CACHED_HBASE_INSTANCES=2001
"zk.exists(znode,false) != null","zk.exists(znode,false) == null"
1,1
1,1
badLine.getMessage(),e.getMessage()
badLine.getMessage(),e.getMessage()
new IOException(badLine),new IOException(e)
this.assignmentManager.isRegionInTransition(regionInfo) == null,this.assignmentManager.isRegionInTransition(regionInfo) != null
"LOG.error(""Cache flusher failed for entry "" + fqe)","LOG.error(""Cache flusher failed for entry "" + fqe,ex)"
serversByLoad.lastKey(),serversByLoad.firstKey()
serversByLoad.lastKey(),serversByLoad.firstKey()
totalTime / curTime == curOps,curTime == 0 || totalTime / curTime == curOps
totalTime / curTime == curOps,curTime == 0 || totalTime / curTime == curOps
22 * ClassSize.REFERENCE,23 * ClassSize.REFERENCE
new HTable(TABLE),"new HTable(TEST_UTIL.getConfiguration(),TABLE)"
1,1
1,1
1,1
1,1
1,1
1,1
timeout=60000,timeout=300000
"conf.setInt(""hbase.hregion.memstore.block.multiplier"",10)","conf.setInt(""hbase.hregion.memstore.block.multiplier"",100)"
HBaseConfiguration conf,Configuration conf
0,1
put.writeToWAL(),put.getWriteToWAL()
put.writeToWAL(),put.getWriteToWAL()
put.writeToWAL(),put.getWriteToWAL()
put.writeToWAL(),put.getWriteToWAL()
new IOException(msg),"new IOException(msg,e)"
client.get(path),"client.get(path,MIMETYPE_XML)"
client.get(path),"client.get(path,MIMETYPE_PROTOBUF)"
"this.reader.comparator.compare(reader.blockIndex.blockKeys[b],key)","this.reader.comparator.compare(reader.blockIndex.blockKeys[b],0,reader.blockIndex.blockKeys[b].length,key,offset,length)"
this.comparator,this.comparatorIgnoringType
content.matches(expected),content.contains(expected)
content.matches(expected),content.contains(expected)
9,9
info.getRegionName(),info.getRegionNameAsString()
info.getRegionName(),info.getRegionNameAsString()
parent.getRegionName(),parent.getRegionNameAsString()
parent.getRegionName(),parent.getRegionNameAsString()
info.getRegionName(),info.getRegionNameAsString()
info.getRegionName(),info.getRegionNameAsString()
tableName.toString(),Bytes.toString(tableName)
!rootScanned,!rootRescanned
"""Requeuing shutdown because rootScanned: "" + rootScanned + "", numberOfMetaRegions: ""+ numberOfMetaRegions.get()+ "", onlineMetaRegions.size(): ""+ onlineMetaRegions.size()","""Requeuing shutdown because rootScanned: "" + rootRescanned + "", numberOfMetaRegions: ""+ numberOfMetaRegions.get()+ "", onlineMetaRegions.size(): ""+ onlineMetaRegions.size()"
"""Requeuing shutdown because rootScanned: "" + rootScanned + "", numberOfMetaRegions: ""+ numberOfMetaRegions.get()+ "", onlineMetaRegions.size(): ""+ onlineMetaRegions.size()","""Requeuing shutdown because rootScanned: "" + rootRescanned + "", numberOfMetaRegions: ""+ numberOfMetaRegions.get()+ "", onlineMetaRegions.size(): ""+ onlineMetaRegions.size()"
"LOG.info(""Processing changes for pool "" + poolName + "": ""+ pools.get(poolName))","LOG.debug(""Processing changes for pool "" + poolName + "": ""+ pools.get(poolName))"
"LOG.info(""Processing changes for pool "" + poolName + "": ""+ pools.get(poolName))","LOG.debug(""Processing changes for pool "" + poolName + "": ""+ pools.get(poolName))"
mapEntry.getValue().isSame(source),mapEntry.getValue().equals(source)
mapEntry.getValue().isSame(source),mapEntry.getValue().equals(source)
new ArrayList<>(),new ArrayList<>(1)
-1,1
-1,1
-1,1
-1,1
"ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)","ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)"
"ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)","ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)"
"privObj.getObjectName().equals(""masking_test"")","privObj.getObjectName().equals(""masking_test"") || privObj.getObjectName().startsWith(""masking_test_n"")"
"privObj.getObjectName().equals(""masking_test_view"")","privObj.getObjectName().equals(""masking_test_view"") || privObj.getObjectName().startsWith(""masking_test_view_n"")"
"privObj.getObjectName().equals(""masking_test_subq"")","privObj.getObjectName().equals(""masking_test_subq"") || privObj.getObjectName().startsWith(""masking_test_subq_n"")"
"privObj.getObjectName().equals(""masking_acid_no_masking"")","privObj.getObjectName().equals(""masking_acid_no_masking"") || privObj.getObjectName().startsWith(""masking_acid_no_masking_n"")"
"privObj.getObjectName().equals(""masking_test_druid"")","privObj.getObjectName().equals(""masking_test_druid"") || privObj.getObjectName().startsWith(""masking_test_druid_n"")"
JMXJsonServlet.class,LlapServlet.class
"AcidUtils.getTableSnapshot(hive.getConf(),tbl,true)","AcidUtils.getTableSnapshot(hive.getConf(),tbl)"
GenericUDFEnforceNotNullConstraint.class,GenericUDFEnforceConstraint.class
"super(RowResolver.getCombinedRR(leftRR,rightRR),true,false,false,false,false,false,false,false,false,false); ","super(RowResolver.getCombinedRR(leftRR,rightRR),true,false,false,false,false,false,false,false,true,false); "
"Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())","Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())"
"Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())","Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())"
"cluster.getRexBuilder().makeCall(calciteOp,childRexNodeLst)","cluster.getRexBuilder().makeCall(retType,calciteOp,childRexNodeLst)"
partProps.size(),partSpec.size()
partProps.size(),partSpec.size()
return true; ,return false; 
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED),(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)|| (getStatus().getState() == OperationState.FINISHED)
"new DropTableEvent(tbl,deleteData,true,this)","new DropTableEvent(tbl,true,deleteData,this)"
"new DropTableEvent(tbl,deleteData,success,this)","new DropTableEvent(tbl,success,deleteData,this)"
0,1
"Utilities.LOG14535.info(""creating new paths "" + System.identityHashCode(fsp2) + "" for ""+ dirName+ "", childSpec ""+ unionPath+ "": tmpPath ""+ fsp2.getTmpPath()+ "", task path ""+ fsp2.getTaskOutputTempPath(),new Exception())","Utilities.LOG14535.info(""creating new paths "" + System.identityHashCode(fsp2) + "" for ""+ dirName+ "", childSpec ""+ unionPath+ "": tmpPath ""+ fsp2.getTmpPath()+ "", task path ""+ fsp2.getTaskOutputTempPath())"
"conf.set(""tez.queue.name"",null)","conf.unset(""tez.queue.name"")"
objectMapper.readerFor(DataSegment.class),objectMapper.reader(DataSegment.class)
objectMapper.readerFor(DataSegment.class),objectMapper.reader(DataSegment.class)
"createOrcWriterOptions(sourceOi,conf,cacheWriter,allocSize)","createOrcWriterOptions(oi,conf,cacheWriter,allocSize)"
this.aliasToCTEs.containsKey(alias),this.aliasToCTEs.containsKey(tabIdName)
PointLookupOptimizer.class,PartitionColumnsSeparator.class
"columnType.equalsIgnoreCase(""long"")","columnType.equalsIgnoreCase(""long"") || columnType.equalsIgnoreCase(""tinyint"") || columnType.equalsIgnoreCase(""smallint"")|| columnType.equalsIgnoreCase(""int"")|| columnType.equalsIgnoreCase(""bigint"")"
"columnType.equalsIgnoreCase(""double"")","columnType.equalsIgnoreCase(""double"") || columnType.equalsIgnoreCase(""float"")"
"columnType.equalsIgnoreCase(""string"")","columnType.equalsIgnoreCase(""string"") || columnType.toLowerCase().startsWith(""char"") || columnType.toLowerCase().startsWith(""varchar"")"
"columnType.equalsIgnoreCase(""date"")","columnType.equalsIgnoreCase(""date"") || columnType.equalsIgnoreCase(""timestamp"")"
"new Interval(timeList.get(0).getValue().getMinTime().getMillis(),timeList.get(0).getValue().getMaxTime().getMillis())","new Interval(timeList.get(0).getValue().getMinTime().getMillis(),timeList.get(0).getValue().getMaxTime().getMillis(),ISOChronology.getInstanceUTC())"
"new Interval(startTime,endTime)","new Interval(startTime,endTime,ISOChronology.getInstanceUTC())"
"new Interval(startTime,endTime)","new Interval(startTime,endTime,ISOChronology.getInstanceUTC())"
"props.setProperty(JdbcConnectionParams.PROPERTY_URL,url)","props.setProperty(JdbcConnectionParams.PROPERTY_URL,saveUrl)"
timeout=5000,timeout=10000
timeout=5000,timeout=10000
eq(0),eq(0L)
"(t instanceof MetaException) && t.getMessage().matches(""(?s).*(JDO[a-zA-Z]*|TProtocol|TTransport)Exception.*"")","(t instanceof MetaException) && t.getMessage().matches(""(?s).*(JDO[a-zA-Z]*|TProtocol|TTransport)Exception.*"") && !t.getMessage().contains(""java.sql.SQLIntegrityConstraintViolationException"")"
found.size() == 1,found.size() >= 1
"RexUtil.simplify(rexBuilder,node)","HiveRexUtil.simplify(rexBuilder,node)"
"RexUtil.simplify(rexBuilder,node)","HiveRexUtil.simplify(rexBuilder,node)"
"cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,bd.scale(),unscaled.toString().length())","cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,unscaled.toString().length(),bd.scale())"
"new TaskStatusUpdateEvent(counters,progress,stats)","new TaskStatusUpdateEvent(counters,progress,stats,true)"
dests.size() == 1,dests.size() == 1 && joinTree.getNoOuterJoin()
"HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)","HiveConf.setLongVar(jobConf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)"
matcher.group(2),matcher.group(1)
"new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable)","new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable,false)"
"new UDFArgumentTypeException(2,""The first and seconds arguments of function NLV should have the same type, "" + ""but they are different: \"""" + arguments[0].getTypeName() + ""\"" and \""""+ arguments[1].getTypeName()+ ""\"""")","new UDFArgumentTypeException(1,""The first and seconds arguments of function NLV should have the same type, "" + ""but they are different: \"""" + arguments[0].getTypeName() + ""\"" and \""""+ arguments[1].getTypeName()+ ""\"""")"
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString(),HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString(),HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()
saHooks != null,saHooks != null && !saHooks.isEmpty()
new String(text.getBytes()),"new String(text.getBytes(),0,text.getLength())"
cached.get(columnNames),cached.get(key)
VectorizationContext.isStringFamily(outputType),"VectorizationContext.isStringFamily(outputType) || outputType.equalsIgnoreCase(""binary"")"
NumberFormatException nfe,Exception e
new ArrayList<Object>(),new ArrayList<Object>(literalList.size())
bufferSize != minAllocSize,bufferSize < minAllocSize
arguments[2],arguments[1]
arguments[2],arguments[1]
annotation == OriginalType.MAP,annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
annotation == OriginalType.MAP,annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
rowsRet <= 0,rowsRet <= 0 || work.getLimit() == totalRows
rowsRet <= 0,rowsRet <= 0 || work.getLimit() == totalRows
field.getFieldName().equals(s),field.getFieldName().equalsIgnoreCase(s)
field.getFieldName().equals(s),field.getFieldName().equalsIgnoreCase(s)
left.getFieldName().equals(right.getFieldName()),left.getFieldName().equalsIgnoreCase(right.getFieldName())
left.getFieldName().equals(right.getFieldName()),left.getFieldName().equalsIgnoreCase(right.getFieldName())
targetCondn == null,targetCondn == null || (nodeCondn.size() != targetCondn.size())
targetCondn == null,targetCondn == null || (nodeCondn.size() != targetCondn.size())
"HMSHANDLERATTEMPTS(""hive.hmshandler.retry.attempts"",1,""The number of times to retry a HMSHandler call if there were a connection error."")","HMSHANDLERATTEMPTS(""hive.hmshandler.retry.attempts"",10,""The number of times to retry a HMSHandler call if there were a connection error."")"
"j.getConfiguration().get(""mapred.task.id"","""").equals("""") && !(""true"".equals(j.getConfiguration().get(""pig.illustrating"")))","j.getConfiguration().get(""pig.job.converted.fetch"","""").equals("""") && j.getConfiguration().get(""mapred.task.id"","""").equals("""") && !(""true"".equals(j.getConfiguration().get(""pig.illustrating"")))"
"new SemanticException(generateErrorMessage(tabref,""Schema of both sides of union should match: field "" + field + "":""+ "" appears on the left side of the UNION at column position: ""+ getPositionFromInternalName(lInfo.getInternalName())+ "", and on the right side of the UNION at column position: ""+ getPositionFromInternalName(rInfo.getInternalName())+ "". Column positions should match for a UNION""))","new OptiqSemanticException(generateErrorMessage(tabref,""Schema of both sides of union should match: field "" + field + "":""+ "" appears on the left side of the UNION at column position: ""+ getPositionFromInternalName(lInfo.getInternalName())+ "", and on the right side of the UNION at column position: ""+ getPositionFromInternalName(rInfo.getInternalName())+ "". Column positions should match for a UNION""))"
"new SemanticException(generateErrorMessage(tabref,""Schema of both sides of union should match: Column "" + field + "" is of type ""+ lInfo.getType().getTypeName()+ "" on first table and type ""+ rInfo.getType().getTypeName()+ "" on second table""))","new OptiqSemanticException(generateErrorMessage(tabref,""Schema of both sides of union should match: Column "" + field + "" is of type ""+ lInfo.getType().getTypeName()+ "" on first table and type ""+ rInfo.getType().getTypeName()+ "" on second table""))"
"new RuntimeException(""Invalid Column Reference: "" + grpbyExpr.dump())","new OptiqSemanticException(""Invalid Column Reference: "" + grpbyExpr.dump())"
"Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx)","Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx,false)"
"ss.getAuthorizerV2().checkPrivileges(type,Arrays.asList(commandObj),null)","ss.getAuthorizerV2().checkPrivileges(type,Arrays.asList(commandObj),null,null)"
reducerCount=5,reducerCount=1
"sessionConf.get(""tez.queue.name"") != null","sessionConf != null && sessionConf.get(""tez.queue.name"") != null"
eq(true),eq(false)
i > stripeStats.size(),i >= stripeStats.size()
"HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT(""hive.server2.async.exec.shutdown.timeout"",10L)","HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT(""hive.server2.async.exec.shutdown.timeout"",10)"
"new AuthenticationException(""Error validating LDAP user"")","new AuthenticationException(""Error validating LDAP user"",e)"
originalValue != null,"originalValue != null && !originalValue.equals(""-1"")"
2,130
mapJoinTables != null,(this.getExecContext().getLocalWork() != null && this.getExecContext().getLocalWork().getInputFileChangeSensitive()) && mapJoinTables != null
new HiveTableTypeMapping(),new ClassicTableTypeMapping()
"endFunction(""get_column_statistics_by_table: "",statsObj != null)","endFunction(""get_column_statistics_by_table: "",statsObj != null,null)"
"endFunction(""get_column_statistics_by_partition: "",statsObj != null)","endFunction(""get_column_statistics_by_partition: "",statsObj != null,null)"
"endFunction(""write_column_statistics: "",ret != false)","endFunction(""write_column_statistics: "",ret != false,null)"
"endFunction(""write_partition_column_statistics: "",ret != false)","endFunction(""write_partition_column_statistics: "",ret != false,null)"
"endFunction(""delete_column_statistics_by_partition: "",ret != false)","endFunction(""delete_column_statistics_by_partition: "",ret != false,null)"
"endFunction(""delete_column_statistics_by_table: "",ret != false)","endFunction(""delete_column_statistics_by_table: "",ret != false,null)"
"getReduceValuesForReduceSinkNoMapAgg(parseInfo,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)","getReduceValuesForReduceSinkNoMapAgg(parseInfo,destination,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)"
part.getDataLocation(),part.getPartitionPath()
part.getDataLocation(),part.getPartitionPath()
tblObj.getDataLocation(),tblObj.getPath()
tblObj.getDataLocation(),tblObj.getPath()
new Path(tblDesc.getLocation()),"new Path(tblDesc.getLocation(),Warehouse.makePartPath(addPartitionDesc.getPartSpec()))"
"RCFileMergeMapper.jobClose(outputPath,noName,job,console)","RCFileMergeMapper.jobClose(outputPath,success,job,console)"
true_parts.addAll(Hive.get().getPartitions(tab)),unkn_parts.addAll(Hive.get().getPartitions(tab))
true_parts.addAll(Hive.get().getPartitions(tab)),unkn_parts.addAll(Hive.get().getPartitions(tab))
mjCtx.getOldMapJoin() == null,mjCtx.getOldMapJoin() == null || setReducer
mjCtx.getOldMapJoin() == null,mjCtx.getOldMapJoin() == null || setReducer
this.mrwork.getHadoopSupportsSplittable(),!this.mrwork.getHadoopSupportsSplittable()
!isUDTF && child.getChildCount() > 2,!isInTransform && !isUDTF && child.getChildCount() > 2
FileSystem.getLocal(conf).delete(localScratchDir),"FileSystem.getLocal(conf).delete(localScratchDir,true)"
p.getFileSystem(conf).delete(p),"p.getFileSystem(conf).delete(p,true)"
rj.mapProgress(),rj.reduceProgress()
rj.mapProgress(),rj.reduceProgress()
s.toString().toUpperCase(),s.toString().toLowerCase()
s.toString().toUpperCase(),s.toString().toLowerCase()
!regex.equals(lastRegex),!regex.equals(lastRegex) || p == null
!regex.equals(lastRegex),!regex.equals(lastRegex) || p == null
!regex.equals(lastRegex),!regex.equals(lastRegex) || p == null
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,Operator<? extends Serializable>>","LinkedHashMap<String,Operator<? extends Serializable>>"
"HashMap<String,HashMap<String,ASTNode>>","LinkedHashMap<String,LinkedHashMap<String,ASTNode>>"
"HashMap<String,HashMap<String,ASTNode>>","LinkedHashMap<String,LinkedHashMap<String,ASTNode>>"
"HashMap<String,ASTNode>","LinkedHashMap<String,ASTNode>"
"HashMap<String,ASTNode>","LinkedHashMap<String,ASTNode>"
"HashMap<String,ASTNode>","LinkedHashMap<String,ASTNode>"
"HashMap<String,ASTNode>","LinkedHashMap<String,ASTNode>"
"HashMap<String,ASTNode>","LinkedHashMap<String,ASTNode>"
tabAlias.equals(tableAlias),tabAlias.equalsIgnoreCase(tableAlias)
tabAlias.equals(tableAlias),tabAlias.equalsIgnoreCase(tableAlias)
Objects.isNull(value),!Objects.isNull(value)
Objects.isNull(value),!Objects.isNull(value)
Objects.isNull(value),!Objects.isNull(value)
Objects.isNull(value),!Objects.isNull(value)
rackIdToNodes.get(rid),"rackIdToNodes.getOrDefault(rid,Collections.emptyList())"
rackIdToNodes.get(rid),"rackIdToNodes.getOrDefault(rid,Collections.emptyList())"
"makeResponse(new AuthorizationException(""UI request '"" + op + ""' for '""+ user+ ""' user is not authorized""),containerRequestContext,401)","makeResponse(new AuthorizationException(""UI request '"" + op + ""' for '""+ user+ ""' user is not authorized""),containerRequestContext,403)"
"uiAclHandler.permit(reqContext,op,conf)","uiAclHandler.permit(reqContext,op,topoConf)"
"makeResponse(new AuthorizationException(""UI request '"" + op + ""' for '""+ user+ ""' user is not authorized""),containerRequestContext,401)","makeResponse(new AuthorizationException(""UI request '"" + op + ""' for '""+ user+ ""' user is not authorized""),containerRequestContext,403)"
"uiAclHandler.permit(reqContext,op,conf)","uiAclHandler.permit(reqContext,op,topoConf)"
System.currentTimeMillis(),Time.currentTimeMillis()
System.currentTimeMillis(),Time.currentTimeMillis()
System.currentTimeMillis(),Time.currentTimeMillis()
System.currentTimeMillis(),Time.currentTimeMillis()
!dynamicState.changingBlobs.isEmpty(),dynamicState.changingBlobs.isEmpty()
10,74
DelimitedRecordHiveMapper.class,JsonRecordHiveMapper.class
DelimitedRecordHiveMapper.class,JsonRecordHiveMapper.class
verify(collector),"verify(collector,never())"
9,9
"new FilterConfiguration(filterParams,filterClass)","new FilterConfiguration(filterClass,filterParams)"
_availMemory + amount,_availCPU + amount
_availMemory + amount,_availCPU + amount
tupleInfo.getMessageId() != null,tupleInfo != null && tupleInfo.getMessageId() != null
2,10
"""Interrupted when attempting to close writer for end point: "" + ep","""Interrupted when attempting to close writer for end point: "" + eldest"
"""Interrupted when attempting to close writer for end point: "" + ep","""Interrupted when attempting to close writer for end point: "" + eldest"
Utils.isZkAuthenticationConfiguredStormServer(topoConf),Utils.isZkAuthenticationConfiguredTopology(topoConf)
Utils.isZkAuthenticationConfiguredStormServer(topoConf),Utils.isZkAuthenticationConfiguredTopology(topoConf)
executorCount--,workerCount--
ConfigUtils.absoluteHealthCheckDir(stormConf),ConfigUtils.absoluteStormLocalDir(stormConf)
ConfigUtils.absoluteHealthCheckDir(stormConf),ConfigUtils.absoluteStormLocalDir(stormConf)
9,41
Thread.sleep(10),Thread.sleep(100)
initial=10,initial=100
max=20,max=2000
0,1
Utils.class,KeySequenceNumber.class
Utils.class,BlobStoreUtils.class
tickTupleInterval == 0,flushIntervalSecs == 0
tickTupleInterval == 0,flushIntervalSecs == 0
batch.isEmpty(),null == batch || batch.isEmpty()
"_barrier.waitFor(nextSequence,10,TimeUnit.MILLISECONDS)","_barrier.waitFor(nextSequence,1000,TimeUnit.MILLISECONDS)"
"Utils.deserialize(_boltSer,IBatchBolt.class)","Utils.javaDeserialize(_boltSer,IBatchBolt.class)"
"Utils.deserialize(_boltSer,IBatchBolt.class)","Utils.javaDeserialize(_boltSer,IBatchBolt.class)"
"LOG.warn(""discarding {} messages because the Netty client to {} is being closed"",numMessages,dstAddressPrefixedName)","LOG.error(""discarding {} messages because the Netty client to {} is being closed"",numMessages,dstAddressPrefixedName)"
"LOG.warn(""discarding {} messages because the Netty client to {} is being closed"",numMessages,dstAddressPrefixedName)","LOG.error(""discarding {} messages because the Netty client to {} is being closed"",numMessages,dstAddressPrefixedName)"
"LOG.warn(""failed to send {} messages to {}: {}"",numMessages,dstAddressPrefixedName,future.getCause())","LOG.error(""failed to send {} messages to {}: {}"",numMessages,dstAddressPrefixedName,future.getCause())"
"LOG.warn(""failed to send {} messages to {}: {}"",numMessages,dstAddressPrefixedName,future.getCause())","LOG.error(""failed to send {} messages to {}: {}"",numMessages,dstAddressPrefixedName,future.getCause())"
args[5],args[4]
offset=e.startOffset,_emittedToOffset=e.startOffset
"new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)))","new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)))"
"LOG.info(""Halting process: ShellBolt died."",exception)","LOG.error(""Halting process: ShellBolt died."",exception)"
"LOG.info(""Halting process: ShellBolt died."",exception)","LOG.error(""Halting process: ShellBolt died."",exception)"
"new UnsupportedOperationException(""Command not found in spout message: "" + shellMsg)","new IllegalArgumentException(""Command not found in spout message: "" + shellMsg)"
"new UnsupportedOperationException(""Command not found in bolt message: "" + shellMsg)","new IllegalArgumentException(""Command not found in bolt message: "" + shellMsg)"
lastCompletedOffset != lastCompletedOffset,_committedTo != lastCompletedOffset
lastCompletedOffset != lastCompletedOffset,_committedTo != lastCompletedOffset
Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS)),"Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS),1)"
new StormClientHandler(client),new StormClientErrorHandler(client.name())
Number.class,Map.class
Number.class,Map.class
msg.offset(),msg.nextOffset()
msg.offset(),msg.nextOffset()
ChannelBuffers.dynamicBuffer(),ChannelBuffers.buffer(2)
"public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } ","public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } "
"public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } ","public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } "
"public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } ","public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } "
"public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } ","public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } "
this.supervisors,this.hostToId
Object deserialize(byte[] b); ,T deserialize(byte[] b); 
"Map<List<Object>,Object>","Map<List<Object>,T>"
"COUNT_DATABASE.put(key,val)","COUNT_DATABASE.put(key,newVal)"
"COUNT_DATABASE.put(key,val)","COUNT_DATABASE.put(key,newVal)"
servers.isEmpty(),servers == null || servers.isEmpty()
servers.isEmpty(),servers == null || servers.isEmpty()
_maxTransactionActive=0,_maxTransactionActive=1
new RuntimeException(e),"new RuntimeException(""Error when launching multilang subprocess"",e)"
new RuntimeException(e),"new RuntimeException(""Error during multilang processing"",e)"
"new BasicAWSSessionCredentials(accessKey,secretKey,sessionToken)","new BasicSessionCredentials(accessKey,secretKey,sessionToken)"
new ObjectTagging(),new ObjectTagging(new ArrayList<Tag>())
config.getCredentialsProvider() == null,config.getCredentialsProvider() != null
activeFrom.getTime(),expiresOn.getTime()
activeFrom.getTime(),expiresOn.getTime()
expiresOn == null,activeFrom == null
expiresOn == null,activeFrom == null
expiresOn.getTime(),activeFrom.getTime()
expiresOn.getTime(),activeFrom.getTime()
activeFrom.getTime(),expiresOn.getTime()
activeFrom.getTime(),expiresOn.getTime()
expiresOn == null,activeFrom == null
expiresOn == null,activeFrom == null
expiresOn.getTime(),activeFrom.getTime()
expiresOn.getTime(),activeFrom.getTime()
Map.class,Object.class
Map.class,Object.class
"Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)","Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)"
"Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)","Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)"
buffer.indexOf(partToMatch),"buffer.indexOf(partToMatch,indexOf + replacement.length())"
options.getLambdaRole(),optionsOverride.getLambdaRole()
options.getLambdaRole(),optionsOverride.getLambdaRole()
options.getLambdaRole(),optionsOverride.getLambdaRole()
options.getLambdaRole(),optionsOverride.getLambdaRole()
"LOG.error(""Unable to unmarshall exception content"",e)","LOG.info(""Unable to unmarshall exception content"",e)"
"LOG.error(""Unable to unmarshall exception content"",e)","LOG.info(""Unable to unmarshall exception content"",e)"
"LOG.error(""Unable to read HTTP response content"",e)","LOG.info(""Unable to read HTTP response content"",e)"
"LOG.error(""Unable to read HTTP response content"",e)","LOG.info(""Unable to read HTTP response content"",e)"
"LOG.error(""Unable to parse HTTP response content"",e)","LOG.info(""Unable to parse HTTP response content"",e)"
"LOG.error(""Unable to parse HTTP response content"",e)","LOG.info(""Unable to parse HTTP response content"",e)"
getSSLContext().getSocketFactory().createSocket(),"getSSLContext().getSocketFactory().createSocket(arg0,arg1,arg2,true)"
MAX_USER_NAME_LENGTH=20,MAX_USER_NAME_LENGTH=64
articleMgmtService.addArticle(requestJSONObject),articleMgmtService.addArticle(article)
"new ConsoleRenderer(context,""start.ftl"")","new SkinRenderer(context,""start.ftl"")"
Latkes.getStaticPath(),Latkes.getStaticServePath()
Latkes.getStaticPath(),Latkes.getStaticServePath()
2,10
"a.getBoolean(R.styleable.DragSortListView_use_default_controller,false)","a.getBoolean(R.styleable.DragSortListView_use_default_controller,true)"
position < mSrcDragPos,position <= mSrcDragPos
"LOGGER.warn(""{} - Failed to execute isValid() for connection, configure connection test query. ({})"",poolName,e.getMessage())","LOGGER.error(""{} - Failed to execute isValid() for connection, configure connection test query. ({})"",poolName,e.getMessage())"
"LOGGER.warn(""{} - Failed to execute isValid() for connection, configure connection test query. ({})"",poolName,e.getMessage())","LOGGER.error(""{} - Failed to execute isValid() for connection, configure connection test query. ({})"",poolName,e.getMessage())"
"LOGGER.warn(""{} - Failed to execute connection test query. ({})"",poolName,e.getMessage())","LOGGER.error(""{} - Failed to execute connection test query. ({})"",poolName,e.getMessage())"
"LOGGER.warn(""{} - Failed to execute connection test query. ({})"",poolName,e.getMessage())","LOGGER.error(""{} - Failed to execute connection test query. ({})"",poolName,e.getMessage())"
connectionTimeout / 2,connectionTimeout / 4
"clockSource.elapsedMillis(startTime,now)",clockSource.elapsedMillis(startTime)
Thread.sleep(1200),Thread.sleep(2000)
"LOGGER.debug(""{} - Reset ({}) on connection {}"",resetBits != 0 ? stringFromResetBits(resetBits) : ""nothing"",poolEntry.connection)","LOGGER.debug(""{} - Reset ({}) on connection {}"",poolName,resetBits != 0 ? stringFromResetBits(resetBits) : ""nothing"",poolEntry.connection)"
IllegalStateException ise,IllegalArgumentException ise
IllegalStateException ise,IllegalArgumentException ise
"public abstract class AbstractHikariConfig implements HikariConfigMBean {   private static final Logger LOGGER=LoggerFactory.getLogger(HikariConfig.class);   private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis(30);   private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis(5);   private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis(10);   private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis(30);   private static int poolNumber;   private static boolean unitTest;   private volatile long connectionTimeout;   private volatile long validationTimeout;   private volatile long idleTimeout;   private volatile long leakDetectionThreshold;   private volatile long maxLifetime;   private volatile int maxPoolSize;   private volatile int minIdle;   private String catalog;   private String connectionCustomizerClassName;   private String connectionInitSql;   private String connectionTestQuery;   private String dataSourceClassName;   private String dataSourceJndiName;   private String driverClassName;   private String jdbcUrl;   private String password;   private String poolName;   private String transactionIsolationName;   private String username;   private boolean isAutoCommit;   private boolean isReadOnly;   private boolean isInitializationFailFast;   private boolean isIsolateInternalQueries;   private boolean isRegisterMbeans;   private boolean isAllowPoolSuspension;   private DataSource dataSource;   private Properties dataSourceProperties;   private IConnectionCustomizer customizer;   private ThreadFactory threadFactory;   private Object metricRegistry;   private Object healthCheckRegistry;   private Properties healthCheckProperties;   /**   * Default constructor  */   public AbstractHikariConfig(){     dataSourceProperties=new Properties();     healthCheckProperties=new Properties();     connectionTimeout=CONNECTION_TIMEOUT;     validationTimeout=VALIDATION_TIMEOUT;     idleTimeout=IDLE_TIMEOUT;     isAutoCommit=true;     isInitializationFailFast=true;     minIdle=-1;     maxPoolSize=10;     maxLifetime=MAX_LIFETIME;     customizer=new IConnectionCustomizer(){       @Override public void customize(      Connection connection) throws SQLException {       }     } ;     String systemProp=System.getProperty(""hikaricp.configurationFile"");     if (systemProp != null) {       loadProperties(systemProp);     }   }   /**   * Construct a HikariConfig from the specified properties object.  * @param properties the name of the property file  */   public AbstractHikariConfig(  Properties properties){     this();     PropertyBeanSetter.setTargetFromProperties(this,properties);   }   /**   * Construct a HikariConfig from the specified property file name.  <code>propertyFileName</code> will first be treated as a path in the file-system, and if that fails the  ClassLoader.getResourceAsStream(propertyFileName) will be tried.  * @param propertyFileName the name of the property file  */   public AbstractHikariConfig(  String propertyFileName){     this();     loadProperties(propertyFileName);   }   /**   * Get the default catalog name to be set on connections.  * @return the default catalog name  */   public String getCatalog(){     return catalog;   }   /**   * Set the default catalog name to be set on connections.  * @param catalog the catalog name, or null  */   public void setCatalog(  String catalog){     this.catalog=catalog;   }   /**   * Get the name of the connection customizer class to instantiate and execute on all new connections.  * @return the name of the customizer class, or null  */   @Deprecated public String getConnectionCustomizerClassName(){     return connectionCustomizerClassName;   }   /**   * Set the name of the connection customizer class to instantiate and execute on all new connections.  * @param connectionCustomizerClassName the name of the customizer class  */   @Deprecated public void setConnectionCustomizerClassName(  String connectionCustomizerClassName){     this.connectionCustomizerClassName=connectionCustomizerClassName;     LOGGER.warn(""The connectionCustomizerClassName property has been deprecated and may be removed in a future release"");   }   /**   * Get the customizer instance specified by the user.  * @return an instance of IConnectionCustomizer  */   @Deprecated public IConnectionCustomizer getConnectionCustomizer(){     return customizer;   }   /**   * Set the connection customizer to be used by the pool.  * @param customizer an instance of IConnectionCustomizer  */   @Deprecated public void setConnectionCustomizer(  IConnectionCustomizer customizer){     this.customizer=customizer;     LOGGER.warn(""The connectionCustomizer property has been deprecated and may be removed in a future release"");   }   /**   * Get the SQL query to be executed to test the validity of connections.  * @return the SQL query string, or null   */   public String getConnectionTestQuery(){     return connectionTestQuery;   }   /**   * Set the SQL query to be executed to test the validity of connections. Using the JDBC4 <code>Connection.isValid()</code> method to test connection validity can be more efficient on some databases and is recommended.  See  {@link HikariConfig#setJdbc4ConnectionTest(boolean)}.  * @param connectionTestQuery a SQL query string  */   public void setConnectionTestQuery(  String connectionTestQuery){     this.connectionTestQuery=connectionTestQuery;   }   /**   * Get the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  * @return the SQL to execute on new connections, or null  */   public String getConnectionInitSql(){     return connectionInitSql;   }   /**   * Set the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  If this query fails, it will be treated as a failed connection attempt.  * @param connectionInitSql the SQL to execute on new connections  */   public void setConnectionInitSql(  String connectionInitSql){     this.connectionInitSql=connectionInitSql;   }   /**   * {@inheritDoc}   */   @Override public long getConnectionTimeout(){     return connectionTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setConnectionTimeout(  long connectionTimeoutMs){     if (connectionTimeoutMs == 0) {       this.connectionTimeout=Integer.MAX_VALUE;     }  else     if (connectionTimeoutMs < 1000) {       throw new IllegalArgumentException(""connectionTimeout cannot be less than 1000ms"");     }  else {       this.connectionTimeout=connectionTimeoutMs;     }   }   /**   * {@inheritDoc}   */   @Override public long getValidationTimeout(){     return validationTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setValidationTimeout(  long validationTimeoutMs){     if (validationTimeoutMs < 1000) {       throw new IllegalArgumentException(""validationTimeout cannot be less than 1000ms"");     }  else {       this.validationTimeout=validationTimeoutMs;     }   }   /**   * Get the  {@link DataSource} that has been explicitly specified to be wrapped by thepool.  * @return the {@link DataSource} instance, or null  */   public DataSource getDataSource(){     return dataSource;   }   /**   * Set a  {@link DataSource} for the pool to explicitly wrap.  This setter is notavailable through property file based initialization.  * @param dataSource a specific {@link DataSource} to be wrapped by the pool  */   public void setDataSource(  DataSource dataSource){     this.dataSource=dataSource;   }   public String getDataSourceClassName(){     return dataSourceClassName;   }   public void setDataSourceClassName(  String className){     this.dataSourceClassName=className;   }   public void addDataSourceProperty(  String propertyName,  Object value){     dataSourceProperties.put(propertyName,value);   }   public String getDataSourceJNDI(){     return this.dataSourceJndiName;   }   public void setDataSourceJNDI(  String jndiDataSource){     this.dataSourceJndiName=jndiDataSource;   }   public Properties getDataSourceProperties(){     return dataSourceProperties;   }   public void setDataSourceProperties(  Properties dsProperties){     dataSourceProperties.putAll(dsProperties);   }   public String getDriverClassName(){     return driverClassName;   }   public void setDriverClassName(  String driverClassName){     try {       Class<?> driverClass=this.getClass().getClassLoader().loadClass(driverClassName);       driverClass.newInstance();       this.driverClassName=driverClassName;     }  catch (    Exception e) {       throw new RuntimeException(""driverClassName specified class '"" + driverClassName + ""' could not be loaded"",e);     }   }   /**   * {@inheritDoc}   */   @Override public long getIdleTimeout(){     return idleTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setIdleTimeout(  long idleTimeoutMs){     if (idleTimeoutMs < 0) {       throw new IllegalArgumentException(""idleTimeout cannot be negative"");     }     this.idleTimeout=idleTimeoutMs;   }   public String getJdbcUrl(){     return jdbcUrl;   }   public void setJdbcUrl(  String jdbcUrl){     this.jdbcUrl=jdbcUrl;   }   /**   * Get the default auto-commit behavior of connections in the pool.  * @return the default auto-commit behavior of connections  */   public boolean isAutoCommit(){     return isAutoCommit;   }   /**   * Set the default auto-commit behavior of connections in the pool.  * @param isAutoCommit the desired auto-commit default for connections  */   public void setAutoCommit(  boolean isAutoCommit){     this.isAutoCommit=isAutoCommit;   }   /**   * Get the pool suspension behavior (allowed or disallowed).  * @return the pool suspension behavior  */   public boolean isAllowPoolSuspension(){     return isAllowPoolSuspension;   }   /**   * Set whether or not pool suspension is allowed.  There is a performance impact when pool suspension is enabled.  Unless you need it (for a redundancy system for example) do not enable it.  * @param isAllowPoolSuspension the desired pool suspension allowance  */   public void setAllowPoolSuspension(  boolean isAllowPoolSuspension){     this.isAllowPoolSuspension=isAllowPoolSuspension;   }   /**   * Get whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @return whether or not initialization should fail on error immediately  */   public boolean isInitializationFailFast(){     return isInitializationFailFast;   }   /**   * Set whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @param failFast true if the pool should fail if the minimum connections cannot be created  */   public void setInitializationFailFast(  boolean failFast){     isInitializationFailFast=failFast;   }   public boolean isIsolateInternalQueries(){     return isIsolateInternalQueries;   }   public void setIsolateInternalQueries(  boolean isolate){     this.isIsolateInternalQueries=isolate;   }   @Deprecated public boolean isJdbc4ConnectionTest(){     return false;   }   @Deprecated public void setJdbc4ConnectionTest(  boolean useIsValid){     LOGGER.warn(""The jdbcConnectionTest property is now deprecated, see the documentation for connectionTestQuery"");   }   /**   * Get the Codahale MetricRegistry, could be null.  * @return the codahale MetricRegistry instance  */   public Object getMetricRegistry(){     return metricRegistry;   }   /**   * Set a Codahale MetricRegistry to use for HikariCP.  * @param metricRegistry the Codahale MetricRegistry to set  */   public void setMetricRegistry(  Object metricRegistry){     if (metricRegistry != null) {       if (metricRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           metricRegistry=(MetricRegistry)initCtx.lookup((String)metricRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(metricRegistry instanceof MetricRegistry)) {         throw new IllegalArgumentException(""Class must be an instance of com.codahale.metrics.MetricRegistry"");       }     }     this.metricRegistry=metricRegistry;   }   /**   * Get the Codahale HealthCheckRegistry, could be null.  * @return the Codahale HealthCheckRegistry instance  */   public Object getHealthCheckRegistry(){     return healthCheckRegistry;   }   /**   * Set a Codahale HealthCheckRegistry to use for HikariCP.  * @param healthCheckRegistry the Codahale HealthCheckRegistry to set  */   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       if (healthCheckRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           healthCheckRegistry=(HealthCheckRegistry)initCtx.lookup((String)healthCheckRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(healthCheckRegistry instanceof HealthCheckRegistry)) {         throw new IllegalArgumentException(""Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry"");       }     }     this.healthCheckRegistry=healthCheckRegistry;   }   public Properties getHealthCheckProperties(){     return healthCheckProperties;   }   public void setHealthCheckProperties(  Properties healthCheckProperties){     this.healthCheckProperties.putAll(healthCheckProperties);   }   public void addHealthCheckProperty(  String key,  String value){     healthCheckProperties.setProperty(key,value);   }   public boolean isReadOnly(){     return isReadOnly;   }   public void setReadOnly(  boolean readOnly){     this.isReadOnly=readOnly;   }   public boolean isRegisterMbeans(){     return isRegisterMbeans;   }   public void setRegisterMbeans(  boolean register){     this.isRegisterMbeans=register;   }   /**   * {@inheritDoc}   */   @Override public long getLeakDetectionThreshold(){     return leakDetectionThreshold;   }   /**   * {@inheritDoc}   */   @Override public void setLeakDetectionThreshold(  long leakDetectionThresholdMs){     this.leakDetectionThreshold=leakDetectionThresholdMs;   }   /**   * {@inheritDoc}   */   @Override public long getMaxLifetime(){     return maxLifetime;   }   /**   * {@inheritDoc}   */   @Override public void setMaxLifetime(  long maxLifetimeMs){     this.maxLifetime=maxLifetimeMs;   }   /**   * {@inheritDoc}   */   @Override public int getMaximumPoolSize(){     return maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public void setMaximumPoolSize(  int maxPoolSize){     if (maxPoolSize < 1) {       throw new IllegalArgumentException(""maxPoolSize cannot be less than 1"");     }     this.maxPoolSize=maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public int getMinimumIdle(){     return minIdle;   }   /**   * {@inheritDoc}   */   @Override public void setMinimumIdle(  int minIdle){     if (minIdle < 0) {       throw new IllegalArgumentException(""minimumIdle cannot be negative"");     }     this.minIdle=minIdle;   }   /**   * Get the default password to use for DataSource.getConnection(username, password) calls.  * @return the password  */   public String getPassword(){     return password;   }   /**   * Set the default password to use for DataSource.getConnection(username, password) calls.  * @param password the password  */   public void setPassword(  String password){     this.password=password;   }   /**   * {@inheritDoc}   */   @Override public String getPoolName(){     return poolName;   }   /**   * Set the name of the connection pool.  This is primarily used for the MBean to uniquely identify the pool configuration.  * @param poolName the name of the connection pool to use  */   public void setPoolName(  String poolName){     this.poolName=poolName;   }   public String getTransactionIsolation(){     return transactionIsolationName;   }   /**   * Set the default transaction isolation level.  The specified value is the constant name from the <code>Connection</code> class, eg.  <code>TRANSACTION_REPEATABLE_READ</code>.  * @param isolationLevel the name of the isolation level  */   public void setTransactionIsolation(  String isolationLevel){     this.transactionIsolationName=isolationLevel;   }   /**   * Get the default username used for DataSource.getConnection(username, password) calls.  * @return the username  */   public String getUsername(){     return username;   }   /**   * Set the default username used for DataSource.getConnection(username, password) calls.  * @param username the username  */   public void setUsername(  String username){     this.username=username;   }   /**   * Get the thread factory used to create threads.  * @return the thread factory (may be null, in which case the default thread factory is used)  */   public ThreadFactory getThreadFactory(){     return threadFactory;   }   /**   * Set the thread factory to be used to create threads.  * @param threadFactory the thread factory (setting to null causes the default thread factory to be used)  */   public void setThreadFactory(  ThreadFactory threadFactory){     this.threadFactory=threadFactory;   }   public void validate(){     Logger logger=LoggerFactory.getLogger(getClass());     validateNumerics();     if (connectionCustomizerClassName != null) {       try {         getClass().getClassLoader().loadClass(connectionCustomizerClassName);       }  catch (      Exception e) {         logger.warn(""connectionCustomizationClass specified class '"" + connectionCustomizerClassName + ""' could not be loaded"",e);         connectionCustomizerClassName=null;       }     }     if (driverClassName != null && jdbcUrl == null) {       logger.error(""when specifying driverClassName, jdbcUrl must also be specified"");       throw new IllegalStateException(""when specifying driverClassName, jdbcUrl must also be specified"");     }  else     if (driverClassName != null && dataSourceClassName != null) {       logger.error(""both driverClassName and dataSourceClassName are specified, one or the other should be used"");       throw new IllegalStateException(""both driverClassName and dataSourceClassName are specified, one or the other should be used"");     }  else     if (jdbcUrl != null) {     }  else     if (dataSource == null && dataSourceClassName == null) {       logger.error(""one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified"");       throw new IllegalArgumentException(""one of either dataSource or dataSourceClassName must be specified"");     }  else     if (dataSource != null && dataSourceClassName != null) {       logger.warn(""both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName"");     }     if (transactionIsolationName != null) {       UtilityElf.getTransactionIsolation(transactionIsolationName);     }     if (poolName == null) {       poolName=""HikariPool-"" + poolNumber++;     }     if (LOGGER.isDebugEnabled() || unitTest) {       logConfiguration();     }   }   private void validateNumerics(){     Logger logger=LoggerFactory.getLogger(getClass());     if (validationTimeout > connectionTimeout && connectionTimeout != 0) {       logger.warn(""validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout."");       validationTimeout=connectionTimeout;     }     if (minIdle < 0 || minIdle > maxPoolSize) {       minIdle=maxPoolSize;     }     if (maxLifetime < 0) {       logger.error(""maxLifetime cannot be negative."");       throw new IllegalArgumentException(""maxLifetime cannot be negative."");     }  else     if (maxLifetime > 0 && maxLifetime < TimeUnit.SECONDS.toMillis(30)) {       logger.warn(""maxLifetime is less than 30000ms, using default {}ms."",MAX_LIFETIME);       maxLifetime=MAX_LIFETIME;     }     if (idleTimeout != 0 && idleTimeout < TimeUnit.SECONDS.toMillis(10)) {       logger.warn(""idleTimeout is less than 10000ms, using default {}ms."",IDLE_TIMEOUT);       idleTimeout=IDLE_TIMEOUT;     }  else     if (idleTimeout > maxLifetime && maxLifetime > 0) {       logger.warn(""idleTimeout is greater than maxLifetime, setting to maxLifetime."");       idleTimeout=maxLifetime;     }     if (leakDetectionThreshold != 0 && leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) && !unitTest) {       logger.warn(""leakDetectionThreshold is less than 2000ms, setting to minimum 2000ms."");       leakDetectionThreshold=2000L;     }   }   private void logConfiguration(){     LOGGER.debug(""HikariCP pool {} configuration:"",poolName);     final Set<String> propertyNames=new TreeSet<String>(PropertyBeanSetter.getPropertyNames(HikariConfig.class));     for (    String prop : propertyNames) {       try {         Object value=PropertyBeanSetter.getProperty(prop,this);         if (""dataSourceProperties"".equals(prop)) {           Properties dsProps=PropertyBeanSetter.copyProperties(dataSourceProperties);           dsProps.setProperty(""password"",""<masked>"");           value=dsProps;         }         value=(prop.contains(""password"") ? ""<masked>"" : value);         LOGGER.debug((prop + ""................................................"").substring(0,32) + (value != null ? value : """"));       }  catch (      Exception e) {         continue;       }     }   }   abstract protected void loadProperties(  String propertyFileName);   public void copyState(  AbstractHikariConfig other){     for (    Field field : AbstractHikariConfig.class.getDeclaredFields()) {       if (!Modifier.isFinal(field.getModifiers())) {         field.setAccessible(true);         try {           field.set(other,field.get(this));         }  catch (        Exception e) {           throw new RuntimeException(""Exception copying HikariConfig state: "" + e.getMessage(),e);         }       }     }   } } ","public abstract class AbstractHikariConfig implements HikariConfigMXBean {   private static final Logger LOGGER=LoggerFactory.getLogger(HikariConfig.class);   private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis(30);   private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis(5);   private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis(10);   private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis(30);   private static int poolNumber;   private static boolean unitTest;   private volatile long connectionTimeout;   private volatile long validationTimeout;   private volatile long idleTimeout;   private volatile long leakDetectionThreshold;   private volatile long maxLifetime;   private volatile int maxPoolSize;   private volatile int minIdle;   private String catalog;   private String connectionCustomizerClassName;   private String connectionInitSql;   private String connectionTestQuery;   private String dataSourceClassName;   private String dataSourceJndiName;   private String driverClassName;   private String jdbcUrl;   private String password;   private String poolName;   private String transactionIsolationName;   private String username;   private boolean isAutoCommit;   private boolean isReadOnly;   private boolean isInitializationFailFast;   private boolean isIsolateInternalQueries;   private boolean isRegisterMbeans;   private boolean isAllowPoolSuspension;   private DataSource dataSource;   private Properties dataSourceProperties;   private IConnectionCustomizer customizer;   private ThreadFactory threadFactory;   private Object metricRegistry;   private Object healthCheckRegistry;   private Properties healthCheckProperties;   /**   * Default constructor  */   public AbstractHikariConfig(){     dataSourceProperties=new Properties();     healthCheckProperties=new Properties();     connectionTimeout=CONNECTION_TIMEOUT;     validationTimeout=VALIDATION_TIMEOUT;     idleTimeout=IDLE_TIMEOUT;     isAutoCommit=true;     isInitializationFailFast=true;     minIdle=-1;     maxPoolSize=10;     maxLifetime=MAX_LIFETIME;     customizer=new IConnectionCustomizer(){       @Override public void customize(      Connection connection) throws SQLException {       }     } ;     String systemProp=System.getProperty(""hikaricp.configurationFile"");     if (systemProp != null) {       loadProperties(systemProp);     }   }   /**   * Construct a HikariConfig from the specified properties object.  * @param properties the name of the property file  */   public AbstractHikariConfig(  Properties properties){     this();     PropertyBeanSetter.setTargetFromProperties(this,properties);   }   /**   * Construct a HikariConfig from the specified property file name.  <code>propertyFileName</code> will first be treated as a path in the file-system, and if that fails the  ClassLoader.getResourceAsStream(propertyFileName) will be tried.  * @param propertyFileName the name of the property file  */   public AbstractHikariConfig(  String propertyFileName){     this();     loadProperties(propertyFileName);   }   /**   * Get the default catalog name to be set on connections.  * @return the default catalog name  */   public String getCatalog(){     return catalog;   }   /**   * Set the default catalog name to be set on connections.  * @param catalog the catalog name, or null  */   public void setCatalog(  String catalog){     this.catalog=catalog;   }   /**   * Get the name of the connection customizer class to instantiate and execute on all new connections.  * @return the name of the customizer class, or null  */   @Deprecated public String getConnectionCustomizerClassName(){     return connectionCustomizerClassName;   }   /**   * Set the name of the connection customizer class to instantiate and execute on all new connections.  * @param connectionCustomizerClassName the name of the customizer class  */   @Deprecated public void setConnectionCustomizerClassName(  String connectionCustomizerClassName){     this.connectionCustomizerClassName=connectionCustomizerClassName;     LOGGER.warn(""The connectionCustomizerClassName property has been deprecated and may be removed in a future release"");   }   /**   * Get the customizer instance specified by the user.  * @return an instance of IConnectionCustomizer  */   @Deprecated public IConnectionCustomizer getConnectionCustomizer(){     return customizer;   }   /**   * Set the connection customizer to be used by the pool.  * @param customizer an instance of IConnectionCustomizer  */   @Deprecated public void setConnectionCustomizer(  IConnectionCustomizer customizer){     this.customizer=customizer;     LOGGER.warn(""The connectionCustomizer property has been deprecated and may be removed in a future release"");   }   /**   * Get the SQL query to be executed to test the validity of connections.  * @return the SQL query string, or null   */   public String getConnectionTestQuery(){     return connectionTestQuery;   }   /**   * Set the SQL query to be executed to test the validity of connections. Using the JDBC4 <code>Connection.isValid()</code> method to test connection validity can be more efficient on some databases and is recommended.  See  {@link HikariConfig#setJdbc4ConnectionTest(boolean)}.  * @param connectionTestQuery a SQL query string  */   public void setConnectionTestQuery(  String connectionTestQuery){     this.connectionTestQuery=connectionTestQuery;   }   /**   * Get the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  * @return the SQL to execute on new connections, or null  */   public String getConnectionInitSql(){     return connectionInitSql;   }   /**   * Set the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  If this query fails, it will be treated as a failed connection attempt.  * @param connectionInitSql the SQL to execute on new connections  */   public void setConnectionInitSql(  String connectionInitSql){     this.connectionInitSql=connectionInitSql;   }   /**   * {@inheritDoc}   */   @Override public long getConnectionTimeout(){     return connectionTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setConnectionTimeout(  long connectionTimeoutMs){     if (connectionTimeoutMs == 0) {       this.connectionTimeout=Integer.MAX_VALUE;     }  else     if (connectionTimeoutMs < 1000) {       throw new IllegalArgumentException(""connectionTimeout cannot be less than 1000ms"");     }  else {       this.connectionTimeout=connectionTimeoutMs;     }   }   /**   * {@inheritDoc}   */   @Override public long getValidationTimeout(){     return validationTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setValidationTimeout(  long validationTimeoutMs){     if (validationTimeoutMs < 1000) {       throw new IllegalArgumentException(""validationTimeout cannot be less than 1000ms"");     }  else {       this.validationTimeout=validationTimeoutMs;     }   }   /**   * Get the  {@link DataSource} that has been explicitly specified to be wrapped by thepool.  * @return the {@link DataSource} instance, or null  */   public DataSource getDataSource(){     return dataSource;   }   /**   * Set a  {@link DataSource} for the pool to explicitly wrap.  This setter is notavailable through property file based initialization.  * @param dataSource a specific {@link DataSource} to be wrapped by the pool  */   public void setDataSource(  DataSource dataSource){     this.dataSource=dataSource;   }   public String getDataSourceClassName(){     return dataSourceClassName;   }   public void setDataSourceClassName(  String className){     this.dataSourceClassName=className;   }   public void addDataSourceProperty(  String propertyName,  Object value){     dataSourceProperties.put(propertyName,value);   }   public String getDataSourceJNDI(){     return this.dataSourceJndiName;   }   public void setDataSourceJNDI(  String jndiDataSource){     this.dataSourceJndiName=jndiDataSource;   }   public Properties getDataSourceProperties(){     return dataSourceProperties;   }   public void setDataSourceProperties(  Properties dsProperties){     dataSourceProperties.putAll(dsProperties);   }   public String getDriverClassName(){     return driverClassName;   }   public void setDriverClassName(  String driverClassName){     try {       Class<?> driverClass=this.getClass().getClassLoader().loadClass(driverClassName);       driverClass.newInstance();       this.driverClassName=driverClassName;     }  catch (    Exception e) {       throw new RuntimeException(""driverClassName specified class '"" + driverClassName + ""' could not be loaded"",e);     }   }   /**   * {@inheritDoc}   */   @Override public long getIdleTimeout(){     return idleTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setIdleTimeout(  long idleTimeoutMs){     if (idleTimeoutMs < 0) {       throw new IllegalArgumentException(""idleTimeout cannot be negative"");     }     this.idleTimeout=idleTimeoutMs;   }   public String getJdbcUrl(){     return jdbcUrl;   }   public void setJdbcUrl(  String jdbcUrl){     this.jdbcUrl=jdbcUrl;   }   /**   * Get the default auto-commit behavior of connections in the pool.  * @return the default auto-commit behavior of connections  */   public boolean isAutoCommit(){     return isAutoCommit;   }   /**   * Set the default auto-commit behavior of connections in the pool.  * @param isAutoCommit the desired auto-commit default for connections  */   public void setAutoCommit(  boolean isAutoCommit){     this.isAutoCommit=isAutoCommit;   }   /**   * Get the pool suspension behavior (allowed or disallowed).  * @return the pool suspension behavior  */   public boolean isAllowPoolSuspension(){     return isAllowPoolSuspension;   }   /**   * Set whether or not pool suspension is allowed.  There is a performance impact when pool suspension is enabled.  Unless you need it (for a redundancy system for example) do not enable it.  * @param isAllowPoolSuspension the desired pool suspension allowance  */   public void setAllowPoolSuspension(  boolean isAllowPoolSuspension){     this.isAllowPoolSuspension=isAllowPoolSuspension;   }   /**   * Get whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @return whether or not initialization should fail on error immediately  */   public boolean isInitializationFailFast(){     return isInitializationFailFast;   }   /**   * Set whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @param failFast true if the pool should fail if the minimum connections cannot be created  */   public void setInitializationFailFast(  boolean failFast){     isInitializationFailFast=failFast;   }   public boolean isIsolateInternalQueries(){     return isIsolateInternalQueries;   }   public void setIsolateInternalQueries(  boolean isolate){     this.isIsolateInternalQueries=isolate;   }   @Deprecated public boolean isJdbc4ConnectionTest(){     return false;   }   @Deprecated public void setJdbc4ConnectionTest(  boolean useIsValid){     LOGGER.warn(""The jdbcConnectionTest property is now deprecated, see the documentation for connectionTestQuery"");   }   /**   * Get the Codahale MetricRegistry, could be null.  * @return the codahale MetricRegistry instance  */   public Object getMetricRegistry(){     return metricRegistry;   }   /**   * Set a Codahale MetricRegistry to use for HikariCP.  * @param metricRegistry the Codahale MetricRegistry to set  */   public void setMetricRegistry(  Object metricRegistry){     if (metricRegistry != null) {       if (metricRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           metricRegistry=(MetricRegistry)initCtx.lookup((String)metricRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(metricRegistry instanceof MetricRegistry)) {         throw new IllegalArgumentException(""Class must be an instance of com.codahale.metrics.MetricRegistry"");       }     }     this.metricRegistry=metricRegistry;   }   /**   * Get the Codahale HealthCheckRegistry, could be null.  * @return the Codahale HealthCheckRegistry instance  */   public Object getHealthCheckRegistry(){     return healthCheckRegistry;   }   /**   * Set a Codahale HealthCheckRegistry to use for HikariCP.  * @param healthCheckRegistry the Codahale HealthCheckRegistry to set  */   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       if (healthCheckRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           healthCheckRegistry=(HealthCheckRegistry)initCtx.lookup((String)healthCheckRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(healthCheckRegistry instanceof HealthCheckRegistry)) {         throw new IllegalArgumentException(""Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry"");       }     }     this.healthCheckRegistry=healthCheckRegistry;   }   public Properties getHealthCheckProperties(){     return healthCheckProperties;   }   public void setHealthCheckProperties(  Properties healthCheckProperties){     this.healthCheckProperties.putAll(healthCheckProperties);   }   public void addHealthCheckProperty(  String key,  String value){     healthCheckProperties.setProperty(key,value);   }   public boolean isReadOnly(){     return isReadOnly;   }   public void setReadOnly(  boolean readOnly){     this.isReadOnly=readOnly;   }   public boolean isRegisterMbeans(){     return isRegisterMbeans;   }   public void setRegisterMbeans(  boolean register){     this.isRegisterMbeans=register;   }   /**   * {@inheritDoc}   */   @Override public long getLeakDetectionThreshold(){     return leakDetectionThreshold;   }   /**   * {@inheritDoc}   */   @Override public void setLeakDetectionThreshold(  long leakDetectionThresholdMs){     this.leakDetectionThreshold=leakDetectionThresholdMs;   }   /**   * {@inheritDoc}   */   @Override public long getMaxLifetime(){     return maxLifetime;   }   /**   * {@inheritDoc}   */   @Override public void setMaxLifetime(  long maxLifetimeMs){     this.maxLifetime=maxLifetimeMs;   }   /**   * {@inheritDoc}   */   @Override public int getMaximumPoolSize(){     return maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public void setMaximumPoolSize(  int maxPoolSize){     if (maxPoolSize < 1) {       throw new IllegalArgumentException(""maxPoolSize cannot be less than 1"");     }     this.maxPoolSize=maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public int getMinimumIdle(){     return minIdle;   }   /**   * {@inheritDoc}   */   @Override public void setMinimumIdle(  int minIdle){     if (minIdle < 0) {       throw new IllegalArgumentException(""minimumIdle cannot be negative"");     }     this.minIdle=minIdle;   }   /**   * Get the default password to use for DataSource.getConnection(username, password) calls.  * @return the password  */   public String getPassword(){     return password;   }   /**   * Set the default password to use for DataSource.getConnection(username, password) calls.  * @param password the password  */   public void setPassword(  String password){     this.password=password;   }   /**   * {@inheritDoc}   */   @Override public String getPoolName(){     return poolName;   }   /**   * Set the name of the connection pool.  This is primarily used for the MBean to uniquely identify the pool configuration.  * @param poolName the name of the connection pool to use  */   public void setPoolName(  String poolName){     this.poolName=poolName;   }   public String getTransactionIsolation(){     return transactionIsolationName;   }   /**   * Set the default transaction isolation level.  The specified value is the constant name from the <code>Connection</code> class, eg.  <code>TRANSACTION_REPEATABLE_READ</code>.  * @param isolationLevel the name of the isolation level  */   public void setTransactionIsolation(  String isolationLevel){     this.transactionIsolationName=isolationLevel;   }   /**   * Get the default username used for DataSource.getConnection(username, password) calls.  * @return the username  */   public String getUsername(){     return username;   }   /**   * Set the default username used for DataSource.getConnection(username, password) calls.  * @param username the username  */   public void setUsername(  String username){     this.username=username;   }   /**   * Get the thread factory used to create threads.  * @return the thread factory (may be null, in which case the default thread factory is used)  */   public ThreadFactory getThreadFactory(){     return threadFactory;   }   /**   * Set the thread factory to be used to create threads.  * @param threadFactory the thread factory (setting to null causes the default thread factory to be used)  */   public void setThreadFactory(  ThreadFactory threadFactory){     this.threadFactory=threadFactory;   }   public void validate(){     Logger logger=LoggerFactory.getLogger(getClass());     validateNumerics();     if (connectionCustomizerClassName != null) {       try {         getClass().getClassLoader().loadClass(connectionCustomizerClassName);       }  catch (      Exception e) {         logger.warn(""connectionCustomizationClass specified class '"" + connectionCustomizerClassName + ""' could not be loaded"",e);         connectionCustomizerClassName=null;       }     }     if (driverClassName != null && jdbcUrl == null) {       logger.error(""when specifying driverClassName, jdbcUrl must also be specified"");       throw new IllegalStateException(""when specifying driverClassName, jdbcUrl must also be specified"");     }  else     if (driverClassName != null && dataSourceClassName != null) {       logger.error(""both driverClassName and dataSourceClassName are specified, one or the other should be used"");       throw new IllegalStateException(""both driverClassName and dataSourceClassName are specified, one or the other should be used"");     }  else     if (jdbcUrl != null) {     }  else     if (dataSource == null && dataSourceClassName == null) {       logger.error(""one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified"");       throw new IllegalArgumentException(""one of either dataSource or dataSourceClassName must be specified"");     }  else     if (dataSource != null && dataSourceClassName != null) {       logger.warn(""both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName"");     }     if (transactionIsolationName != null) {       UtilityElf.getTransactionIsolation(transactionIsolationName);     }     if (poolName == null) {       poolName=""HikariPool-"" + poolNumber++;     }     if (LOGGER.isDebugEnabled() || unitTest) {       logConfiguration();     }   }   private void validateNumerics(){     Logger logger=LoggerFactory.getLogger(getClass());     if (validationTimeout > connectionTimeout && connectionTimeout != 0) {       logger.warn(""validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout."");       validationTimeout=connectionTimeout;     }     if (minIdle < 0 || minIdle > maxPoolSize) {       minIdle=maxPoolSize;     }     if (maxLifetime < 0) {       logger.error(""maxLifetime cannot be negative."");       throw new IllegalArgumentException(""maxLifetime cannot be negative."");     }  else     if (maxLifetime > 0 && maxLifetime < TimeUnit.SECONDS.toMillis(30)) {       logger.warn(""maxLifetime is less than 30000ms, using default {}ms."",MAX_LIFETIME);       maxLifetime=MAX_LIFETIME;     }     if (idleTimeout != 0 && idleTimeout < TimeUnit.SECONDS.toMillis(10)) {       logger.warn(""idleTimeout is less than 10000ms, using default {}ms."",IDLE_TIMEOUT);       idleTimeout=IDLE_TIMEOUT;     }  else     if (idleTimeout > maxLifetime && maxLifetime > 0) {       logger.warn(""idleTimeout is greater than maxLifetime, setting to maxLifetime."");       idleTimeout=maxLifetime;     }     if (leakDetectionThreshold != 0 && leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) && !unitTest) {       logger.warn(""leakDetectionThreshold is less than 2000ms, setting to minimum 2000ms."");       leakDetectionThreshold=2000L;     }   }   private void logConfiguration(){     LOGGER.debug(""HikariCP pool {} configuration:"",poolName);     final Set<String> propertyNames=new TreeSet<String>(PropertyBeanSetter.getPropertyNames(HikariConfig.class));     for (    String prop : propertyNames) {       try {         Object value=PropertyBeanSetter.getProperty(prop,this);         if (""dataSourceProperties"".equals(prop)) {           Properties dsProps=PropertyBeanSetter.copyProperties(dataSourceProperties);           dsProps.setProperty(""password"",""<masked>"");           value=dsProps;         }         value=(prop.contains(""password"") ? ""<masked>"" : value);         LOGGER.debug((prop + ""................................................"").substring(0,32) + (value != null ? value : """"));       }  catch (      Exception e) {         continue;       }     }   }   abstract protected void loadProperties(  String propertyFileName);   public void copyState(  AbstractHikariConfig other){     for (    Field field : AbstractHikariConfig.class.getDeclaredFields()) {       if (!Modifier.isFinal(field.getModifiers())) {         field.setAccessible(true);         try {           field.set(other,field.get(this));         }  catch (        Exception e) {           throw new RuntimeException(""Exception copying HikariConfig state: "" + e.getMessage(),e);         }       }     }   } } "
"/**   * This is the primary connection pool class that provides the basic pooling behavior for HikariCP.  * @author Brett Wooldridge  */ public abstract class BaseHikariPool implements HikariPoolMBean, IBagStateListener {   protected final Logger LOGGER=LoggerFactory.getLogger(getClass());   private static final long ALIVE_BYPASS_WINDOW=Long.getLong(""com.zaxxer.hikari.aliveBypassWindow"",1000L);   protected static final int POOL_RUNNING=0;   protected static final int POOL_SUSPENDED=1;   protected static final int POOL_SHUTDOWN=2;   public final String catalog;   public final boolean isReadOnly;   public final boolean isAutoCommit;   public int transactionIsolation;   protected final PoolUtilities poolUtils;   protected final HikariConfig configuration;   protected final AtomicInteger totalConnections;   protected final ConcurrentBag<PoolBagEntry> connectionBag;   protected final ThreadPoolExecutor addConnectionExecutor;   protected final ThreadPoolExecutor closeConnectionExecutor;   protected final ScheduledThreadPoolExecutor houseKeepingExecutorService;   protected final boolean isUseJdbc4Validation;   protected final boolean isIsolateInternalQueries;   protected volatile int poolState;   protected volatile long connectionTimeout;   protected volatile long validationTimeout;   private final LeakTask leakTask;   private final DataSource dataSource;   private final GlobalPoolLock suspendResumeLock;   private final IConnectionCustomizer connectionCustomizer;   private final AtomicReference<Throwable> lastConnectionFailure;   private final String username;   private final String password;   private volatile MetricsTracker metricsTracker;   private volatile boolean isRecordMetrics;   /**   * Construct a HikariPool with the specified configuration.  * @param configuration a HikariConfig instance  */   public BaseHikariPool(  HikariConfig configuration){     this(configuration,configuration.getUsername(),configuration.getPassword());   }   /**   * Construct a HikariPool with the specified configuration.  We cache lots of configuration items in class-local final members for speed.  * @param configuration a HikariConfig instance  * @param username authentication username  * @param password authentication password  */   public BaseHikariPool(  HikariConfig configuration,  String username,  String password){     this.username=username;     this.password=password;     this.configuration=configuration;     this.poolUtils=new PoolUtilities(configuration);     this.connectionBag=createConcurrentBag(this);     this.totalConnections=new AtomicInteger();     this.connectionTimeout=configuration.getConnectionTimeout();     this.validationTimeout=configuration.getValidationTimeout();     this.lastConnectionFailure=new AtomicReference<Throwable>();     this.isReadOnly=configuration.isReadOnly();     this.isAutoCommit=configuration.isAutoCommit();     this.suspendResumeLock=configuration.isAllowPoolSuspension() ? new GlobalPoolLock(true) : GlobalPoolLock.FAUX_LOCK;     this.catalog=configuration.getCatalog();     this.connectionCustomizer=initializeCustomizer();     this.transactionIsolation=getTransactionIsolation(configuration.getTransactionIsolation());     this.isIsolateInternalQueries=configuration.isIsolateInternalQueries();     this.isUseJdbc4Validation=configuration.getConnectionTestQuery() == null;     setMetricRegistry(configuration.getMetricRegistry());     setHealthCheckRegistry(configuration.getHealthCheckRegistry());     this.dataSource=poolUtils.initializeDataSource(configuration.getDataSourceClassName(),configuration.getDataSource(),configuration.getDataSourceProperties(),configuration.getDriverClassName(),configuration.getJdbcUrl(),username,password);     this.addConnectionExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),""HikariCP connection filler (pool "" + configuration.getPoolName() + "")"",configuration.getThreadFactory(),new ThreadPoolExecutor.DiscardPolicy());     this.closeConnectionExecutor=createThreadPoolExecutor(4,""HikariCP connection closer (pool "" + configuration.getPoolName() + "")"",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());     long delayPeriod=Long.getLong(""com.zaxxer.hikari.housekeeping.periodMs"",TimeUnit.SECONDS.toMillis(30L));     ThreadFactory threadFactory=configuration.getThreadFactory() != null ? configuration.getThreadFactory() : new DefaultThreadFactory(""Hikari Housekeeping Timer (pool "" + configuration.getPoolName() + "")"",true);     this.houseKeepingExecutorService=new ScheduledThreadPoolExecutor(1,threadFactory,new ThreadPoolExecutor.DiscardPolicy());     this.houseKeepingExecutorService.scheduleAtFixedRate(getHouseKeeper(),delayPeriod,delayPeriod,TimeUnit.MILLISECONDS);     this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);     this.leakTask=(configuration.getLeakDetectionThreshold() == 0) ? LeakTask.NO_LEAK : new LeakTask(configuration.getLeakDetectionThreshold(),houseKeepingExecutorService);     setRemoveOnCancelPolicy(houseKeepingExecutorService);     poolUtils.setLoginTimeout(dataSource,connectionTimeout);     registerMBeans(configuration,this);     initializeConnections();   }   /**   * Get a connection from the pool, or timeout after connectionTimeout milliseconds.  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection() throws SQLException {     return getConnection(connectionTimeout);   }   /**   * Get a connection from the pool, or timeout after the specified number of milliseconds.  * @param hardTimeout the maximum time to wait for a connection from the pool  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection(  final long hardTimeout) throws SQLException {     suspendResumeLock.acquire();     long timeout=hardTimeout;     final long start=System.currentTimeMillis();     final MetricsContext metricsContext=(isRecordMetrics ? metricsTracker.recordConnectionRequest(start) : MetricsTracker.NO_CONTEXT);     try {       do {         final PoolBagEntry bagEntry=connectionBag.borrow(timeout,TimeUnit.MILLISECONDS);         if (bagEntry == null) {           break;         }         final long now=System.currentTimeMillis();         if (bagEntry.evicted || (now - bagEntry.lastAccess > ALIVE_BYPASS_WINDOW && !isConnectionAlive(bagEntry.connection))) {           closeConnection(bagEntry,""(connection evicted or dead)"");           timeout=hardTimeout - elapsedTimeMs(start);         }  else {           metricsContext.setConnectionLastOpen(bagEntry,now);           metricsContext.stop();           return ProxyFactory.getProxyConnection((HikariPool)this,bagEntry,leakTask.start(bagEntry));         }       }  while (timeout > 0L);     }  catch (    InterruptedException e) {       throw new SQLException(""Interrupted during connection acquisition"",e);     }  finally {       suspendResumeLock.release();     }     logPoolState(""Timeout failure "");     throw new SQLTimeoutException(String.format(""Timeout after %dms of waiting for a connection."",elapsedTimeMs(start)),lastConnectionFailure.getAndSet(null));   }   /**   * Release a connection back to the pool, or permanently close it if it is broken.  * @param bagEntry the PoolBagEntry to release back to the pool  */   public final void releaseConnection(  final PoolBagEntry bagEntry){     metricsTracker.recordConnectionUsage(bagEntry);     if (bagEntry.evicted) {       LOGGER.debug(""Connection returned to pool {} is broken or evicted.  Closing connection."",configuration.getPoolName());       closeConnection(bagEntry,""(connection broken or evicted)"");     }  else {       connectionBag.requite(bagEntry);     }   }   /**   * Shutdown the pool, closing all idle connections and aborting or closing active connections.  * @throws InterruptedException thrown if the thread is interrupted during shutdown  */   public final void shutdown() throws InterruptedException {     if (poolState != POOL_SHUTDOWN) {       poolState=POOL_SHUTDOWN;       LOGGER.info(""HikariCP pool {} is shutting down."",configuration.getPoolName());       logPoolState(""Before shutdown "");       connectionBag.close();       softEvictConnections();       houseKeepingExecutorService.shutdown();       addConnectionExecutor.shutdownNow();       houseKeepingExecutorService.awaitTermination(5L,TimeUnit.SECONDS);       addConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       final ExecutorService assassinExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),""HikariCP connection assassin"",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());       final long start=System.currentTimeMillis();       do {         softEvictConnections();         abortActiveConnections(assassinExecutor);       }  while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toMillis(5));       assassinExecutor.shutdown();       assassinExecutor.awaitTermination(5L,TimeUnit.SECONDS);       closeConnectionExecutor.shutdown();       closeConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       logPoolState(""After shutdown "");       unregisterMBeans(configuration,this);       metricsTracker.close();     }   }   /**   * Evict a connection from the pool.  * @param proxyConnection the connection to evict  */   public final void evictConnection(  IHikariConnectionProxy proxyConnection){     closeConnection(proxyConnection.getPoolBagEntry(),""(connection evicted by user)"");   }   /**   * Get the wrapped DataSource.  * @return the wrapped DataSource  */   public final DataSource getDataSource(){     return dataSource;   }   /**   * Get the pool configuration object.  * @return the {@link HikariConfig} for this pool  */   public final HikariConfig getConfiguration(){     return configuration;   }   @Override public String toString(){     return configuration.getPoolName();   }   /**   * {@inheritDoc}   */   @Override public final int getActiveConnections(){     return connectionBag.getCount(STATE_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getIdleConnections(){     return connectionBag.getCount(STATE_NOT_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getTotalConnections(){     return connectionBag.size() - connectionBag.getCount(STATE_REMOVED);   }   /**   * {@inheritDoc}   */   @Override public final int getThreadsAwaitingConnection(){     return connectionBag.getPendingQueue();   }   /**   * {@inheritDoc}   */   @Override public final void suspendPool(){     if (suspendResumeLock == GlobalPoolLock.FAUX_LOCK) {       throw new IllegalStateException(""Pool "" + configuration.getPoolName() + "" is not suspendable"");     }  else     if (poolState != POOL_SUSPENDED) {       suspendResumeLock.suspend();       poolState=POOL_SUSPENDED;     }   }   /**   * {@inheritDoc}   */   @Override public final void resumePool(){     if (poolState == POOL_SUSPENDED) {       poolState=POOL_RUNNING;       addBagItem();       suspendResumeLock.resume();     }   }   public void setMetricRegistry(  Object metricRegistry){     this.isRecordMetrics=metricRegistry != null;     if (isRecordMetrics) {       this.metricsTracker=new CodaHaleMetricsTracker(this,(MetricRegistry)metricRegistry);     }  else {       this.metricsTracker=new MetricsTracker(this);     }   }   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       CodahaleHealthChecker.registerHealthChecks(this,(HealthCheckRegistry)healthCheckRegistry);     }   }   /**   * {@inheritDoc}   */   @Override public Future<Boolean> addBagItem(){     FutureTask<Boolean> future=new FutureTask<Boolean>(new Runnable(){       public void run(){         long sleepBackoff=200L;         final int minimumIdle=configuration.getMinimumIdle();         final int maxPoolSize=configuration.getMaximumPoolSize();         while (poolState == POOL_RUNNING && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection()) {           quietlySleep(sleepBackoff);           sleepBackoff=Math.min(connectionTimeout / 2,(long)((double)sleepBackoff * 1.5));         }       }     } ,true);     addConnectionExecutor.execute(future);     return future;   }   /**   * Create and add a single connection to the pool.  */   protected final boolean addConnection(){     if (totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()) {       Connection connection=null;       try {         connection=(username == null && password == null) ? dataSource.getConnection() : dataSource.getConnection(username,password);         if (isUseJdbc4Validation && !poolUtils.isJdbc4ValidationSupported(connection)) {           throw new SQLException(""JDBC4 Connection.isValid() method not supported, connection test query must be configured"");         }         final int originalTimeout=poolUtils.getAndSetNetworkTimeout(connection,connectionTimeout);         transactionIsolation=(transactionIsolation < 0 ? connection.getTransactionIsolation() : transactionIsolation);         poolUtils.setupConnection(connection,isAutoCommit,isReadOnly,transactionIsolation,catalog);         connectionCustomizer.customize(connection);         poolUtils.executeSql(connection,configuration.getConnectionInitSql(),isAutoCommit);         poolUtils.setNetworkTimeout(connection,originalTimeout);         connectionBag.add(new PoolBagEntry(connection,this));         lastConnectionFailure.set(null);         return true;       }  catch (      Exception e) {         lastConnectionFailure.set(e);         if (poolState == POOL_RUNNING) {           LOGGER.debug(""Connection attempt to database {} failed: {}"",configuration.getPoolName(),e.getMessage(),e);         }         poolUtils.quietlyCloseConnection(connection,""(exception during connection creation)"");       }     }     totalConnections.decrementAndGet();     return false;   }   /**   * Fill pool up from current idle connections (as they are perceived at the point of execution) to minimumIdle connections.  */   protected void fillPool(){     final int connectionsToAdd=configuration.getMinimumIdle() - getIdleConnections();     for (int i=0; i < connectionsToAdd; i++) {       addBagItem();     }     if (connectionsToAdd > 0 && LOGGER.isDebugEnabled()) {       addConnectionExecutor.execute(new Runnable(){         public void run(){           logPoolState(""After fill "");         }       } );     }   }   /**   * Permanently close the real (underlying) connection (eat any exception).  * @param connectionProxy the connection to actually close  */   protected abstract void closeConnection(  final PoolBagEntry bagEntry,  final String closureReason);   /**   * Check whether the connection is alive or not.  * @param connection the connection to test  * @return true if the connection is alive, false if it is not alive or we timed out  */   protected abstract boolean isConnectionAlive(  final Connection connection);   /**   * Attempt to abort() active connections on Java7+, or close() them on Java6.  * @param assassinExecutor   * @throws InterruptedException   */   protected abstract void abortActiveConnections(  final ExecutorService assassinExecutor) throws InterruptedException ;   /**   * Create the JVM version-specific ConcurrentBag instance used by the pool.  * @param listener the IBagStateListener instance  * @return a ConcurrentBag instance  */   protected abstract ConcurrentBag<PoolBagEntry> createConcurrentBag(  IBagStateListener listener);   /**   * Create the JVM version-specific Housekeeping runnable instance used by the pool.  * @return the HouseKeeper instance  */   protected abstract Runnable getHouseKeeper();   /**   * Fill the pool up to the minimum size.  */   private void initializeConnections(){     if (configuration.isInitializationFailFast()) {       try {         try {           if (!addConnection()) {             shutdown();             throw new PoolInitializationException(lastConnectionFailure.getAndSet(null));           }           ConnectionProxy connection=(ConnectionProxy)getConnection();           connection.getPoolBagEntry().evicted=(configuration.getMinimumIdle() == 0);           connection.close();         }  catch (        SQLException e) {           shutdown();           throw new PoolInitializationException(e);         }       }  catch (      InterruptedException ie) {         throw new PoolInitializationException(ie);       }     }     fillPool();   }   /**   * Construct the user's connection customizer, if specified.  * @return an IConnectionCustomizer instance  */   @SuppressWarnings(""deprecation"") private IConnectionCustomizer initializeCustomizer(){     if (configuration.getConnectionCustomizerClassName() != null) {       return createInstance(configuration.getConnectionCustomizerClassName(),IConnectionCustomizer.class);     }     return configuration.getConnectionCustomizer();   }   public final void logPoolState(  String... prefix){     if (LOGGER.isDebugEnabled()) {       LOGGER.debug(""{}pool stats {} (total={}, inUse={}, avail={}, waiting={})"",(prefix.length > 0 ? prefix[0] : """"),configuration.getPoolName(),getTotalConnections(),getActiveConnections(),getIdleConnections(),getThreadsAwaitingConnection());     }   } } ","/**   * This is the primary connection pool class that provides the basic pooling behavior for HikariCP.  * @author Brett Wooldridge  */ public abstract class BaseHikariPool implements HikariPoolMXBean, IBagStateListener {   protected final Logger LOGGER=LoggerFactory.getLogger(getClass());   private static final long ALIVE_BYPASS_WINDOW=Long.getLong(""com.zaxxer.hikari.aliveBypassWindow"",1000L);   protected static final int POOL_RUNNING=0;   protected static final int POOL_SUSPENDED=1;   protected static final int POOL_SHUTDOWN=2;   public final String catalog;   public final boolean isReadOnly;   public final boolean isAutoCommit;   public int transactionIsolation;   protected final PoolUtilities poolUtils;   protected final HikariConfig configuration;   protected final AtomicInteger totalConnections;   protected final ConcurrentBag<PoolBagEntry> connectionBag;   protected final ThreadPoolExecutor addConnectionExecutor;   protected final ThreadPoolExecutor closeConnectionExecutor;   protected final ScheduledThreadPoolExecutor houseKeepingExecutorService;   protected final boolean isUseJdbc4Validation;   protected final boolean isIsolateInternalQueries;   protected volatile int poolState;   protected volatile long connectionTimeout;   protected volatile long validationTimeout;   private final LeakTask leakTask;   private final DataSource dataSource;   private final GlobalPoolLock suspendResumeLock;   private final IConnectionCustomizer connectionCustomizer;   private final AtomicReference<Throwable> lastConnectionFailure;   private final String username;   private final String password;   private volatile MetricsTracker metricsTracker;   private volatile boolean isRecordMetrics;   /**   * Construct a HikariPool with the specified configuration.  * @param configuration a HikariConfig instance  */   public BaseHikariPool(  HikariConfig configuration){     this(configuration,configuration.getUsername(),configuration.getPassword());   }   /**   * Construct a HikariPool with the specified configuration.  We cache lots of configuration items in class-local final members for speed.  * @param configuration a HikariConfig instance  * @param username authentication username  * @param password authentication password  */   public BaseHikariPool(  HikariConfig configuration,  String username,  String password){     this.username=username;     this.password=password;     this.configuration=configuration;     this.poolUtils=new PoolUtilities(configuration);     this.connectionBag=createConcurrentBag(this);     this.totalConnections=new AtomicInteger();     this.connectionTimeout=configuration.getConnectionTimeout();     this.validationTimeout=configuration.getValidationTimeout();     this.lastConnectionFailure=new AtomicReference<Throwable>();     this.isReadOnly=configuration.isReadOnly();     this.isAutoCommit=configuration.isAutoCommit();     this.suspendResumeLock=configuration.isAllowPoolSuspension() ? new GlobalPoolLock(true) : GlobalPoolLock.FAUX_LOCK;     this.catalog=configuration.getCatalog();     this.connectionCustomizer=initializeCustomizer();     this.transactionIsolation=getTransactionIsolation(configuration.getTransactionIsolation());     this.isIsolateInternalQueries=configuration.isIsolateInternalQueries();     this.isUseJdbc4Validation=configuration.getConnectionTestQuery() == null;     setMetricRegistry(configuration.getMetricRegistry());     setHealthCheckRegistry(configuration.getHealthCheckRegistry());     this.dataSource=poolUtils.initializeDataSource(configuration.getDataSourceClassName(),configuration.getDataSource(),configuration.getDataSourceProperties(),configuration.getDriverClassName(),configuration.getJdbcUrl(),username,password);     this.addConnectionExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),""HikariCP connection filler (pool "" + configuration.getPoolName() + "")"",configuration.getThreadFactory(),new ThreadPoolExecutor.DiscardPolicy());     this.closeConnectionExecutor=createThreadPoolExecutor(4,""HikariCP connection closer (pool "" + configuration.getPoolName() + "")"",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());     long delayPeriod=Long.getLong(""com.zaxxer.hikari.housekeeping.periodMs"",TimeUnit.SECONDS.toMillis(30L));     ThreadFactory threadFactory=configuration.getThreadFactory() != null ? configuration.getThreadFactory() : new DefaultThreadFactory(""Hikari Housekeeping Timer (pool "" + configuration.getPoolName() + "")"",true);     this.houseKeepingExecutorService=new ScheduledThreadPoolExecutor(1,threadFactory,new ThreadPoolExecutor.DiscardPolicy());     this.houseKeepingExecutorService.scheduleAtFixedRate(getHouseKeeper(),delayPeriod,delayPeriod,TimeUnit.MILLISECONDS);     this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);     this.leakTask=(configuration.getLeakDetectionThreshold() == 0) ? LeakTask.NO_LEAK : new LeakTask(configuration.getLeakDetectionThreshold(),houseKeepingExecutorService);     setRemoveOnCancelPolicy(houseKeepingExecutorService);     poolUtils.setLoginTimeout(dataSource,connectionTimeout);     registerMBeans(configuration,this);     initializeConnections();   }   /**   * Get a connection from the pool, or timeout after connectionTimeout milliseconds.  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection() throws SQLException {     return getConnection(connectionTimeout);   }   /**   * Get a connection from the pool, or timeout after the specified number of milliseconds.  * @param hardTimeout the maximum time to wait for a connection from the pool  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection(  final long hardTimeout) throws SQLException {     suspendResumeLock.acquire();     long timeout=hardTimeout;     final long start=System.currentTimeMillis();     final MetricsContext metricsContext=(isRecordMetrics ? metricsTracker.recordConnectionRequest(start) : MetricsTracker.NO_CONTEXT);     try {       do {         final PoolBagEntry bagEntry=connectionBag.borrow(timeout,TimeUnit.MILLISECONDS);         if (bagEntry == null) {           break;         }         final long now=System.currentTimeMillis();         if (bagEntry.evicted || (now - bagEntry.lastAccess > ALIVE_BYPASS_WINDOW && !isConnectionAlive(bagEntry.connection))) {           closeConnection(bagEntry,""(connection evicted or dead)"");           timeout=hardTimeout - elapsedTimeMs(start);         }  else {           metricsContext.setConnectionLastOpen(bagEntry,now);           metricsContext.stop();           return ProxyFactory.getProxyConnection((HikariPool)this,bagEntry,leakTask.start(bagEntry));         }       }  while (timeout > 0L);     }  catch (    InterruptedException e) {       throw new SQLException(""Interrupted during connection acquisition"",e);     }  finally {       suspendResumeLock.release();     }     logPoolState(""Timeout failure "");     throw new SQLTimeoutException(String.format(""Timeout after %dms of waiting for a connection."",elapsedTimeMs(start)),lastConnectionFailure.getAndSet(null));   }   /**   * Release a connection back to the pool, or permanently close it if it is broken.  * @param bagEntry the PoolBagEntry to release back to the pool  */   public final void releaseConnection(  final PoolBagEntry bagEntry){     metricsTracker.recordConnectionUsage(bagEntry);     if (bagEntry.evicted) {       LOGGER.debug(""Connection returned to pool {} is broken or evicted.  Closing connection."",configuration.getPoolName());       closeConnection(bagEntry,""(connection broken or evicted)"");     }  else {       connectionBag.requite(bagEntry);     }   }   /**   * Shutdown the pool, closing all idle connections and aborting or closing active connections.  * @throws InterruptedException thrown if the thread is interrupted during shutdown  */   public final void shutdown() throws InterruptedException {     if (poolState != POOL_SHUTDOWN) {       poolState=POOL_SHUTDOWN;       LOGGER.info(""HikariCP pool {} is shutting down."",configuration.getPoolName());       logPoolState(""Before shutdown "");       connectionBag.close();       softEvictConnections();       houseKeepingExecutorService.shutdown();       addConnectionExecutor.shutdownNow();       houseKeepingExecutorService.awaitTermination(5L,TimeUnit.SECONDS);       addConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       final ExecutorService assassinExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),""HikariCP connection assassin"",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());       final long start=System.currentTimeMillis();       do {         softEvictConnections();         abortActiveConnections(assassinExecutor);       }  while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toMillis(5));       assassinExecutor.shutdown();       assassinExecutor.awaitTermination(5L,TimeUnit.SECONDS);       closeConnectionExecutor.shutdown();       closeConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       logPoolState(""After shutdown "");       unregisterMBeans(configuration,this);       metricsTracker.close();     }   }   /**   * Evict a connection from the pool.  * @param proxyConnection the connection to evict  */   public final void evictConnection(  IHikariConnectionProxy proxyConnection){     closeConnection(proxyConnection.getPoolBagEntry(),""(connection evicted by user)"");   }   /**   * Get the wrapped DataSource.  * @return the wrapped DataSource  */   public final DataSource getDataSource(){     return dataSource;   }   /**   * Get the pool configuration object.  * @return the {@link HikariConfig} for this pool  */   public final HikariConfig getConfiguration(){     return configuration;   }   @Override public String toString(){     return configuration.getPoolName();   }   /**   * {@inheritDoc}   */   @Override public final int getActiveConnections(){     return connectionBag.getCount(STATE_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getIdleConnections(){     return connectionBag.getCount(STATE_NOT_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getTotalConnections(){     return connectionBag.size() - connectionBag.getCount(STATE_REMOVED);   }   /**   * {@inheritDoc}   */   @Override public final int getThreadsAwaitingConnection(){     return connectionBag.getPendingQueue();   }   /**   * {@inheritDoc}   */   @Override public final void suspendPool(){     if (suspendResumeLock == GlobalPoolLock.FAUX_LOCK) {       throw new IllegalStateException(""Pool "" + configuration.getPoolName() + "" is not suspendable"");     }  else     if (poolState != POOL_SUSPENDED) {       suspendResumeLock.suspend();       poolState=POOL_SUSPENDED;     }   }   /**   * {@inheritDoc}   */   @Override public final void resumePool(){     if (poolState == POOL_SUSPENDED) {       poolState=POOL_RUNNING;       addBagItem();       suspendResumeLock.resume();     }   }   public void setMetricRegistry(  Object metricRegistry){     this.isRecordMetrics=metricRegistry != null;     if (isRecordMetrics) {       this.metricsTracker=new CodaHaleMetricsTracker(this,(MetricRegistry)metricRegistry);     }  else {       this.metricsTracker=new MetricsTracker(this);     }   }   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       CodahaleHealthChecker.registerHealthChecks(this,(HealthCheckRegistry)healthCheckRegistry);     }   }   /**   * {@inheritDoc}   */   @Override public Future<Boolean> addBagItem(){     FutureTask<Boolean> future=new FutureTask<Boolean>(new Runnable(){       public void run(){         long sleepBackoff=200L;         final int minimumIdle=configuration.getMinimumIdle();         final int maxPoolSize=configuration.getMaximumPoolSize();         while (poolState == POOL_RUNNING && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection()) {           quietlySleep(sleepBackoff);           sleepBackoff=Math.min(connectionTimeout / 2,(long)((double)sleepBackoff * 1.5));         }       }     } ,true);     addConnectionExecutor.execute(future);     return future;   }   /**   * Create and add a single connection to the pool.  */   protected final boolean addConnection(){     if (totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()) {       Connection connection=null;       try {         connection=(username == null && password == null) ? dataSource.getConnection() : dataSource.getConnection(username,password);         if (isUseJdbc4Validation && !poolUtils.isJdbc4ValidationSupported(connection)) {           throw new SQLException(""JDBC4 Connection.isValid() method not supported, connection test query must be configured"");         }         final int originalTimeout=poolUtils.getAndSetNetworkTimeout(connection,connectionTimeout);         transactionIsolation=(transactionIsolation < 0 ? connection.getTransactionIsolation() : transactionIsolation);         poolUtils.setupConnection(connection,isAutoCommit,isReadOnly,transactionIsolation,catalog);         connectionCustomizer.customize(connection);         poolUtils.executeSql(connection,configuration.getConnectionInitSql(),isAutoCommit);         poolUtils.setNetworkTimeout(connection,originalTimeout);         connectionBag.add(new PoolBagEntry(connection,this));         lastConnectionFailure.set(null);         return true;       }  catch (      Exception e) {         lastConnectionFailure.set(e);         if (poolState == POOL_RUNNING) {           LOGGER.debug(""Connection attempt to database {} failed: {}"",configuration.getPoolName(),e.getMessage(),e);         }         poolUtils.quietlyCloseConnection(connection,""(exception during connection creation)"");       }     }     totalConnections.decrementAndGet();     return false;   }   /**   * Fill pool up from current idle connections (as they are perceived at the point of execution) to minimumIdle connections.  */   protected void fillPool(){     final int connectionsToAdd=configuration.getMinimumIdle() - getIdleConnections();     for (int i=0; i < connectionsToAdd; i++) {       addBagItem();     }     if (connectionsToAdd > 0 && LOGGER.isDebugEnabled()) {       addConnectionExecutor.execute(new Runnable(){         public void run(){           logPoolState(""After fill "");         }       } );     }   }   /**   * Permanently close the real (underlying) connection (eat any exception).  * @param connectionProxy the connection to actually close  */   protected abstract void closeConnection(  final PoolBagEntry bagEntry,  final String closureReason);   /**   * Check whether the connection is alive or not.  * @param connection the connection to test  * @return true if the connection is alive, false if it is not alive or we timed out  */   protected abstract boolean isConnectionAlive(  final Connection connection);   /**   * Attempt to abort() active connections on Java7+, or close() them on Java6.  * @param assassinExecutor   * @throws InterruptedException   */   protected abstract void abortActiveConnections(  final ExecutorService assassinExecutor) throws InterruptedException ;   /**   * Create the JVM version-specific ConcurrentBag instance used by the pool.  * @param listener the IBagStateListener instance  * @return a ConcurrentBag instance  */   protected abstract ConcurrentBag<PoolBagEntry> createConcurrentBag(  IBagStateListener listener);   /**   * Create the JVM version-specific Housekeeping runnable instance used by the pool.  * @return the HouseKeeper instance  */   protected abstract Runnable getHouseKeeper();   /**   * Fill the pool up to the minimum size.  */   private void initializeConnections(){     if (configuration.isInitializationFailFast()) {       try {         try {           if (!addConnection()) {             shutdown();             throw new PoolInitializationException(lastConnectionFailure.getAndSet(null));           }           ConnectionProxy connection=(ConnectionProxy)getConnection();           connection.getPoolBagEntry().evicted=(configuration.getMinimumIdle() == 0);           connection.close();         }  catch (        SQLException e) {           shutdown();           throw new PoolInitializationException(e);         }       }  catch (      InterruptedException ie) {         throw new PoolInitializationException(ie);       }     }     fillPool();   }   /**   * Construct the user's connection customizer, if specified.  * @return an IConnectionCustomizer instance  */   @SuppressWarnings(""deprecation"") private IConnectionCustomizer initializeCustomizer(){     if (configuration.getConnectionCustomizerClassName() != null) {       return createInstance(configuration.getConnectionCustomizerClassName(),IConnectionCustomizer.class);     }     return configuration.getConnectionCustomizer();   }   public final void logPoolState(  String... prefix){     if (LOGGER.isDebugEnabled()) {       LOGGER.debug(""{}pool stats {} (total={}, inUse={}, avail={}, waiting={})"",(prefix.length > 0 ? prefix[0] : """"),configuration.getPoolName(),getTotalConnections(),getActiveConnections(),getIdleConnections(),getThreadsAwaitingConnection());     }   } } "
"setNetworkTimeout(connection,networkTimeout)","setNetworkTimeout(connection,originalTimeout)"
"new PoolBagEntry(null,TestElf.getPool(ds))","new PoolBagEntry(null,0,TestElf.getPool(ds))"
"new PoolBagEntry(null,pool)","new PoolBagEntry(null,0,pool)"
"new PoolBagEntry(null,pool)","new PoolBagEntry(null,0,pool)"
"new PoolBagEntry(null,pool)","new PoolBagEntry(null,0,pool)"
"bagEntry != null & bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)","bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)"
TimeUnit.SECONDS.toNanos(5),TimeUnit.SECONDS.toMillis(5)
TimeUnit.SECONDS.toNanos(5),TimeUnit.SECONDS.toMillis(5)
totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize(),totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
new Exception(),"new Exception(""Apparent connection leak detected"")"
TimeUnit.SECONDS.toMillis(25),TimeUnit.SECONDS.toMillis(5)
0,1
Thread.sleep(1350),Thread.sleep(1500)
Thread.sleep(1350),Thread.sleep(1500)
"Math.min(1000L,connectionTimeout)","Math.max(1000L,connectionTimeout)"
"Math.min(1000L,connectionTimeout)","Math.max(1000L,connectionTimeout)"
"Math.min(1000L,connectionTimeout)","Math.max(1000L,connectionTimeout)"
"Math.min(1000L,connectionTimeout)","Math.max(1000L,connectionTimeout)"
TimeUnit.SECONDS.toMillis(4),TimeUnit.SECONDS.toMillis(5)
TimeUnit.SECONDS.toMillis(4),TimeUnit.SECONDS.toMillis(5)
TimeUnit.SECONDS.toMillis(3),TimeUnit.SECONDS.toMillis(4)
TimeUnit.SECONDS.toMillis(3),TimeUnit.SECONDS.toMillis(4)
minIdle < 0,minIdle < 0 || minIdle > maxPoolSize
minIdle < 0,minIdle < 0 || minIdle > maxPoolSize
66,2
2,66
pool != null & pool.getDataSource().getClass().isAssignableFrom(iface),pool != null && pool.getDataSource().getClass().isAssignableFrom(iface)
elapsed > config.getConnectionTimeout(),elapsed >= config.getConnectionTimeout()
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize(),retries == 0 && totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
idleTimeout < 30000,idleTimeout < 30000 && idleTimeout != 0
maxLifetime < 120000,maxLifetime < 120000 && maxLifetime != 0
timeoutMs < 500,timeoutMs < 1000
timeoutMs=500,timeoutMs=1000
(int)timeoutMs * 1000,(int)timeoutMs / 1000
fields.contains(name),!fields.contains(name)
fields.contains(name),!fields.contains(name)
"synchronized (threadCount) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException(""Error loading options from config: "",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } ","synchronized (CONFIG) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException(""Error loading options from config: "",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } "
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } ,synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
"synchronized (threadCount) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException(""Error loading options from config: "",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } ","synchronized (CONFIG) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException(""Error loading options from config: "",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } "
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } ,synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
0,32
exportReturnCodes(exporter),exportStatusCounts(exporter)
exportReturnCodes(exporter),exportStatusCounts(exporter)
exportReturnCodes(exporter),exportStatusCounts(exporter)
exportReturnCodes(exporter),exportStatusCounts(exporter)
i=1,i=0
totalHistogram.getValueAtPercentile(90),totalHistogram.getValueAtPercentile(95)
totalHistogram.getValueAtPercentile(90),totalHistogram.getValueAtPercentile(95)
1,-1
"new DBException(String.format(""Error while creating Aerospike "" + ""client for %s:%d."",host,port))","new DBException(String.format(""Error while creating Aerospike "" + ""client for %s:%d."",host,port),e)"
val.get(key),val.get(k)
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
System.currentTimeMillis(),System.nanoTime()
"StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))","StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))"
"StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))","StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))"
private static final Configuration config=HBaseConfiguration.create(); ,private static final HBaseConfiguration config=new HBaseConfiguration(); 
"props.getProperty(""exporter"")","props.getProperty(""exporter"",""com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter"")"
"Assert.assertEquals(""Invalid selection end"",280,selector.getSelectionEnd())","Assert.assertEquals(""Invalid selection end"",279,selector.getSelectionEnd())"
(AST)child,(DetailAST)child
(AST)child,(DetailAST)child
final ClassNotFoundException ignored,final Exception ignored
"CHECK_TEXT.get(""Properties"")","CHECK_TEXT.computeIfAbsent(""Properties"",unused -> """")"
final StringBuffer result=new StringBuffer(20); ,final StringBuilder result=new StringBuilder(20); 
StringBuffer result,StringBuilder result
StringBuffer text,StringBuilder text
"public class XpathRegressionCyclomaticComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionCyclomaticOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""4:5: "" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionCyclomaticTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""6:5: "" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo2']"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo2']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionCyclomaticOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""4:5: "" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionCyclomaticTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""6:5: "" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo2']"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo2']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionDeclarationOrderTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDeclarationOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={""5:5: "" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='name']"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDeclarationTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={""5:5: "" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='MAX']"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDeclarationOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={""5:5: "" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='name']"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDeclarationTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={""5:5: "" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='MAX']"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDefaultComesLastOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={""8:13: "" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP"",""/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP"" + ""/LITERAL_DEFAULT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDefaultComesLastTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute(""skipIfLastAndSharedWithCase"",""true"");     final String[] expectedViolation={""15:13: "" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionDefaultComesLastTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDefaultComesLastOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={""8:13: "" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP"",""/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP"" + ""/LITERAL_DEFAULT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionDefaultComesLastTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute(""skipIfLastAndSharedWithCase"",""true"");     final String[] expectedViolation={""15:13: "" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionExplicitInitializationTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={""4:17: "" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,""a"",0)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={""6:20: "" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,""bar"",""null"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='bar']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionExplicitInitializationTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={""4:17: "" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,""a"",0)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']"" + ""/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={""6:20: "" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,""bar"",""null"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='bar']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionFallThroughTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={""11:13: "" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP"",""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute(""checkLastCaseGroup"",""true"");     final String[] expectedViolation={""10:17: "" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST"" + ""/LITERAL_SWITCH/CASE_GROUP"",""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST"" + ""/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionFallThroughTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={""11:13: "" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP"",""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute(""checkLastCaseGroup"",""true"");     final String[] expectedViolation={""10:17: "" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST"" + ""/LITERAL_SWITCH/CASE_GROUP"",""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST"" + ""/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={""10:34: "" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,""value"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK"" + ""/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS"" + ""/PARAMETER_DEF[@text='value']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={""8:45: "" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,""other"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionHiddenFieldTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={""10:34: "" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,""value"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK"" + ""/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS"" + ""/PARAMETER_DEF[@text='value']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionExplicitTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={""8:45: "" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,""other"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionIllegalThrowsOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={""4:35: "" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,""RuntimeException"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionIllegalThrowsTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={""8:45: "" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,""java.lang.Error"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionIllegalThrowsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionIllegalThrowsOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={""4:35: "" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,""RuntimeException"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionIllegalThrowsTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={""8:45: "" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,""java.lang.Error"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(""file"",getPath(checkName,""SuppressionXpathRegressionImportControlOne.xml""));     final String[] expectedViolation={""3:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,""java.util.Scanner"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/IMPORT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(""file"",getPath(checkName,""SuppressionXpathRegressionImportControlTwo.xml""));     final String[] expectedViolation={""1:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList(""/PACKAGE_DEF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={""1:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList(""/PACKAGE_DEF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlFour.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(""file"",getPath(checkName,""SuppressionXpathRegressionImportControlFour.xml""));     final String[] expectedViolation={""4:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,""java.util.Scanner"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/IMPORT[./DOT[@text='Scanner']]"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionImportControlTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(""file"",getPath(checkName,""SuppressionXpathRegressionImportControlOne.xml""));     final String[] expectedViolation={""3:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,""java.util.Scanner"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/IMPORT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(""file"",getPath(checkName,""SuppressionXpathRegressionImportControlTwo.xml""));     final String[] expectedViolation={""1:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList(""/PACKAGE_DEF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={""1:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList(""/PACKAGE_DEF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionImportControlFour.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(""file"",getPath(checkName,""SuppressionXpathRegressionImportControlFour.xml""));     final String[] expectedViolation={""4:1: "" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,""java.util.Scanner"")};     final List<String> expectedXpathQueries=Collections.singletonList(""/IMPORT[./DOT[@text='Scanner']]"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionJavadocVariableTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionJavadocVariableOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={""5:5: "" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='age']"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='age']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionJavadocVariableTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={""6:9: "" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK"" + ""/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK"" + ""/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK"" + ""/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS"" + ""/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionJavadocVariableTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionJavadocVariableOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={""5:5: "" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='age']"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='age']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionJavadocVariableTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={""6:9: "" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK"" + ""/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK"" + ""/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK"" + ""/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS"" + ""/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionLeftCurlyOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={""4:1: "" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,""{"",1)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK"",""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionLeftCurlyTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute(""option"",LeftCurlyOption.NL.toString());     final String[] expectedViolation={""3:53: "" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,""{"",53)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK"",""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionLeftCurlyThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={""5:19: "" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,""{"",19)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK"" + ""/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionLeftCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionLeftCurlyOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={""4:1: "" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,""{"",1)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK"",""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionLeftCurlyTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute(""option"",LeftCurlyOption.NL.toString());     final String[] expectedViolation={""3:53: "" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,""{"",53)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK"",""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionLeftCurlyThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={""5:19: "" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,""{"",19)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK"" + ""/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMethodParamPadOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={""4:37: "" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,""("")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='InputMethodParamPad']/LPAREN"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMethodParamPadTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={""5:13: "" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,""("")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='sayHello']/LPAREN"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMethodParamPadThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute(""option"",""space"");     final String[] expectedViolation={""4:25: "" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,""("")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK"" + ""/METHOD_DEF[@text='sayHello']/LPAREN"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionMethodParamPadTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMethodParamPadOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={""4:37: "" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,""("")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='InputMethodParamPad']/LPAREN"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMethodParamPadTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={""5:13: "" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,""("")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='sayHello']/LPAREN"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMethodParamPadThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute(""option"",""space"");     final String[] expectedViolation={""4:25: "" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,""("")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK"" + ""/METHOD_DEF[@text='sayHello']/LPAREN"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionMultipleVariableDeclarationsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMultipleVariableDeclarationOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={""4:5: "" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']/TYPE"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/TYPE"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMultipleVariableDeclarationTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={""4:5: "" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']/TYPE"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionMultipleVariableDeclarationsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMultipleVariableDeclarationOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={""4:5: "" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']/TYPE"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/TYPE"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionMultipleVariableDeclarationTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={""4:5: "" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']/TYPE"",""/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNPathComplexityOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""4:5: "" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']"",""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNPathComplexityTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""4:5: "" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionNPathComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNPathComplexityOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""4:5: "" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList(""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']"",""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS"",""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNPathComplexityTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""4:5: "" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNestedForDepth.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={""7:17: "" + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionNestedForDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNestedForDepth.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={""7:17: "" + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNestedIfDepth.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={""10:17: "" + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNestedIfDepth.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={""10:17: "" + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNestedTryDepth.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={""7:17: "" + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionNestedTryDepth.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={""7:17: "" + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionOneStatementPerLineOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={""4:17: "" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/SEMI"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionOneStatementPerLineTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={""9:39: "" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionOneStatementPerLineOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={""4:17: "" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK"" + ""/VARIABLE_DEF[@text='j']/SEMI"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionOneStatementPerLineTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={""9:39: "" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionOuterTypeNumberTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionOuterTypeNumber.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""1:1: "" + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(""/PACKAGE_DEF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionOuterTypeNumberTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionOuterTypeNumber.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute(""max"",""0"");     final String[] expectedViolation={""1:1: "" + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(""/PACKAGE_DEF"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRequireThisOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(""validateOnlyOverlapping"",""false"");     final String[] expectedViolation={""7:9: "" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,""age"","""")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRequireThisTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(""validateOnlyOverlapping"",""false"");     final String[] expectedViolation={""9:9: "" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,""method1"","""")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionRequireThisTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRequireThisOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(""validateOnlyOverlapping"",""false"");     final String[] expectedViolation={""7:9: "" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,""age"","""")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRequireThisTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(""validateOnlyOverlapping"",""false"");     final String[] expectedViolation={""9:9: "" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,""method1"","""")};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={""8:9: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,""}"",9)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(""option"",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={""9:15: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,""}"",15)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(""option"",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={""5:72: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,""}"",72)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK"" + ""/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyFour.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(""option"",RightCurlyOption.SAME.toString());     final String[] expectedViolation={""7:27: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,""}"",27)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK"" + ""/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ","public class XpathRegressionRightCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyOne.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={""8:9: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,""}"",9)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK"" + ""/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyTwo.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(""option"",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={""9:15: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,""}"",15)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK"" + ""/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyThree.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(""option"",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={""5:72: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,""}"",72)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK"" + ""/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,""SuppressionXpathRegressionRightCurlyFour.java""));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(""option"",RightCurlyOption.SAME.toString());     final String[] expectedViolation={""7:27: "" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,""}"",27)};     final List<String> expectedXpathQueries=Collections.singletonList(""/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK"" + ""/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY"");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
"getPath(""InputPackageDeclarationDiffDirectory.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectory.java"")"
"getPath(""InputPackageDeclarationDiffDirectory.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectory.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtParent.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtParent.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtParent.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtParent.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")"
"getPath(""InputPackageDeclarationDiffDirectory.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectory.java"")"
"getPath(""InputPackageDeclarationDiffDirectory.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectory.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtParent.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtParent.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtParent.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtParent.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")"
"getPath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")","getNonCompilablePath(""InputPackageDeclarationDiffDirectoryAtSubpackage.java"")"
"""Notes"".equals(subSectionName) || ""Rule Description"".equals(subSectionName)","""Notes"".equals(subSectionName) || ""Rule Description"".equals(subSectionName) || ""Metadata"".equals(subSectionName)"
mouseEvent.getModifiers(),mouseEvent.getModifiersEx()
mouseEvent.getModifiers(),mouseEvent.getModifiersEx()
1,17
17,1
1,1
ModuleReflectionUtils::isCheckstyleCheck,ModuleReflectionUtils::isCheckstyleTreeWalkerCheck
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(50)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(1024)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(256)
new StringBuilder(),new StringBuilder(50)
new StringBuilder(),new StringBuilder(50)
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
"Assert.assertEquals(configs.size(),1)","Assert.assertEquals(1,configs.size())"
new StringBuilder(),new StringBuilder(28)
new StringBuilder(),new StringBuilder(120)
9,1
8,9
8,9
0,1
1024,1025
@InputIntMethodAnnotation(42),@InputMagicNumberIntMethodAnnotation(42)
@InputIntMethodAnnotation(value=43),@InputMagicNumberIntMethodAnnotation(value=43)
@InputIntMethodAnnotation(-44),@InputMagicNumberIntMethodAnnotation(-44)
@InputIntMethodAnnotation(value=-45),@InputMagicNumberIntMethodAnnotation(value=-45)
/**   * The root package controller.   */ private PkgControl root; ,/**   * The root package controller.   */ private ImportControl root; 
/**   * The package controller for the current file. Used for performance optimisation.  */ private PkgControl currentLeaf; ,/**   * The package controller for the current file. Used for performance optimisation.  */ private ImportControl currentLeaf; 
{@link PkgControl},{@link ImportControl}
"new PkgControl(pkg,regex)","new ImportControl(pkg,regex)"
"new PkgControl(stack.peek(),name,regex)","new ImportControl(stack.peek(),name,regex)"
"/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static PkgControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException(""syntax error in url "" + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException(""unable to find "" + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } ","/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static ImportControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException(""syntax error in url "" + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException(""unable to find "" + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } "
"/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static PkgControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException(""unable to parse "" + uri + "" - ""+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException(""unable to read "" + uri,ex);   } } ","/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static ImportControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException(""unable to parse "" + uri + "" - ""+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException(""unable to read "" + uri,ex);   } } "
/**   * @return the root {@link PkgControl} object loaded.  */ private PkgControl getRoot(){   return stack.peek(); } ,/**   * @return the root {@link PkgControl} object loaded.  */ private ImportControl getRoot(){   return stack.peek(); } 
"final PkgControl root=ImportControlLoader.load(new File(getPath(""import-control_complete.xml"")).toURI()); ","final ImportControl root=ImportControlLoader.load(new File(getPath(""import-control_complete.xml"")).toURI()); "
"final PkgControl root=ImportControlLoader.load(new URI(""aaa://"" + getPath(""import-control_complete.xml""))); ","final ImportControl root=ImportControlLoader.load(new URI(""aaa://"" + getPath(""import-control_complete.xml""))); "
"final PkgControl root=ImportControlLoader.load(new File(getPath(""import-control_WithNewElement.xml"")).toURI()); ","final ImportControl root=ImportControlLoader.load(new File(getPath(""import-control_WithNewElement.xml"")).toURI()); "
4,12
"assertEquals(fc,fc2)","assertEquals(fc2,fc)"
"assertEquals(fc,fc2)","assertEquals(fc2,fc)"
"assertEquals(fc,fc2)","assertEquals(fc2,fc)"
"ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""font"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""u"",""ul"")","ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""font"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""u"",""ul"",""var"")"
0,1
24,25
"logError(lcurly,""lcurly"",lcurlyPos)","logError(lcurly,""lcurly"",lcurlyPos,curlyIndent())"
16,20
16,20
16,20
"getNonCompilablePath(""InputGenericWhitespaceEndsTheLine.java"")","getPath(""InputGenericWhitespaceEndsTheLine.java"")"
"getNonCompilablePath(""InputGenericWhitespaceEndsTheLine.java"")","getPath(""InputGenericWhitespaceEndsTheLine.java"")"
"getNonCompilablePath(""InputDefaultConfig.java"")","getPath(""InputDefaultConfig.java"")"
"getNonCompilablePath(""InputDefaultConfig.java"")","getPath(""InputDefaultConfig.java"")"
1024,1025
/**   * Checkstyle frame model.   */ private final transient CheckstyleFrameModel model=new CheckstyleFrameModel(); ,/**   * Checkstyle frame model.   */ private final transient MainFrameModel model=new MainFrameModel(); 
"/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX=""Check"";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName=""WARN"";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append(""] "").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append("": "").append(message);     final String checkShortName=getCheckShortName(event);     sb.append("" ["").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } ","/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX=""Check"";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName=""WARN"";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append(""] "").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append("": "").append(message);     final String checkShortName=getCheckShortName(event);     sb.append("" ["").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } "
/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; ,/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; 
AuditEvemtFormatter messageFormatter,AuditEventFormatter messageFormatter
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ,final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ,final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ,final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ,final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
"/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append("": "").append(message);     return sb.toString();   } } ","/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append("": "").append(message);     return sb.toString();   } } "
0,16
2,10
fail(),"fail(""IllegalArgumentException is expected"")"
0,1
0,1
/**   * Line number filter.   */ private CSVFilter lineFilter; ,/**   * Line number filter.   */ private CsvFilter lineFilter; 
/**   * Column number filter.   */ private CSVFilter columnFilter; ,/**   * Column number filter.   */ private CsvFilter columnFilter; 
new CSVFilter(lines),new CsvFilter(lines)
new CSVFilter(columns),new CsvFilter(columns)
private CSVFilter filter; ,private CsvFilter filter; 
"new CSVFilter("""")","new CsvFilter("""")"
"attributeMap.put(attributeName,value)",attributeMap.get(attributeName)
"Arrays.asList(""SuppressWithNearbyCommentFilter.fileContents"",""SuppressionCommentFilter.fileContents"",""MethodNameCheck.applyToPackage"",""MethodNameCheck.applyToPrivate"",""MethodNameCheck.applyToProtected"",""MethodNameCheck.applyToPublic"")","Arrays.asList(""SuppressWithNearbyCommentFilter.fileContents"",""SuppressionCommentFilter.fileContents"")"
"""unable to parse "" + abstractOption","""unable to parse "" + optionStr"
"""unable to parse "" + abstractOption","""unable to parse "" + optionStr"
"/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; ","/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; "
"/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; ","/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; "
"/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; ","/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; "
@IntMethodAnnotation(42),@InputIntMethodAnnotation(42)
@IntMethodAnnotation(value=43),@InputIntMethodAnnotation(value=43)
@IntMethodAnnotation(-44),@InputIntMethodAnnotation(-44)
@IntMethodAnnotation(value=-45),@InputIntMethodAnnotation(value=-45)
0,16
0,16
0,16
0,16
0,16
0,16
entry.getCheckName().equals(checkAlias),entry.getCheckName().equalsIgnoreCase(checkAlias)
entry.getCheckName().equals(checkAlias),entry.getCheckName().equalsIgnoreCase(checkAlias)
0,2
0,2
0,2
0,2
0,2
0,2
0,2
0,2
0,2
8,10
0,2
0,2
0,2
"/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends AbstractCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } ","/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends BaseCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } "
1025,1
"assertEquals(iter.next().getMessage(),""Unable to open ''."")","assertEquals(""Unable to open ''."",iter.next().getMessage())"
"assertEquals(ex.getCause().getMessage(),""Unable to read 2 bytes, got 0"")","assertEquals(""Unable to read 2 bytes, got 0"",ex.getCause().getMessage())"
"assertEquals(ex.getCause().getMessage(),""Unable to read 1 bytes, got 0"")","assertEquals(""Unable to read 1 bytes, got 0"",ex.getCause().getMessage())"
"assertEquals(ex.getCause().getMessage(),""ClassInfo's name should be non-null"")","assertEquals(""ClassInfo's name should be non-null"",ex.getCause().getMessage())"
new IOException(),"new IOException(""test exception"")"
2,10
2,10
"new InputStreamReader(bais,StandardCharsets.UTF_8)","new InputStreamReader(localStream,StandardCharsets.UTF_8)"
"new InputStreamReader(bais,StandardCharsets.UTF_8)","new InputStreamReader(localStream,StandardCharsets.UTF_8)"
2,10
2,10
1,0
12,8
17,16
1,0
1,0
2,10
4,0
4,0
9,9
new IllegalStateException(),"new IllegalStateException(""Comments are not consistent"")"
1,1
2,10
1,17
1,17
"private static class TestException extends Exception {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print(""stackTrace"");   } } ","private static class TestException extends RuntimeException {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print(""stackTrace"");   } } "
new IllegalArgumentException(),"new IllegalArgumentException(""Cannot determine if commit is consistent"")"
new IllegalArgumentException(),"new IllegalArgumentException(""'level' cannot be null"")"
new IOException(),"new IOException(""Test IOException"")"
new IllegalStateException(),"new IllegalStateException(""Test IllegalStateException"")"
new IllegalStateException(),"new IllegalStateException(""Test IllegalStateException"")"
new IllegalArgumentException(),new IllegalStateException()
0,16
private final Action reloadAction; ,private final ReloadAction reloadAction; 
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,1025
10,10
1,1
1,1
1,1
"new RuntimeException(String.format(""File \""%1$s\"" has incorrect indentation in comment."" + ""Line %2$d: comment:%3$d, actual:%4$d."",aFileName,lineNumber,indentInComment,actualIndent))","new IllegalStateException(String.format(""File \""%1$s\"" has incorrect indentation in comment."" + ""Line %2$d: comment:%3$d, actual:%4$d."",aFileName,lineNumber,indentInComment,actualIndent))"
"new RuntimeException(String.format(""File \""%1$s\"" has inconsistent comment on line %2$d"",aFileName,lineNumber))","new IllegalStateException(String.format(""File \""%1$s\"" has inconsistent comment on line %2$d"",aFileName,lineNumber))"
"new RuntimeException(String.format(""File \""%1$s\"" has no indentation comment or its format "" + ""malformed. Error on line: %2$d(%3$s)"",aFileName,lineNumber,line))","new IllegalStateException(String.format(""File \""%1$s\"" has no indentation comment or its format "" + ""malformed. Error on line: %2$d(%3$s)"",aFileName,lineNumber,line))"
"new Exception(""File "" + file.getPath() + "" should not exist"")","new IllegalStateException(""File "" + file.getPath() + "" should not exist"")"
"new RuntimeException(String.format(""File \""%1$s\"" has incorrect indentation in comment."" + ""Line %2$d: comment:%3$d, actual:%4$d."",aFileName,lineNumber,indentInComment,actualIndent))","new IllegalStateException(String.format(""File \""%1$s\"" has incorrect indentation in comment."" + ""Line %2$d: comment:%3$d, actual:%4$d."",aFileName,lineNumber,indentInComment,actualIndent))"
"new RuntimeException(String.format(""File \""%1$s\"" has inconsistent comment on line %2$d"",aFileName,lineNumber))","new IllegalStateException(String.format(""File \""%1$s\"" has inconsistent comment on line %2$d"",aFileName,lineNumber))"
"new RuntimeException(String.format(""File \""%1$s\"" has no indentation comment or its format "" + ""malformed. Error on line: %2$d"",aFileName,lineNumber))","new IllegalStateException(String.format(""File \""%1$s\"" has no indentation comment or its format "" + ""malformed. Error on line: %2$d"",aFileName,lineNumber))"
2,10
2,10
1,17
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
"assertEquals(counter,1)","assertEquals(1,counter)"
"assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)","assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())"
"Assert.assertEquals(stringNumber,0)","Assert.assertEquals(0,stringNumber)"
"Assert.assertEquals(""Wrong messages count: "" + messages.size(),messages.size(),1)","Assert.assertEquals(""Wrong messages count: "" + messages.size(),1,messages.size())"
"Assert.assertEquals(""Message key '"" + retrievedMessage + ""' is not valid"",retrievedMessage,""unable.open.cause"")","Assert.assertEquals(""Message key '"" + retrievedMessage + ""' is not valid"",""unable.open.cause"",retrievedMessage)"
"Assert.assertEquals(msg,""Unexpected token type: methodStub"")","Assert.assertEquals(""Unexpected token type: methodStub"",msg)"
1,9
"context.add(""exceptionalMethod"",123f)","context.add(""exceptionalMethod"",123.0f)"
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
1,9
2,10
2,10
2,10
2,10
2,10
2,10
"String.format(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>%n"" + ""<checkstyle version=\"""" + version + ""\"">%n""+ ""<file name=\""""+ expectedPath+ ""\"">%n""+ ""</file>%n""+ ""</checkstyle>%n"")","String.format(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>%n"" + ""<checkstyle version=\"""" + version + ""\"">%n""+ ""<file name=\""""+ expectedPath+ ""\"">%n""+ ""</file>%n""+ ""</checkstyle>%n"",version,expectedPath)"
"String.format(""Starting audit...%n"" + expectedPath + "":3:14: ""+ ""warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n""+ expectedPath+ "":5:7: ""+ ""warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n""+ ""Audit done.%n"")","String.format(""Starting audit...%n"" + expectedPath + "":3:14: ""+ ""warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n""+ expectedPath+ "":5:7: ""+ ""warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n""+ ""Audit done.%n"",expectedPath)"
"String.format(""Starting audit...%n"" + expectedPath + "":3:14: ""+ ""Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n""+ expectedPath+ "":5:7: ""+ ""Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n""+ ""Audit done.%n""+ ""Checkstyle ends with 2 errors.%n"")","String.format(""Starting audit...%n"" + expectedPath + "":3:14: ""+ ""Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n""+ expectedPath+ "":5:7: ""+ ""Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n""+ ""Audit done.%n""+ ""Checkstyle ends with 2 errors.%n"",expectedPath)"
"getSrcPath(""checks/javadoc/Input_01.java"")","getPath(""checks/javadoc/Input_01.java"")"
"getSrcPath(""checks/javadoc/Input_01.java"")","getPath(""checks/javadoc/Input_01.java"")"
"getSrcPath(""checks/javadoc/Input_02.java"")","getPath(""checks/javadoc/Input_02.java"")"
"getSrcPath(""checks/javadoc/Input_02.java"")","getPath(""checks/javadoc/Input_02.java"")"
"getSrcPath(""checks/javadoc/Input_03.java"")","getPath(""checks/javadoc/Input_03.java"")"
"getSrcPath(""checks/javadoc/Input_03.java"")","getPath(""checks/javadoc/Input_03.java"")"
1,1
1,1
8,10
8,10
25,24
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
1,17
0,16
0,16
1,17
4,20
new RuntimeException(msg.getMessage()),new IllegalStateException(msg.getMessage())
new RuntimeException(ex),new IllegalStateException(ex)
"new RuntimeException(""Unexpected rule: "" + ruleStr)","new IllegalStateException(""Unexpected rule: "" + ruleStr)"
1,1
2,10
"0 == CheckUtils.parseFloat(text,type)","0.0 == CheckUtils.parseFloat(text,type)"
"details.put(CONFIG_HASH_KEY,currentConfigHash)","details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"
"details.put(CONFIG_HASH_KEY,currentConfigHash)","details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"
"details.put(CONFIG_HASH_KEY,currentConfigHash)","details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"
"details.put(CONFIG_HASH_KEY,currentConfigHash)","details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"
"details.put(fileName,Long.toString(timestamp))","details.setProperty(fileName,Long.toString(timestamp))"
"details.put(fileName,Long.toString(timestamp))","details.setProperty(fileName,Long.toString(timestamp))"
"retVal.put(entry.getKey(),value)","retVal.setProperty(entry.getKey(),value)"
"retVal.put(entry.getKey(),value)","retVal.setProperty(entry.getKey(),value)"
"retVal.put(p.getKey(),p.getValue())","retVal.setProperty(p.getKey(),p.getValue())"
"retVal.put(p.getKey(),p.getValue())","retVal.setProperty(p.getKey(),p.getValue())"
final Object firstLineKey=lines.firstKey(); ,final Integer firstLineKey=lines.firstKey(); 
(ArrayInitHandler)getParent(),(BlockParentHandler)getParent()
2,10
writer.write(line),otherWriter.write(line)
writer.write(line),otherWriter.write(line)
writer.write(line),otherWriter.write(line)
writer.write(line),otherWriter.write(line)
2,10
obj.getAcceptableTokens(),obj.getRequiredTokens()
obj.getAcceptableTokens(),obj.getRequiredTokens()
obj.getAcceptableTokens(),obj.getRequiredTokens()
obj.getAcceptableTokens(),obj.getRequiredTokens()
obj.getAcceptableTokens(),obj.getRequiredTokens()
obj.getAcceptableTokens(),obj.getRequiredTokens()
1,9
"new Tag(text,line)","new Tag(text,line,this)"
1,9
"new Tag(line,column,text,on)","new Tag(line,column,text,on,this)"
"new NullPointerException(""the ast is null"")","new IllegalArgumentException(""the ast is null"")"
"new NullPointerException(""the ast is null"")","new IllegalArgumentException(""the ast is null"")"
"new NullPointerException(""the annotation is null"")","new IllegalArgumentException(""the annotation is null"")"
"new NullPointerException(""the ast is null"")","new IllegalArgumentException(""the ast is null"")"
"new NullPointerException(""the text is null"")","new IllegalArgumentException(""the text is null"")"
"new NullPointerException(""the name is null"")","new IllegalArgumentException(""the name is null"")"
"new NullPointerException(""ClassInfo's name should be non-null"")","new IllegalArgumentException(""ClassInfo's name should be non-null"")"
1034,10
2,10
"new FieldFrame(null,true,null,null)","new FieldFrame(null,true,null)"
"new FieldFrame(currentFrame,isStaticInnerType,type,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)","new FieldFrame(currentFrame,isStaticInnerType,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)"
0,8
0,8
new ArrayList<>(modifiers.length()),new ArrayList<>()
"ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,""Override"") || AnnotationUtility.containsAnnotation(methodDef,""java.lang.Override""))","ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,""Override"") || AnnotationUtility.containsAnnotation(methodDef,""java.lang.Override""))"
"ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,""Override"") || AnnotationUtility.containsAnnotation(methodDef,""java.lang.Override""))","ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,""Override"") || AnnotationUtility.containsAnnotation(methodDef,""java.lang.Override""))"
JavaDocTagContinuationIndentationCheck.class,JavadocTagContinuationIndentationCheck.class
"ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""font"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""ul"")","ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""font"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""u"",""ul"")"
"ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""ul"")","ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""font"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""ul"")"
"ImmutableSortedSet.of(""p"",""br"",""li"",""dt"",""dd"",""td"",""hr"",""img"",""tr"",""th"",""td"")","ImmutableSortedSet.of(""br"",""li"",""dt"",""dd"",""hr"",""img"",""p"",""td"",""tr"",""th"")"
"ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""del"",""div"",""dfn"",""dl"",""em"",""fieldset"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""ul"")","ImmutableSortedSet.of(""a"",""abbr"",""acronym"",""address"",""area"",""b"",""bdo"",""big"",""blockquote"",""br"",""caption"",""cite"",""code"",""colgroup"",""dd"",""del"",""div"",""dfn"",""dl"",""dt"",""em"",""fieldset"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""hr"",""i"",""img"",""ins"",""kbd"",""li"",""ol"",""p"",""pre"",""q"",""samp"",""small"",""span"",""strong"",""style"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""tt"",""ul"")"
DEFAULT_MAX_METHODS=999,DEFAULT_MAX_METHODS=100
"emptyCheck.log(0,""msgKey"",null)","emptyCheck.log(0,""msgKey"")"
super.getClass(),super.hashCode()
mStack.size() > 2,mStack.size() > 1
T,T1
/**   * Retrieves X.  * @return a value  */ public T getX(){   return null; } ,/**   * Retrieves X.  * @return a value  */ public T1 getX(){   return null; } 
Y,Y1
type == TokenTypes.CLASS_DEF,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
type == TokenTypes.CLASS_DEF,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
type == TokenTypes.CLASS_DEF,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF
type == TokenTypes.CLASS_DEF,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF
"logError(rcurly,""rcurly"",expandedTabsColumnNo(rcurly))","logError(rcurly,""rcurly"",expandedTabsColumnNo(rcurly),curlyLevel())"
2,18
1,17
10,26
1,17
1,17
modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL),modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)|| modifiers.branchContains(TokenTypes.LITERAL_STATIC)
mCheckUnusedThrows=aFlag,mAllowUndeclaredRTE=aFlag
if (mCheckUnusedThrows) {   processPackage(aAST); } ,if (mAllowUndeclaredRTE) {   processPackage(aAST); } 
if (mCheckUnusedThrows) {   processImport(aAST); } ,if (mAllowUndeclaredRTE) {   processImport(aAST); } 
"if (mCheckUnusedThrows) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),""javadoc.classInfo"",""@throws"",tag.getArg1());   } } ","if (mAllowUndeclaredRTE) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),""javadoc.classInfo"",""@throws"",tag.getArg1());   } } "
ast.getNextSibling() != null,ast != null && ast.getNextSibling() != null
0,2
0,1
0,1
0,1
0,1
new FileInputStream(props),new FileInputStream(aProps)
layout.setRefreshingLabel(label),layout.setReleaseLabel(label)
layout.setRefreshingLabel(label),layout.setReleaseLabel(label)
layout.setRefreshingLabel(label),layout.setReleaseLabel(label)
layout.setRefreshingLabel(label),layout.setReleaseLabel(label)
"refreshableViewWrapper.addView(newEmptyView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT)",refreshableViewWrapper.addView(newEmptyView)
view.getCurrentMode(),view.getMode()
view.getCurrentMode(),view.getMode()
mode == MODE_PULL_DOWN_TO_REFRESH,currentMode == MODE_PULL_DOWN_TO_REFRESH
mode == MODE_PULL_DOWN_TO_REFRESH,currentMode == MODE_PULL_DOWN_TO_REFRESH
c < ic,c > ic
(1L << n),~(1L << n)
SOURCE.deref(),SOURCE_PATH.deref()
SOURCE.deref(),SOURCE_PATH.deref()
SOURCE.deref(),SOURCE_PATH.deref()
SOURCE.deref(),SOURCE_PATH.deref()
"new CompilerException(sourceName,e.line,e.getCause())","new CompilerException(sourcePath,e.line,e.getCause())"
"new CompilerException(sourceName,e.line,e.getCause())","new CompilerException(sourcePath,e.line,e.getCause())"
(Object)x,(Double)x
(Object)y,(Double)y
c.getSimpleName(),c.getName()
c.getSimpleName(),c.getName()
i == -1,"i == -1 || nsname.equals(""/"")"
i == -1,"i == -1 || nsname.equals(""/"")"
s.count(),RT.count(s)
s.count(),RT.count(s)
s.count(),RT.count(s)
s.count(),RT.count(s)
"new HashCollisionNode(edit,count,hash,array)","new HashCollisionNode(edit,hash,count,array)"
"new HashCollisionNode(edit,count,hash,array)","new HashCollisionNode(edit,hash,count,array)"
e instanceof MaybePrimitiveExpr && e.hasJavaClass(),e instanceof MaybePrimitiveExpr && e.hasJavaClass() && ((MaybePrimitiveExpr)e).canEmitPrimitive()
targetClass != null,targetClass != null && field != null
form instanceof IObj && ((IObj)form).meta() != null,form instanceof IObj && !(form instanceof Var) && ((IObj)form).meta() != null
a.length >= count(),a.length > count()
a.length >= count(),a.length > count()
a.length >= count(),a.length > count()
((Number)s.first()).intValue(),((Number)s.first()).floatValue()
((Number)s.first()).intValue(),((Number)s.first()).floatValue()
((Number)s.first()).intValue(),((Number)s.first()).doubleValue()
((Number)s.first()).intValue(),((Number)s.first()).doubleValue()
((Number)s.first()).intValue(),((Number)s.first()).longValue()
((Number)s.first()).intValue(),((Number)s.first()).longValue()
x instanceof ISeq,x instanceof ISeq || x instanceof IPersistentList
targetClass != null,targetClass != null && field != null
i=0,i=1
n < count(coll),n >= 0 && n < count(coll)
a.length >= count(),a.length > count()
rt == Boolean.TYPE,rt == Boolean.TYPE && !(ret instanceof Boolean)
newroot.length == 1,shift > 0 && newroot.length == 1
invoke(args),doInvoke(args)
invoke(args),doInvoke(args)
"invoke(args.first(),args.rest())","doInvoke(args.first(),args.rest())"
"invoke(args.first(),args.rest())","doInvoke(args.first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
"invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())","doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
findModule(name),findModule(moduleName)
"jedis.sadd(getSetKey(task),request.getUrl()) > 0","jedis.sadd(getSetKey(task),request.getUrl()) == 0"
Site.me().setRetryTimes(3).setSleepTime(0),Site.me().setRetryTimes(3).setSleepTime(1000)
new SimpleProxyPool(httpProxyList),"new SimpleProxyPool(httpProxyList,false)"
cookies.columnMap(),cookies.rowMap()
cookies.columnMap(),cookies.rowMap()
Site.me().setRetryTimes(3).setSleepTime(100),Site.me().setRetryTimes(3).setSleepTime(1000)
Assert.assertNotNull(text),Assert.assertNotNull(s)
CollectionUtils.isNotEmpty(elements),CollectionUtils.isEmpty(elements)
CollectionUtils.isNotEmpty(elements),CollectionUtils.isEmpty(elements)
8,9
0,1
8,9
0,1
8,9
0,1
count < 0,count < 1
new LocalizedXStreams(classLoader),"new LocalizedXStreams(classLoader,runtimeOptions.getConverters())"
RuntimeGlue optionalGlue,Glue optionalGlue
RuntimeGlue optionalGlue,Glue optionalGlue
RuntimeGlue optionalGlue,Glue optionalGlue
RuntimeGlue optionalGlue,Glue optionalGlue
REAL_DRIVER.close(),REAL_DRIVER.quit()
REAL_DRIVER.close(),REAL_DRIVER.quit()
return false; ,return true; 
asList(4L),asList(8L)
assertFalse(predicate.apply(pickleEvent)),assertTrue(predicate.apply(pickleEvent))
assertFalse(predicate.apply(pickleEvent)),assertTrue(predicate.apply(pickleEvent))
return true; ,return false; 
asList(8L),asList(4L)
assertTrue(predicate.apply(pickleEvent)),assertFalse(predicate.apply(pickleEvent))
assertTrue(predicate.apply(pickleEvent)),assertFalse(predicate.apply(pickleEvent))
Class.forName(injectorSourceClassName),"Class.forName(injectorSourceClassName,true,Thread.currentThread().getContextClassLoader())"
"mavenBundle(""info.cukes"",""cucumber-jvm-deps"",""1.0.4-SNAPSHOT"")","mavenBundle(""info.cukes"",""cucumber-jvm-deps"")"
assertFalse(runtimeOptions.isMonochrome()),assertTrue(runtimeOptions.isMonochrome())
assertFalse(runtimeOptions.isMonochrome()),assertTrue(runtimeOptions.isMonochrome())
monochrome=false,monochrome=true
monochrome=true,monochrome=false
8,9
1,0
"assertEquals(actualPattern.pattern(),someName)","assertEquals(someName,actualPattern.pattern())"
"assertEquals(actualPattern.pattern(),someName)","assertEquals(someName,actualPattern.pattern())"
ArrayList<String>,List<String>
"Arrays.<Class<?>>asList(org.nd4j.linalg.api.ops.DynamicCustomOp.class,org.nd4j.linalg.api.ops.NoOp.class,org.nd4j.linalg.api.ops.custom.BarnesEdgeForces.class,org.nd4j.linalg.api.ops.custom.BarnesHutGains.class,org.nd4j.linalg.api.ops.custom.BarnesHutSymmetrize.class,org.nd4j.linalg.api.ops.custom.SpTreeCell.class,org.nd4j.linalg.api.ops.custom.Flatten.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAdd.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAddGrad.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAddOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastCopyOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastGradientArgs.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMulOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastEqualTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastNotEqual.class,org.nd4j.linalg.api.ops.impl.controlflow.If.class,org.nd4j.linalg.api.ops.impl.controlflow.IfDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.Select.class,org.nd4j.linalg.api.ops.impl.controlflow.Where.class,org.nd4j.linalg.api.ops.impl.controlflow.WhereNumpy.class,org.nd4j.linalg.api.ops.impl.controlflow.While.class,org.nd4j.linalg.api.ops.impl.controlflow.WhileDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Enter.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Exit.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.LoopCond.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Merge.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.NextIteration.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.StopGradient.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Switch.class,org.nd4j.linalg.api.ops.impl.grid.FreeGridOp.class,org.nd4j.linalg.api.ops.impl.image.CropAndResize.class,org.nd4j.linalg.api.ops.impl.image.ExtractImagePatches.class,org.nd4j.linalg.api.ops.impl.image.NonMaxSuppression.class,org.nd4j.linalg.api.ops.impl.image.ResizeBilinear.class,org.nd4j.linalg.api.ops.impl.image.ResizeNearestNeighbor.class,org.nd4j.linalg.api.ops.impl.indexaccum.FirstIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.LastIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMin.class,org.nd4j.linalg.api.ops.impl.layers.ExternalErrorsFunction.class,org.nd4j.linalg.api.ops.impl.layers.Linear.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNorm.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNormDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Col2Im.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv1D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DTF.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthToSpace.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthwiseConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2col.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2colBp.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalization.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalizationDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SpaceToDepth.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2d.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2dDerivative.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.GRUCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMBlockCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMLayer.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRU.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRUCell.class,org.nd4j.linalg.api.ops.impl.loss.AbsoluteDifferenceLoss.class,org.nd4j.linalg.api.ops.impl.loss.CosineDistanceLoss.class,org.nd4j.linalg.api.ops.impl.loss.HingeLoss.class,org.nd4j.linalg.api.ops.impl.loss.HuberLoss.class,org.nd4j.linalg.api.ops.impl.loss.L2Loss.class,org.nd4j.linalg.api.ops.impl.loss.LogLoss.class,org.nd4j.linalg.api.ops.impl.loss.LogPoissonLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanPairwiseSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.SigmoidCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyWithLogitsLoss.class,org.nd4j.linalg.api.ops.impl.loss.SparseSoftmaxCrossEntropyLossWithLogits.class,org.nd4j.linalg.api.ops.impl.loss.WeightedCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.bp.AbsoluteDifferenceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.CosineDistanceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HingeLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HuberLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogPoissonLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanPairwiseSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SigmoidCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyWithLogitsLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SparseSoftmaxCrossEntropyLossWithLogitsBp.class,org.nd4j.linalg.api.ops.impl.meta.InvertedPredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PostulateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.ReduceMetaOp.class,org.nd4j.linalg.api.ops.impl.nlp.CbowRound.class,org.nd4j.linalg.api.ops.impl.nlp.SkipGramRound.class,org.nd4j.linalg.api.ops.impl.reduce.HashCode.class,org.nd4j.linalg.api.ops.impl.reduce.Mmul.class,org.nd4j.linalg.api.ops.impl.reduce.MmulBp.class,org.nd4j.linalg.api.ops.impl.reduce.Moments.class,org.nd4j.linalg.api.ops.impl.reduce.NormalizeMoments.class,org.nd4j.linalg.api.ops.impl.reduce.SufficientStatistics.class,org.nd4j.linalg.api.ops.impl.reduce.TensorMmul.class,org.nd4j.linalg.api.ops.impl.reduce.ZeroFraction.class,org.nd4j.linalg.api.ops.impl.reduce.bool.All.class,org.nd4j.linalg.api.ops.impl.reduce.bool.Any.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumSumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.DotBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MeanBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MinBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm1Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm2Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.NormMaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.ProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SquaredNormBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.StandardDeviationBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.VarianceBp.class,org.nd4j.linalg.api.ops.impl.reduce.custom.BatchMmul.class,org.nd4j.linalg.api.ops.impl.reduce.custom.LogSumExp.class,org.nd4j.linalg.api.ops.impl.reduce.floating.AMean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Bias.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Entropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.LogEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Mean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm1.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm2.class,org.nd4j.linalg.api.ops.impl.reduce.floating.NormMax.class,org.nd4j.linalg.api.ops.impl.reduce.floating.ShannonEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.SquaredNorm.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountNonZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.MatchCondition.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMax.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMin.class,org.nd4j.linalg.api.ops.impl.reduce.same.ASum.class,org.nd4j.linalg.api.ops.impl.reduce.same.Max.class,org.nd4j.linalg.api.ops.impl.reduce.same.Min.class,org.nd4j.linalg.api.ops.impl.reduce.same.Prod.class,org.nd4j.linalg.api.ops.impl.reduce.same.Sum.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineSimilarity.class,org.nd4j.linalg.api.ops.impl.reduce3.Dot.class,org.nd4j.linalg.api.ops.impl.reduce3.EqualsWithEps.class,org.nd4j.linalg.api.ops.impl.reduce3.EuclideanDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.HammingDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.JaccardDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.ManhattanDistance.class,org.nd4j.linalg.api.ops.impl.scalar.LeakyReLU.class,org.nd4j.linalg.api.ops.impl.scalar.LogX.class,org.nd4j.linalg.api.ops.impl.scalar.Pow.class,org.nd4j.linalg.api.ops.impl.scalar.PowDerivative.class,org.nd4j.linalg.api.ops.impl.scalar.RectifiedLinear.class,org.nd4j.linalg.api.ops.impl.scalar.Relu6.class,org.nd4j.linalg.api.ops.impl.scalar.ReplaceNans.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarAdd.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarFMod.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMax.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMin.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMultiplication.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarRemainder.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSet.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.Step.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarAnd.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEps.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNot.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNotEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarOr.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarSetValue.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarXor.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterDiv.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMax.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMin.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMul.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdUpdate.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterUpdate.class,org.nd4j.linalg.api.ops.impl.shape.ApplyGradientDescent.class,org.nd4j.linalg.api.ops.impl.shape.Broadcast.class,org.nd4j.linalg.api.ops.impl.shape.BroadcastDynamicShape.class,org.nd4j.linalg.api.ops.impl.shape.Concat.class,org.nd4j.linalg.api.ops.impl.shape.ConfusionMatrix.class,org.nd4j.linalg.api.ops.impl.shape.Cross.class,org.nd4j.linalg.api.ops.impl.shape.Diag.class,org.nd4j.linalg.api.ops.impl.shape.DiagPart.class,org.nd4j.linalg.api.ops.impl.shape.ExpandDims.class,org.nd4j.linalg.api.ops.impl.shape.Eye.class,org.nd4j.linalg.api.ops.impl.shape.Gather.class,org.nd4j.linalg.api.ops.impl.shape.GatherNd.class,org.nd4j.linalg.api.ops.impl.shape.Linspace.class,org.nd4j.linalg.api.ops.impl.shape.MergeAvg.class,org.nd4j.linalg.api.ops.impl.shape.MergeMax.class,org.nd4j.linalg.api.ops.impl.shape.MergeSum.class,org.nd4j.linalg.api.ops.impl.shape.MeshGrid.class,org.nd4j.linalg.api.ops.impl.shape.OneHot.class,org.nd4j.linalg.api.ops.impl.shape.OnesLike.class,org.nd4j.linalg.api.ops.impl.shape.ParallelStack.class,org.nd4j.linalg.api.ops.impl.shape.Permute.class,org.nd4j.linalg.api.ops.impl.shape.Rank.class,org.nd4j.linalg.api.ops.impl.shape.ReductionShape.class,org.nd4j.linalg.api.ops.impl.shape.Repeat.class,org.nd4j.linalg.api.ops.impl.shape.Reshape.class,org.nd4j.linalg.api.ops.impl.shape.SequenceMask.class,org.nd4j.linalg.api.ops.impl.shape.Shape.class,org.nd4j.linalg.api.ops.impl.shape.ShapeN.class,org.nd4j.linalg.api.ops.impl.shape.Size.class,org.nd4j.linalg.api.ops.impl.shape.SizeAt.class,org.nd4j.linalg.api.ops.impl.shape.Slice.class,org.nd4j.linalg.api.ops.impl.shape.Split.class,org.nd4j.linalg.api.ops.impl.shape.SplitV.class,org.nd4j.linalg.api.ops.impl.shape.Squeeze.class,org.nd4j.linalg.api.ops.impl.shape.Stack.class,org.nd4j.linalg.api.ops.impl.shape.StridedSlice.class,org.nd4j.linalg.api.ops.impl.shape.Tile.class,org.nd4j.linalg.api.ops.impl.shape.Transpose.class,org.nd4j.linalg.api.ops.impl.shape.Unstack.class,org.nd4j.linalg.api.ops.impl.shape.ZerosLike.class,org.nd4j.linalg.api.ops.impl.shape.bp.ConcatBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.SliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.StridedSliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.TileBp.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArray.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayConcat.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayGather.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayRead.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayScatter.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySize.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySplit.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayWrite.class,org.nd4j.linalg.api.ops.impl.summarystats.StandardDeviation.class,org.nd4j.linalg.api.ops.impl.summarystats.Variance.class,org.nd4j.linalg.api.ops.impl.transforms.Angle.class,org.nd4j.linalg.api.ops.impl.transforms.Assert.class,org.nd4j.linalg.api.ops.impl.transforms.BinCount.class,org.nd4j.linalg.api.ops.impl.transforms.CheckNumerics.class,org.nd4j.linalg.api.ops.impl.transforms.Cholesky.class,org.nd4j.linalg.api.ops.impl.transforms.Constant.class,org.nd4j.linalg.api.ops.impl.transforms.Histogram.class,org.nd4j.linalg.api.ops.impl.transforms.HistogramFixedWidth.class,org.nd4j.linalg.api.ops.impl.transforms.IdentityN.class,org.nd4j.linalg.api.ops.impl.transforms.MaxOut.class,org.nd4j.linalg.api.ops.impl.transforms.NthElement.class,org.nd4j.linalg.api.ops.impl.transforms.Pad.class,org.nd4j.linalg.api.ops.impl.transforms.ReluLayer.class,org.nd4j.linalg.api.ops.impl.transforms.any.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.any.IsMax.class,org.nd4j.linalg.api.ops.impl.transforms.bool.BooleanNot.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsFinite.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.transforms.bool.MatchConditionTransform.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNorm.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByValue.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndReplace.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndSet.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.Eps.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMax.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMin.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldNotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ATan2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.custom.BatchToSpace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Choose.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumSum.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Dilation2D.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicPartition.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicStitch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.EqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxArgs.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxVars.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Fill.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InTopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InvertPermutation.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNonDecreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNumericTensor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsStrictlyIncreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNorm.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ListDiff.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogMatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogSoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalAnd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalNot.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalOr.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalXor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiagPart.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixInverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixSetDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Max.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Min.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MirrorPad.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.NotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ParallelConcat.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Pow.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Reverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseSequence.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseV2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SpaceToBatch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Standardize.class,org.nd4j.linalg.api.ops.impl.transforms.custom.StandardizeBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Svd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.TopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Trace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Unique.class,org.nd4j.linalg.api.ops.impl.transforms.custom.UniqueWithCounts.class,org.nd4j.linalg.api.ops.impl.transforms.custom.XwPlusB.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Zeta.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.dtype.Cast.class,org.nd4j.linalg.api.ops.impl.transforms.floating.RSqrt.class,org.nd4j.linalg.api.ops.impl.transforms.floating.Sqrt.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.CubeDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.DynamicPartitionBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.ELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.GradientBackwardsMarker.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardSigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LeakyReLUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LogSoftMaxDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RationalTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RectifiedTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.Relu6Derivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftSignDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftmaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.TanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryMinimalRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.RelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.Set.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.AddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.Axpy.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.CopyOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.DivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MergeAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.ModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAtan2Op.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldMulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.PowPairwise.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RealDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RemainderOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SquaredDifferenceOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.TruncateDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.AddBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.DivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorModBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.MulBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RSubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SquaredDifferenceBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.And.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Not.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Or.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Xor.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMax.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMin.class,org.nd4j.linalg.api.ops.impl.transforms.same.Abs.class,org.nd4j.linalg.api.ops.impl.transforms.same.Ceil.class,org.nd4j.linalg.api.ops.impl.transforms.same.Cube.class,org.nd4j.linalg.api.ops.impl.transforms.same.Floor.class,org.nd4j.linalg.api.ops.impl.transforms.same.Identity.class,org.nd4j.linalg.api.ops.impl.transforms.same.Max.class,org.nd4j.linalg.api.ops.impl.transforms.same.Min.class,org.nd4j.linalg.api.ops.impl.transforms.same.Negative.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldIdentity.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldReverse.class,org.nd4j.linalg.api.ops.impl.transforms.same.OneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.same.Reciprocal.class,org.nd4j.linalg.api.ops.impl.transforms.same.Round.class,org.nd4j.linalg.api.ops.impl.transforms.same.Sign.class,org.nd4j.linalg.api.ops.impl.transforms.same.Square.class,org.nd4j.linalg.api.ops.impl.transforms.same.TimesOneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSqrtN.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSqrtNBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erf.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erfc.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Exp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Expm1.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log1p.class,org.nd4j.linalg.api.ops.impl.transforms.strict.LogSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RationalTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RectifiedTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Rint.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SetRange.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftPlus.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftSign.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Stabilize.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Swish.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SwishDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanhDerivative.class,org.nd4j.linalg.api.ops.persistence.RestoreV2.class,org.nd4j.linalg.api.ops.persistence.SaveV2.class,org.nd4j.linalg.api.ops.random.compat.RandomStandardNormal.class,org.nd4j.linalg.api.ops.random.custom.DistributionUniform.class,org.nd4j.linalg.api.ops.random.custom.RandomBernoulli.class,org.nd4j.linalg.api.ops.random.custom.RandomExponential.class,org.nd4j.linalg.api.ops.random.custom.RandomNormal.class,org.nd4j.linalg.api.ops.random.impl.AlphaDropOut.class,org.nd4j.linalg.api.ops.random.impl.BernoulliDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistributionEx.class,org.nd4j.linalg.api.ops.random.impl.Choice.class,org.nd4j.linalg.api.ops.random.impl.DropOut.class,org.nd4j.linalg.api.ops.random.impl.DropOutInverted.class,org.nd4j.linalg.api.ops.random.impl.GaussianDistribution.class,org.nd4j.linalg.api.ops.random.impl.Linspace.class,org.nd4j.linalg.api.ops.random.impl.LogNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.ProbablisticMerge.class,org.nd4j.linalg.api.ops.random.impl.Range.class,org.nd4j.linalg.api.ops.random.impl.TruncatedNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.UniformDistribution.class)","Arrays.<Class<?>>asList(org.nd4j.linalg.api.ops.DynamicCustomOp.class,org.nd4j.linalg.api.ops.NoOp.class,org.nd4j.linalg.api.ops.custom.BarnesEdgeForces.class,org.nd4j.linalg.api.ops.custom.BarnesHutGains.class,org.nd4j.linalg.api.ops.custom.BarnesHutSymmetrize.class,org.nd4j.linalg.api.ops.custom.SpTreeCell.class,org.nd4j.linalg.api.ops.custom.Flatten.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAdd.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAddGrad.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAddOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastCopyOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastGradientArgs.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMulOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastEqualTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastNotEqual.class,org.nd4j.linalg.api.ops.impl.controlflow.If.class,org.nd4j.linalg.api.ops.impl.controlflow.IfDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.Select.class,org.nd4j.linalg.api.ops.impl.controlflow.Where.class,org.nd4j.linalg.api.ops.impl.controlflow.WhereNumpy.class,org.nd4j.linalg.api.ops.impl.controlflow.While.class,org.nd4j.linalg.api.ops.impl.controlflow.WhileDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Enter.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Exit.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.LoopCond.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Merge.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.NextIteration.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.StopGradient.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Switch.class,org.nd4j.linalg.api.ops.impl.grid.FreeGridOp.class,org.nd4j.linalg.api.ops.impl.image.CropAndResize.class,org.nd4j.linalg.api.ops.impl.image.ExtractImagePatches.class,org.nd4j.linalg.api.ops.impl.image.NonMaxSuppression.class,org.nd4j.linalg.api.ops.impl.image.ResizeBilinear.class,org.nd4j.linalg.api.ops.impl.image.ResizeNearestNeighbor.class,org.nd4j.linalg.api.ops.impl.indexaccum.FirstIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.LastIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMin.class,org.nd4j.linalg.api.ops.impl.layers.ExternalErrorsFunction.class,org.nd4j.linalg.api.ops.impl.layers.Linear.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNorm.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNormDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Col2Im.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv1D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DTF.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthToSpace.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthwiseConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2col.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2colBp.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalization.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalizationDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SpaceToDepth.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2d.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2dDerivative.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.GRUCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMBlockCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMLayer.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRU.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRUCell.class,org.nd4j.linalg.api.ops.impl.loss.AbsoluteDifferenceLoss.class,org.nd4j.linalg.api.ops.impl.loss.CosineDistanceLoss.class,org.nd4j.linalg.api.ops.impl.loss.HingeLoss.class,org.nd4j.linalg.api.ops.impl.loss.HuberLoss.class,org.nd4j.linalg.api.ops.impl.loss.L2Loss.class,org.nd4j.linalg.api.ops.impl.loss.LogLoss.class,org.nd4j.linalg.api.ops.impl.loss.LogPoissonLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanPairwiseSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.SigmoidCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyWithLogitsLoss.class,org.nd4j.linalg.api.ops.impl.loss.SparseSoftmaxCrossEntropyLossWithLogits.class,org.nd4j.linalg.api.ops.impl.loss.WeightedCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.bp.AbsoluteDifferenceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.CosineDistanceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HingeLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HuberLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogPoissonLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanPairwiseSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SigmoidCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyWithLogitsLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SparseSoftmaxCrossEntropyLossWithLogitsBp.class,org.nd4j.linalg.api.ops.impl.meta.InvertedPredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PostulateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.ReduceMetaOp.class,org.nd4j.linalg.api.ops.impl.nlp.CbowRound.class,org.nd4j.linalg.api.ops.impl.nlp.SkipGramRound.class,org.nd4j.linalg.api.ops.impl.reduce.HashCode.class,org.nd4j.linalg.api.ops.impl.reduce.Mmul.class,org.nd4j.linalg.api.ops.impl.reduce.MmulBp.class,org.nd4j.linalg.api.ops.impl.reduce.Moments.class,org.nd4j.linalg.api.ops.impl.reduce.NormalizeMoments.class,org.nd4j.linalg.api.ops.impl.reduce.SufficientStatistics.class,org.nd4j.linalg.api.ops.impl.reduce.TensorMmul.class,org.nd4j.linalg.api.ops.impl.reduce.ZeroFraction.class,org.nd4j.linalg.api.ops.impl.reduce.bool.All.class,org.nd4j.linalg.api.ops.impl.reduce.bool.Any.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumSumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.DotBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MeanBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MinBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm1Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm2Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.NormMaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.ProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SquaredNormBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.StandardDeviationBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.VarianceBp.class,org.nd4j.linalg.api.ops.impl.reduce.custom.BatchMmul.class,org.nd4j.linalg.api.ops.impl.reduce.custom.LogSumExp.class,org.nd4j.linalg.api.ops.impl.reduce.floating.AMean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Bias.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Entropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.LogEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Mean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm1.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm2.class,org.nd4j.linalg.api.ops.impl.reduce.floating.NormMax.class,org.nd4j.linalg.api.ops.impl.reduce.floating.ShannonEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.SquaredNorm.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountNonZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.MatchCondition.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMax.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMin.class,org.nd4j.linalg.api.ops.impl.reduce.same.ASum.class,org.nd4j.linalg.api.ops.impl.reduce.same.Max.class,org.nd4j.linalg.api.ops.impl.reduce.same.Min.class,org.nd4j.linalg.api.ops.impl.reduce.same.Prod.class,org.nd4j.linalg.api.ops.impl.reduce.same.Sum.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineSimilarity.class,org.nd4j.linalg.api.ops.impl.reduce3.Dot.class,org.nd4j.linalg.api.ops.impl.reduce3.EqualsWithEps.class,org.nd4j.linalg.api.ops.impl.reduce3.EuclideanDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.HammingDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.JaccardDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.ManhattanDistance.class,org.nd4j.linalg.api.ops.impl.scalar.LeakyReLU.class,org.nd4j.linalg.api.ops.impl.scalar.LogX.class,org.nd4j.linalg.api.ops.impl.scalar.Pow.class,org.nd4j.linalg.api.ops.impl.scalar.PowDerivative.class,org.nd4j.linalg.api.ops.impl.scalar.RectifiedLinear.class,org.nd4j.linalg.api.ops.impl.scalar.Relu6.class,org.nd4j.linalg.api.ops.impl.scalar.ReplaceNans.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarAdd.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarFMod.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMax.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMin.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMultiplication.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarRemainder.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSet.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.Step.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarAnd.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEps.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNot.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNotEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarOr.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarSetValue.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarXor.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterDiv.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMax.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMin.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMul.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdUpdate.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterUpdate.class,org.nd4j.linalg.api.ops.impl.shape.ApplyGradientDescent.class,org.nd4j.linalg.api.ops.impl.shape.Broadcast.class,org.nd4j.linalg.api.ops.impl.shape.BroadcastDynamicShape.class,org.nd4j.linalg.api.ops.impl.shape.Concat.class,org.nd4j.linalg.api.ops.impl.shape.ConfusionMatrix.class,org.nd4j.linalg.api.ops.impl.shape.Cross.class,org.nd4j.linalg.api.ops.impl.shape.Diag.class,org.nd4j.linalg.api.ops.impl.shape.DiagPart.class,org.nd4j.linalg.api.ops.impl.shape.ExpandDims.class,org.nd4j.linalg.api.ops.impl.shape.Eye.class,org.nd4j.linalg.api.ops.impl.shape.Gather.class,org.nd4j.linalg.api.ops.impl.shape.GatherNd.class,org.nd4j.linalg.api.ops.impl.shape.Linspace.class,org.nd4j.linalg.api.ops.impl.shape.MergeAvg.class,org.nd4j.linalg.api.ops.impl.shape.MergeMax.class,org.nd4j.linalg.api.ops.impl.shape.MergeSum.class,org.nd4j.linalg.api.ops.impl.shape.MeshGrid.class,org.nd4j.linalg.api.ops.impl.shape.OneHot.class,org.nd4j.linalg.api.ops.impl.shape.OnesLike.class,org.nd4j.linalg.api.ops.impl.shape.ParallelStack.class,org.nd4j.linalg.api.ops.impl.shape.Permute.class,org.nd4j.linalg.api.ops.impl.shape.Rank.class,org.nd4j.linalg.api.ops.impl.shape.ReductionShape.class,org.nd4j.linalg.api.ops.impl.shape.Repeat.class,org.nd4j.linalg.api.ops.impl.shape.Reshape.class,org.nd4j.linalg.api.ops.impl.shape.SequenceMask.class,org.nd4j.linalg.api.ops.impl.shape.Shape.class,org.nd4j.linalg.api.ops.impl.shape.ShapeN.class,org.nd4j.linalg.api.ops.impl.shape.Size.class,org.nd4j.linalg.api.ops.impl.shape.SizeAt.class,org.nd4j.linalg.api.ops.impl.shape.Slice.class,org.nd4j.linalg.api.ops.impl.shape.Split.class,org.nd4j.linalg.api.ops.impl.shape.SplitV.class,org.nd4j.linalg.api.ops.impl.shape.Squeeze.class,org.nd4j.linalg.api.ops.impl.shape.Stack.class,org.nd4j.linalg.api.ops.impl.shape.StridedSlice.class,org.nd4j.linalg.api.ops.impl.shape.Tile.class,org.nd4j.linalg.api.ops.impl.shape.Transpose.class,org.nd4j.linalg.api.ops.impl.shape.Unstack.class,org.nd4j.linalg.api.ops.impl.shape.ZerosLike.class,org.nd4j.linalg.api.ops.impl.shape.bp.ConcatBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.SliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.StridedSliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.TileBp.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArray.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayConcat.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayGather.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayRead.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayScatter.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySize.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySplit.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayWrite.class,org.nd4j.linalg.api.ops.impl.summarystats.StandardDeviation.class,org.nd4j.linalg.api.ops.impl.summarystats.Variance.class,org.nd4j.linalg.api.ops.impl.transforms.Angle.class,org.nd4j.linalg.api.ops.impl.transforms.Assert.class,org.nd4j.linalg.api.ops.impl.transforms.BinCount.class,org.nd4j.linalg.api.ops.impl.transforms.CheckNumerics.class,org.nd4j.linalg.api.ops.impl.transforms.Cholesky.class,org.nd4j.linalg.api.ops.impl.transforms.Constant.class,org.nd4j.linalg.api.ops.impl.transforms.Histogram.class,org.nd4j.linalg.api.ops.impl.transforms.HistogramFixedWidth.class,org.nd4j.linalg.api.ops.impl.transforms.IdentityN.class,org.nd4j.linalg.api.ops.impl.transforms.MaxOut.class,org.nd4j.linalg.api.ops.impl.transforms.NthElement.class,org.nd4j.linalg.api.ops.impl.transforms.Pad.class,org.nd4j.linalg.api.ops.impl.transforms.ReluLayer.class,org.nd4j.linalg.api.ops.impl.transforms.any.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.any.IsMax.class,org.nd4j.linalg.api.ops.impl.transforms.bool.BooleanNot.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsFinite.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.transforms.bool.MatchConditionTransform.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNorm.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByValue.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndReplace.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndSet.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.Eps.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMax.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMin.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldNotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ATan2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.custom.BatchToSpace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Choose.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumSum.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Dilation2D.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicPartition.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicStitch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.EqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxArgs.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxVars.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Fill.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InTopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InvertPermutation.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNonDecreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNumericTensor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsStrictlyIncreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNorm.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ListDiff.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogMatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogSoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalAnd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalNot.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalOr.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalXor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiagPart.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixInverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixSetDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Max.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Min.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MirrorPad.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.NotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ParallelConcat.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Pow.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Reverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseSequence.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseV2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SpaceToBatch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Standardize.class,org.nd4j.linalg.api.ops.impl.transforms.custom.StandardizeBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Svd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.TopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Trace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Unique.class,org.nd4j.linalg.api.ops.impl.transforms.custom.UniqueWithCounts.class,org.nd4j.linalg.api.ops.impl.transforms.custom.XwPlusB.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Zeta.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.dtype.Cast.class,org.nd4j.linalg.api.ops.impl.transforms.floating.RSqrt.class,org.nd4j.linalg.api.ops.impl.transforms.floating.Sqrt.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.CubeDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.DynamicPartitionBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.ELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.GradientBackwardsMarker.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardSigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LeakyReLUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LogSoftMaxDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RationalTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RectifiedTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.Relu6Derivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftSignDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftmaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.TanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryMinimalRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.RelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.Set.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.AddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.Axpy.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.CopyOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.DivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MergeAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.ModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAtan2Op.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldMulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.PowPairwise.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RealDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RemainderOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SquaredDifferenceOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.TruncateDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.AddBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.DivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorModBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.MulBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RSubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SquaredDifferenceBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.And.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Not.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Or.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Xor.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMax.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMin.class,org.nd4j.linalg.api.ops.impl.transforms.same.Abs.class,org.nd4j.linalg.api.ops.impl.transforms.same.Ceil.class,org.nd4j.linalg.api.ops.impl.transforms.same.Cube.class,org.nd4j.linalg.api.ops.impl.transforms.same.Floor.class,org.nd4j.linalg.api.ops.impl.transforms.same.Identity.class,org.nd4j.linalg.api.ops.impl.transforms.same.Max.class,org.nd4j.linalg.api.ops.impl.transforms.same.Min.class,org.nd4j.linalg.api.ops.impl.transforms.same.Negative.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldIdentity.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldReverse.class,org.nd4j.linalg.api.ops.impl.transforms.same.OneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.same.Reciprocal.class,org.nd4j.linalg.api.ops.impl.transforms.same.Round.class,org.nd4j.linalg.api.ops.impl.transforms.same.Sign.class,org.nd4j.linalg.api.ops.impl.transforms.same.Square.class,org.nd4j.linalg.api.ops.impl.transforms.same.TimesOneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSqrtN.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSqrtNBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erf.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erfc.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Exp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Expm1.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log1p.class,org.nd4j.linalg.api.ops.impl.transforms.strict.LogSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RationalTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RectifiedTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Rint.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SetRange.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftPlus.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftSign.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Stabilize.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Swish.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SwishDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanhDerivative.class,org.nd4j.linalg.api.ops.persistence.RestoreV2.class,org.nd4j.linalg.api.ops.persistence.SaveV2.class,org.nd4j.linalg.api.ops.random.compat.RandomStandardNormal.class,org.nd4j.linalg.api.ops.random.custom.DistributionUniform.class,org.nd4j.linalg.api.ops.random.custom.RandomBernoulli.class,org.nd4j.linalg.api.ops.random.custom.RandomExponential.class,org.nd4j.linalg.api.ops.random.custom.RandomNormal.class,org.nd4j.linalg.api.ops.random.impl.AlphaDropOut.class,org.nd4j.linalg.api.ops.random.impl.BernoulliDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistributionEx.class,org.nd4j.linalg.api.ops.random.impl.Choice.class,org.nd4j.linalg.api.ops.random.impl.DropOut.class,org.nd4j.linalg.api.ops.random.impl.DropOutInverted.class,org.nd4j.linalg.api.ops.random.impl.GaussianDistribution.class,org.nd4j.linalg.api.ops.random.impl.Linspace.class,org.nd4j.linalg.api.ops.random.impl.LogNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.ProbablisticMerge.class,org.nd4j.linalg.api.ops.random.impl.Range.class,org.nd4j.linalg.api.ops.random.impl.TruncatedNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.UniformDistribution.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ShiftBits.class,org.nd4j.linalg.api.ops.impl.transforms.custom.RShiftBits.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CyclicShiftBits.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CyclicRShiftBits.class)"
Nd4j.getAffinityManager().getDeviceForThread(Thread.currentThread()),Nd4j.getAffinityManager().getDeviceForCurrentThread()
Nd4j.getAffinityManager().getDeviceForThread(Thread.currentThread()),Nd4j.getAffinityManager().getDeviceForCurrentThread()
maxRelError=1e-4,maxRelError=1e-3
"new ProcessBuilder(java,vmArguments,""-cp"",h2jar.getAbsolutePath(),Server.class.getName(),""-tcp"",""-baseDir"",tempDir.resolve(""database-in-time-zone"").toString())","new ProcessBuilder(java,vmArguments,""-cp"",h2jar.getAbsolutePath(),Server.class.getName(),""-tcp"",""-ifNotExists"",""-baseDir"",tempDir.resolve(""database-in-time-zone"").toString())"
"assertThat(throttledLines(Duration.milliseconds(100))).doesNotHaveDuplicates().haveAtLeast(9,containsApplicationLog).haveAtMost(12,containsApplicationLog)","assertThat(throttledLines(Duration.milliseconds(100))).doesNotHaveDuplicates().haveAtLeast(9,containsApplicationLog).haveAtMost(13,containsApplicationLog)"
soLingerTime.toSeconds(),soLingerTime.toMilliseconds()
soLingerTime.toSeconds(),soLingerTime.toMilliseconds()
assertThat(connector.getSoLingerTime()).isEqualTo(30),assertThat(connector.getSoLingerTime()).isEqualTo(30000)
http2c.setInitialStreamSendWindow(initialStreamSendWindow),http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
http2c.setInitialStreamSendWindow(initialStreamSendWindow),http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
http2.setInitialStreamSendWindow(initialStreamSendWindow),http2.setInitialStreamRecvWindow(initialStreamSendWindow)
http2.setInitialStreamSendWindow(initialStreamSendWindow),http2.setInitialStreamRecvWindow(initialStreamSendWindow)
http2c.setInitialStreamSendWindow(initialStreamSendWindow),http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
http2c.setInitialStreamSendWindow(initialStreamSendWindow),http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
http2.setInitialStreamSendWindow(initialStreamSendWindow),http2.setInitialStreamRecvWindow(initialStreamSendWindow)
http2.setInitialStreamSendWindow(initialStreamSendWindow),http2.setInitialStreamRecvWindow(initialStreamSendWindow)
"assertThat(getField(graphite,""port"")).isEqualTo(8080)","assertThat(getField(graphite,""port"")).isEqualTo(2003)"
"assertThat(getField(graphite,""port"")).isEqualTo(8080)","assertThat(getField(graphite,""port"")).isEqualTo(2003)"
requestReceived.await(),"requestReceived.await(10,TimeUnit.SECONDS)"
8,40
8,40
8,40
2,10
2,10
2,10
2,10
2,10
"logException(id,exception)",logException(exception)
"logException(id,exception)",logException(exception)
"LOGGER.debug(""Unable to process JSON"",exception)","LOGGER.warn(""Unable to process JSON"",exception)"
"LOGGER.debug(""Unable to process JSON"",exception)","LOGGER.warn(""Unable to process JSON"",exception)"
JsonProcessingExceptionMapper.class,JacksonMessageBodyProvider.class
"new InstrumentedHttpRequestExecutor(metricRegistry,metricNameStrategy)","new InstrumentedHttpRequestExecutor(metricRegistry,metricNameStrategy,name)"
0,1
17,1
Optional.of(Duration.seconds(1)),Optional.absent()
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit()),CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit()),CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit()),CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit()),CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
yamlFactory.createJsonParser(input),yamlFactory.createParser(input)
yamlFactory.createJsonParser(input),yamlFactory.createParser(input)
"assertThat(response).isEqualToIgnoringCase(""Woop woop. yay\n"")","assertThat(response).isEqualTo(""Woop woop. yay\n"")"
"assertThat(response).isEqualToIgnoringCase(""Woop woop. yay\n"")","assertThat(response).isEqualTo(""Woop woop. yay\n"")"
"assertThat(response).isEqualToIgnoringCase(""Ok.\n"")","assertThat(response).isEqualTo(""Ok.\n"")"
"assertThat(response).isEqualToIgnoringCase(""Ok.\n"")","assertThat(response).isEqualTo(""Ok.\n"")"
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
mapper.getJsonFactory(),mapper.getFactory()
req.getServletPath(),req.getPathInfo()
req.getServletPath(),req.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
req.getServletPath(),req.getPathInfo()
req.getServletPath(),req.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
request.getServletPath(),request.getPathInfo()
req.getRequestURI(),req.getServletPath()
req.getRequestURI(),req.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
request.getRequestURI(),request.getServletPath()
"checkArgument(!""/"".equals(resourcePath),""%s is the classpath root"")","checkArgument(!""/"".equals(resourcePath),""%s is the classpath root"",resourcePath)"
"checkArgument(!""/"".equals(resourcePath),""%s is the classpath root"")","checkArgument(!""/"".equals(resourcePath),""%s is the classpath root"",resourcePath)"
Logger.getLogger(loggerName).getLevel(),Logger.getLogger(loggerName).getEffectiveLevel()
Logger.getLogger(loggerName).getLevel(),Logger.getLogger(loggerName).getEffectiveLevel()
Size.kilobytes(32),Size.kilobytes(16)
Size.kilobytes(3),Size.kilobytes(6)
Duration.seconds(1),Duration.seconds(200)
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IOException {   return JSON.writeValueAsString(object); } ,/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IllegalArgumentException {   return JSON.writeValueAsString(object); } 
"new InstrumentedTimingCollector(Metrics.defaultRegistry(),Database.class)",new InstrumentedTimingCollector(Metrics.defaultRegistry())
c.isEncoded(),!c.isEncoded()
reg.getCounters(transformFilter(filter)),reg.getHistograms(transformFilter(filter))
reg.getCounters(transformFilter(filter)),reg.getHistograms(transformFilter(filter))
reg.getCounters(transformFilter(filter)),reg.getMeters(transformFilter(filter))
reg.getCounters(transformFilter(filter)),reg.getMeters(transformFilter(filter))
reg.getCounters(transformFilter(filter)),reg.getTimers(transformFilter(filter))
reg.getCounters(transformFilter(filter)),reg.getTimers(transformFilter(filter))
Gauge<Object>,Gauge<Integer>
@Override public Object getValue(){   return getThreadCount(state); } ,@Override public Integer getValue(){   return getThreadCount(state); } 
Gauge<Object>,Gauge<Integer>
@Override public Object getValue(){   return getThreadCount(state); } ,@Override public Integer getValue(){   return getThreadCount(state); } 
JmxReporter.class,DefaultObjectNameFactory.class
registered.add(objectName),registered.remove(objectName)
registered.add(objectName),registered.remove(objectName)
"executor.scheduleWithFixedDelay(this,period,period,unit)","executor.scheduleAtFixedRate(this,period,period,unit)"
"executor.scheduleWithFixedDelay(this,period,period,unit)","executor.scheduleAtFixedRate(this,period,period,unit)"
"executor.scheduleWithFixedDelay(this,period,period,unit)","executor.scheduleAtFixedRate(this,period,period,unit)"
"executor.scheduleWithFixedDelay(this,period,period,unit)","executor.scheduleAtFixedRate(this,period,period,unit)"
context.getContextPath(),request.getContextPath()
context.getContextPath(),request.getContextPath()
infos == null | infos.length == 0,infos == null || infos.length == 0
metricName.getName(),metricName.toString()
metricName.getName(),metricName.toString()
ti > 0,ti >= 0
ti > 0,ti >= 0
9,25
0,16
0,16
0,16
lockForRescale(),unlockForRescale()
lockForRescale(),unlockForRescale()
lockForRegularUsage(),lockForRescale()
lockForRegularUsage(),lockForRescale()
unlockForRegularUsage(),lockForRescale()
unlockForRegularUsage(),lockForRescale()
bean.getCollectionCount(),bean.getCollectionTime()
bean.getCollectionCount(),bean.getCollectionTime()
bean.getCollectionCount(),bean.getCollectionTime()
bean.getCollectionCount(),bean.getCollectionTime()
sanitizedName(name),sanitizeName(name)
sanitizedName(name),sanitizeName(name)
sanitizedName(name),sanitizeName(name)
sanitizedName(name),sanitizeName(name)
"uri.equals(""/"")","uri == null || uri.equals(""/"")"
newCount < reservoirSize,newCount <= reservoirSize
c < values.length(),c <= values.length()
threads.isEmpty(),!threads.isEmpty()
"MessageFormat.format(TEMPLATE,metricsUri,pingUri,threadsUri,healthcheckUri)","MessageFormat.format(TEMPLATE,path,metricsUri,path,pingUri,path,threadsUri,path,healthcheckUri)"
"binder.bindConstant().annotatedWith(Names.named(""tlsServicePort"")).to(8091)","binder.bindConstant().annotatedWith(Names.named(""tlsServicePort"")).to(8291)"
"resource.getUser(req,AUTHORIZER_NAME,user,"""")","resource.getUser(req,AUTHORIZER_NAME,user,"""",null)"
1,1
1,1
"log.error(""Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s]."",oldCommitMetadataBytesFromDb,startMetadata)","log.error(""Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s]."",oldCommitMetadataFromDb,startMetadata)"
CliBroker.class,CliRealtimeExample.class
"CalciteTests.createMockSystemSchema(druidSchema,walker)","CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"
"CalciteTests.createMockSystemSchema(druidSchema,walker)","CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"
"CalciteTests.createMockSystemSchema(druidSchema,walker)","CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"
"CalciteTests.createMockSystemSchema(druidSchema,walker)","CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"
"@PathParam(""createdTimeInterval"")","@QueryParam(""createdTimeInterval"")"
ExprEval.of(null),ExprEval.ofLong(null)
ExprEval.of(null),ExprEval.ofLong(null)
ExprEval.of(null),ExprEval.ofDouble(null)
ExprEval.of(null),ExprEval.ofDouble(null)
"@PathParam(""interval"")","@QueryParam(""interval"")"
Object... pathParams,String... pathParams
PostgreSQLConnector.class,PostgreSQLConnectorConfig.class
file.length() >= Integer.MAX_VALUE,file.length() > Integer.MAX_VALUE
addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment(),addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()
maxRowsPerFrame=100_000,maxRowsPerFrame=5000
stopTimeNs - responseStartTimeNs,stopTimeNs - requestStartTimeNs
stopTimeNs - responseStartTimeNs,stopTimeNs - requestStartTimeNs
timeout=60_000L,timeout=120_000L
timeout=30000,timeout=90000
"adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)","adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)"
timeLeft >= 0,timeLeft <= 0
"log.error(""Metric=[%s] has no StatsD type mapping"",statsDMetric)","log.debug(""Metric=[%s] has no StatsD type mapping"",statsDMetric)"
"log.error(""Metric=[%s] has no StatsD type mapping"",statsDMetric)","log.debug(""Metric=[%s] has no StatsD type mapping"",statsDMetric)"
"ImmutableList.<PostAggregator>of(new ExpressionPostAggregator(""a3"",""log((\""a1\"" + \""a2\""))""))","ImmutableList.of(new ExpressionPostAggregator(""a3"",""log((\""a1\"" + \""a2\""))""),new ArithmeticPostAggregator(""a4"",""quotient"",ImmutableList.of(new FieldAccessPostAggregator(null,""a1""),new ConstantPostAggregator(null,0.25))))"
Exception e,Throwable e
POLL_PERIOD=100L,POLL_PERIOD=1000L
dimensionsSpec.getDimensions(),dimensionsSpec.getDimensionNames()
dimensionsSpec.getDimensions(),dimensionsSpec.getDimensionNames()
timeout=10_000L,timeout=60_000L
"log.warn(""Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d]."")","log.warn(""Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d]."",currValidWorkers,maxWorkerCount)"
DEFAULT_ROW_FLUSH_BOUNDARY=80000,DEFAULT_ROW_FLUSH_BOUNDARY=75000
defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary,defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary
DEFAULT_ROW_FLUSH_BOUNDARY=500000,DEFAULT_ROW_FLUSH_BOUNDARY=75000
defaultMaxRowsInMemory=500000,defaultMaxRowsInMemory=75000
Optional.of(resourceManagement.getStats()),Optional.fromNullable(resourceManagement.getStats())
Optional.of(resourceManagement.getStats()),Optional.fromNullable(resourceManagement.getStats())
"log.warn(e,""Graceful shutdown of task[%s] aborted with exception."")","log.warn(e,""Graceful shutdown of task[%s] aborted with exception."",task.getId())"
1024,1025
0,1
0,1
1024,1025
TIMEOUT_SECONDS=5,TIMEOUT_SECONDS=20
response.getStatus().getCode() / 200,response.getStatus().getCode() / 100
response.getStatus().getCode() / 200,response.getStatus().getCode() / 100
new IndexSizeExceededException(getOutOfRowsReason()),"new IndexSizeExceededException(""%s"",getOutOfRowsReason())"
NoopChatHandlerProvider.class,ServiceAnnouncingChatHandlerProvider.class
NoopChatHandlerProvider.class,ServiceAnnouncingChatHandlerProvider.class
mapper.writeValueAsString(segment),mapper.writeValueAsBytes(segment)
mapper.writeValueAsString(segment),mapper.writeValueAsBytes(segment)
mapper.writeValueAsString(segment),mapper.writeValueAsBytes(segment)
mapper.writeValueAsString(segment),mapper.writeValueAsBytes(segment)
9,12
"queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)","queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"
"queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)","queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"
"queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)","queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"
"waitYieldLatch.await(25,TimeUnit.MILLISECONDS)","waitYieldLatch.await(1000,TimeUnit.MILLISECONDS)"
"waitLatch.await(25,TimeUnit.MILLISECONDS)","waitLatch.await(1000,TimeUnit.MILLISECONDS)"
"waitYieldLatch.await(25,TimeUnit.MILLISECONDS)",waitYieldLatch.await()
"waitLatch.await(25,TimeUnit.MILLISECONDS)",waitLatch.await()
SingleServerInventoryProvider.class,FilteredBatchServerViewProvider.class
SingleServerInventoryProvider.class,BatchServerInventoryViewProvider.class
SingleServerInventoryProvider.class,FilteredBatchServerViewProvider.class
SingleServerInventoryProvider.class,BatchServerInventoryViewProvider.class
numConnections=5,numConnections=20
numConnections=5,numConnections=20
List<String>,Iterable<String>
"new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)","new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))"
"new JSONParseSpec(new TimestampSpec(""timestamp"",""iso""),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)","new JSONParseSpec(new TimestampSpec(""timestamp"",""iso""),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))"
"new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(Arrays.asList(""dim1"",""dim2""),null,null),JSONParseSpec.JSON)","new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(Arrays.asList(""dim1"",""dim2""),null,null))"
"new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)","new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(null,null,null))"
"new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)","new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))"
"new JSONParseSpec(new TimestampSpec(""timestamp"",""iso""),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)","new JSONParseSpec(new TimestampSpec(""timestamp"",""iso""),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))"
"new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(Arrays.asList(""dim1"",""dim2""),null,null),JSONParseSpec.JSON)","new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(Arrays.asList(""dim1"",""dim2""),null,null))"
"new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)","new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(null,null,null))"
Optional<ZkWorker>,Optional<ImmutableZkWorker>
indexOutURI.getPath(),indexOutURI.toString()
indexOutURI.getPath(),indexOutURI.toString()
indexOutURI.getPath(),indexOutURI.toString()
indexOutURI.getPath(),indexOutURI.toString()
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions(),timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions(),timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions(),timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions(),timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
"binder.bindConstant().annotatedWith(Names.named(""servicePort"")).to(8081)","binder.bindConstant().annotatedWith(Names.named(""servicePort"")).to(8089)"
event.remove(factory.getName()),event.get(factory.getName())
event.remove(factory.getName()),event.get(factory.getName())
sections.remove(section),sections.get(section)
sections.remove(section),sections.get(section)
currentlyProcessing.addCallback(callback),holder.addCallback(callback)
currentlyProcessing.addCallback(callback),holder.addCallback(callback)
currentlyProcessing.addCallback(callback),holder.addCallback(callback)
currentlyProcessing.addCallback(callback),holder.addCallback(callback)
!shuttingDown,shuttingDown
minPriority == null ? 1 : minPriority,minPriority == null ? 0 : minPriority
"new PriorityTieredBrokerSelectorStrategy(1,1)","new PriorityTieredBrokerSelectorStrategy(0,1)"
"new PriorityTieredBrokerSelectorStrategy(1,1)","new PriorityTieredBrokerSelectorStrategy(0,1)"
"new PriorityTieredBrokerSelectorStrategy(0,1)","new PriorityTieredBrokerSelectorStrategy(1,1)"
minPriority == null ? 0 : minPriority,minPriority == null ? 1 : minPriority
ServiceAnnouncingChatHandlerProvider.class,NoopChatHandlerProvider.class
multiValueRow.get(1),multiValueRow.get(0)
NoopChatHandlerProvider.class,ServiceAnnouncingChatHandlerProvider.class
NoopChatHandlerProvider.class,ServiceAnnouncingChatHandlerProvider.class
i <= Integer.MAX_VALUE,i < Integer.MAX_VALUE
"new JavaScriptAggregatorFactory(name,Arrays.asList(input),fnAggregate,fnReset,fnCombine)","new JavaScriptAggregatorFactory(input,Arrays.asList(input),fnAggregate,fnReset,fnCombine)"
"new CardinalityAggregatorFactory(name,Arrays.asList(input),byRow)","new CardinalityAggregatorFactory(input,Arrays.asList(input),byRow)"
return false; ,return true; 
query.getDimensionSpec().preservesOrdering(),!query.getDimensionSpec().preservesOrdering()
"new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null)","new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null,null)"
"new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec(""ts"",""iso""),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),""\t"",Arrays.asList(COLUMNS)),null,null,null)","new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec(""ts"",""iso""),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),""\t"",Arrays.asList(COLUMNS)),null,null,null,null)"
"new StringInputRowParser(new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(Arrays.asList(""dim1"",""dim2""),null,null)),null,null,null)","new StringInputRowParser(new JSONParseSpec(new TimestampSpec(""timestamp"",""auto""),new DimensionsSpec(Arrays.asList(""dim1"",""dim2""),null,null)),null,null,null,null)"
"Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(""0500-01-01/2100-12-31"")).build(),now))","Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(""0500-01-01/2100-12-31"")).build(),now))"
"Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(""0500-01-01/2100-12-31"")).build(),now))","Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(""0500-01-01/2100-12-31"")).build(),now))"
"Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))","Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))"
"Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))","Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))"
cacheConfig.isPopulateCache(),cacheConfig.isUseCache()
cacheConfig.isPopulateCache(),cacheConfig.isUseCache()
return 1; ,return 0; 
postAgg.getName().equals(topNMetricName),postAgg.getName().equalsIgnoreCase(topNMetricName)
postAgg.getName().equals(topNMetricName),postAgg.getName().equalsIgnoreCase(topNMetricName)
postAgg.getName().equals(metricName),postAgg.getName().equalsIgnoreCase(metricName)
postAgg.getName().equals(metricName),postAgg.getName().equalsIgnoreCase(metricName)
new S3DataSegmentMover(mockS3Client),"new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"
new S3DataSegmentMover(mockS3Client),"new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"
new S3DataSegmentMover(mockS3Client),"new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"
new S3DataSegmentMover(mockS3Client),"new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"
new S3DataSegmentMover(mockS3Client),"new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"
new S3DataSegmentMover(mockS3Client),"new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"
row.size() == 0,row == null || row.size() == 0
row.size() == 0,row == null || row.size() == 0
row.size() == 0,row == null || row.size() == 0
row.size() == 0,row == null || row.size() == 0
"new DirectDruidClient(warehose,smileMapper,httpClient,server.getHost())","new DirectDruidClient(warehouse,smileMapper,httpClient,server.getHost())"
maxPendingPersists > 0,maxPendingPersists <= 0
complexColumnCache.values(),objectColumnCache.values()
complexColumnCache.values(),objectColumnCache.values()
"log.info(""Wanted to terminate %,d workers, but couldn't find any lazy ones!"")","log.info(""Wanted to terminate %,d workers, but couldn't find any lazy ones!"",excessWorkers)"
IllegalArgumentException e,Exception e
IllegalArgumentException e,Exception e
S3DataSegmentKiller.class,S3DataSegmentMover.class
"flushAfterDuration(entry.getKey(),entry.getValue())","abandonSegment(entry.getKey(),entry.getValue())"
"flushAfterDuration(entry.getKey(),entry.getValue())","abandonSegment(entry.getKey(),entry.getValue())"
new IncrementalIndexSegment(rtIndex),"new IncrementalIndexSegment(rtIndex,null)"
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex()),"new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(),null)"
new IncrementalIndexSegment(index),"new IncrementalIndexSegment(index,null)"
new IncrementalIndexSegment(rtIndex),"new IncrementalIndexSegment(rtIndex,null)"
new IncrementalIndexSegment(rtIndex),"new IncrementalIndexSegment(rtIndex,null)"
"Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()","!Iterables.isEmpty(batchServerInventoryView.getInventory()) && Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()"
NoopSegmentPublisher.class,DbSegmentPublisher.class
KafkaEightDruidModule.class,KafkaEightFirehoseFactory.class
0,16
0,16
runningTasks.get(assignedTask),runningTasks.remove(assignedTask)
runningTasks.get(assignedTask),runningTasks.remove(assignedTask)
Optional.of(resourceManagementScheduler),Optional.fromNullable(resourceManagementScheduler)
Optional.of(resourceManagementScheduler),Optional.fromNullable(resourceManagementScheduler)
!segments.add(segment),segments.add(segment)
!segments.add(segment),segments.add(segment)
2,66
zkWorker.getWorker(),zkWorker2.getWorker()
zkWorker.getWorker(),zkWorker2.getWorker()
getCurrCapacity(),getCurrCapacityUsed()
getCurrCapacity(),getCurrCapacityUsed()
getCurrCapacity(),getCurrCapacityUsed()
getCurrCapacity(),getCurrCapacityUsed()
"log.info(""Performing lookup: %s --> %s"",ips,retVal)","log.debug(""Performing lookup: %s --> %s"",ips,retVal)"
"log.info(""Performing lookup: %s --> %s"",ips,retVal)","log.debug(""Performing lookup: %s --> %s"",ips,retVal)"
"log.info(""Performing lookup: %s --> %s"",nodeIds,retVal)","log.debug(""Performing lookup: %s --> %s"",nodeIds,retVal)"
"log.info(""Performing lookup: %s --> %s"",nodeIds,retVal)","log.debug(""Performing lookup: %s --> %s"",nodeIds,retVal)"
"log.info(""Cannot scale anymore. Num workers = %d, Max num workers = %d"",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())","log.debug(""Cannot scale anymore. Num workers = %d, Max num workers = %d"",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())"
"log.info(""Cannot scale anymore. Num workers = %d, Max num workers = %d"",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())","log.debug(""Cannot scale anymore. Num workers = %d, Max num workers = %d"",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())"
"log.makeAlert(""Failed to remove segment"")","log.makeAlert(e,""Failed to remove segment"")"
"log.info(""Worker nodes %s do not have capacity to run any more tasks!"",zkWorkers.values())","log.debug(""Worker nodes %s do not have capacity to run any more tasks!"",zkWorkers.values())"
"log.info(""Worker nodes %s do not have capacity to run any more tasks!"",zkWorkers.values())","log.debug(""Worker nodes %s do not have capacity to run any more tasks!"",zkWorkers.values())"
args.length != 3,args.length != 2
System.getProperty(propName),props.getProperty(propName)
System.getProperty(propName),props.getProperty(propName)
gran.next(timeStart),gran.next(input)
gran.next(timeStart),gran.next(input)
timeMillis - MILLIS_IN,timeMillis + MILLIS_IN
timeMillis - MILLIS_IN,timeMillis + MILLIS_IN
"new DataSegment(""test"",new Interval(""2012-02-01/2012-02-02""),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)","new DataSegment(""test"",new Interval(""2012-02-01/2012-02-02""),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)"
"new DataSegment(""test"",new Interval(""2012-02-01/2012-02-02""),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)","new DataSegment(""test"",new Interval(""2012-02-01/2012-02-02""),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)"
"segmentsInCluster.get(segment.getIdentifier(),server.getTier())","loadingSegments.get(segment.getIdentifier(),server.getTier())"
"segmentsInCluster.get(segment.getIdentifier(),server.getTier())","loadingSegments.get(segment.getIdentifier(),server.getTier())"
serverQueue.add(holder),assignedServers.add(holder)
serverQueue.add(holder),assignedServers.add(holder)
server.getSegment(segment.getIdentifier()) != null && peon.getSegmentsToLoad().contains(segment),server.getSegment(segment.getIdentifier()) != null || peon.getSegmentsToLoad().contains(segment)
Base64.encodeBytes(key),"Base64.encodeBytes(key,Base64.DONT_BREAK_LINES)"
config.getStorageImpl(),config.getStrategyImpl()
config.getStorageImpl(),config.getStrategyImpl()
startServer(),startServer(testAddress)
"client.getVertx().setTimer(1,id -> checkExpired())","client.getVertx().setTimer(1000,id -> checkExpired())"
"client.getVertx().setTimer(1,id -> checkExpired())","client.getVertx().setTimer(1000,id -> checkExpired())"
33,1
initialCapacity < capacity,initialCapacity <= capacity
initialCapacity < capacity,initialCapacity <= capacity
testComplete(),complete()
testComplete(),complete()
0,1
new IllegalStateException(),"new IllegalStateException(""Result is already complete: failed"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: failed"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: failed"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: failed"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: failed"")"
1,0
1,0
new IllegalStateException(),"new IllegalStateException(""Result is already complete: succeeded"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: succeeded"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: succeeded"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: succeeded"")"
new IllegalStateException(),"new IllegalStateException(""Result is already complete: succeeded"")"
"waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,30_000)","waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,60_000)"
"waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,30_000)","waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,60_000)"
"waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,30_000)","waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,60_000)"
"waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,30_000)","waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,60_000)"
"waitUntil(() -> clusterManager.getNodes().size() == 2,30_000)","waitUntil(() -> clusterManager.getNodes().size() == 2,60_000)"
DEFAULT_MAX_QUERIES=3,DEFAULT_MAX_QUERIES=4
frameHandler.getClass() == FrameAggregator.class,frameHandler.getClass() != FrameAggregator.class
new Argument().setIndex(0),new Argument().setIndex(1)
"v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )","v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )"
"v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )","v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )"
"testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()","testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"
"testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()","testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"
"testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()","testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"
"testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()","testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"
"name.substring(0,name.length() - 1)",name.toString()
"synchronized (conn) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } ","synchronized (this) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } "
"Assert.assertTrue(""Was not expecting this output "" + acc,System.currentTimeMillis() - now < 5000)",Assert.assertTrue(System.currentTimeMillis() - now < 5000)
Assert.assertTrue(System.currentTimeMillis() - now < 5000),"Assert.assertTrue(""Was not expecting this output "" + acc,System.currentTimeMillis() - now < 5000)"
1,33
1,33
TestUtils.randomByte() + 127,TestUtils.randomByte() + 128
TestUtils.randomByte() + 127,TestUtils.randomByte() + 128
TestUtils.randomByte() + 127,TestUtils.randomByte() + 128
TestUtils.randomByte() + 127,TestUtils.randomByte() + 128
"log.trace(""Failed to deploy!!"")","log.trace(""Failed to deploy!!"",res2.cause())"
"log.trace(""Failed to deploy!!"")","log.trace(""Failed to deploy!!"",res2.cause())"
ar.cause(),asyncResult.cause()
ar.cause(),asyncResult.cause()
ar.cause(),ar2.cause()
ar.cause(),ar2.cause()
TestUtils.randomByte() + 127,TestUtils.randomByte() + 128
AsyncResult<Boolean>,AsyncResult<Void>
"startTest(getMethodName(),false)",startTest(getMethodName())
AsyncResult<InetAddress>,AsyncResult<Inet4Address>
"/**   * This exception is for stopping retries for S3 calls that shouldn't be retried. For example, ""Caused by: com.amazonaws.services.s3.model.AmazonS3Exception: Forbidden (Service: Amazon S3; Status Code: 403 ...""  */ @VisibleForTesting static class UnrecoverableS3OperationException extends RuntimeException {   public UnrecoverableS3OperationException(  Path path,  Throwable cause){     super(format(""%s (Path: %s)"",cause,path),cause);   } } ","/**   * This exception is for stopping retries for S3 calls that shouldn't be retried. For example, ""Caused by: com.amazonaws.services.s3.model.AmazonS3Exception: Forbidden (Service: Amazon S3; Status Code: 403 ...""  */ @VisibleForTesting static class UnrecoverableS3OperationException extends IOException {   public UnrecoverableS3OperationException(  Path path,  Throwable cause){     super(format(""%s (Path: %s)"",cause,path),cause);   } } "
RuntimeException.class,IOException.class
RuntimeException.class,IOException.class
RuntimeException.class,IOException.class
1,1
planNode.getPlanNodeScheduledTime(),planNode.getPlanNodeCpuTime()
planNode.getPlanNodeScheduledTime(),planNode.getPlanNodeCpuTime()
planNode.getPlanNodeCpuTime(),planNode.getPlanNodeScheduledTime()
planNode.getPlanNodeCpuTime(),planNode.getPlanNodeScheduledTime()
"new CreateTable(temporaryTableName,ImmutableList.of(new LikeClause(originalTableName,Optional.of(INCLUDING))),false,tablePropertiesOverride,Optional.empty())","new CreateTable(temporaryTableName,ImmutableList.of(new LikeClause(originalTableName,Optional.of(INCLUDING))),false,tablePropertyOverrides,Optional.empty())"
"new CreateTableAsSelect(temporaryTableName,(Query)statement,false,tablePropertiesOverride,true,Optional.of(generateStorageColumnAliases((Query)statement,controlConfiguration,context)),Optional.empty())","new CreateTableAsSelect(temporaryTableName,(Query)statement,false,tablePropertyOverrides,true,Optional.of(generateStorageColumnAliases((Query)statement,controlConfiguration,context)),Optional.empty())"
expected.getType().equals(actual.getType().toString()),expected.getType().equalsIgnoreCase(actual.getType().toString())
expected.getType().equals(actual.getType().toString()),expected.getType().equalsIgnoreCase(actual.getType().toString())
writtenOutputPhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes(),writtenIntermediatePhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()
type != REPARTITION,type == REPARTITION
"recordDefaults(HiveS3Config.class).setS3AwsAccessKey(null).setS3AwsSecretKey(null).setS3Endpoint(null).setS3SignerType(null).setS3PathStyleAccess(false).setS3UseInstanceCredentials(true).setS3SslEnabled(true).setS3SseEnabled(false).setS3SseType(PrestoS3SseType.S3).setS3SseKmsKeyId(null).setS3KmsKeyId(null).setS3EncryptionMaterialsProvider(null).setS3MaxClientRetries(5).setS3MaxErrorRetries(10).setS3MaxBackoffTime(new Duration(10,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(10,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(5,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(5,TimeUnit.SECONDS)).setS3MultipartMinFileSize(new DataSize(16,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(5,Unit.MEGABYTE)).setS3MaxConnections(500).setS3StagingDirectory(new File(StandardSystemProperty.JAVA_IO_TMPDIR.value())).setPinS3ClientToCurrentRegion(false).setS3UserAgentPrefix("""").setS3AclType(PrestoS3AclType.PRIVATE).setSkipGlacierObjects(true)","recordDefaults(HiveS3Config.class).setS3AwsAccessKey(null).setS3AwsSecretKey(null).setS3Endpoint(null).setS3SignerType(null).setS3PathStyleAccess(false).setS3UseInstanceCredentials(true).setS3SslEnabled(true).setS3SseEnabled(false).setS3SseType(PrestoS3SseType.S3).setS3SseKmsKeyId(null).setS3KmsKeyId(null).setS3EncryptionMaterialsProvider(null).setS3MaxClientRetries(5).setS3MaxErrorRetries(10).setS3MaxBackoffTime(new Duration(10,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(10,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(5,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(5,TimeUnit.SECONDS)).setS3MultipartMinFileSize(new DataSize(16,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(5,Unit.MEGABYTE)).setS3MaxConnections(500).setS3StagingDirectory(new File(StandardSystemProperty.JAVA_IO_TMPDIR.value())).setPinS3ClientToCurrentRegion(false).setS3UserAgentPrefix("""").setS3AclType(PrestoS3AclType.PRIVATE).setSkipGlacierObjects(false)"
"new HiveS3Config().setS3AwsAccessKey(""abc123"").setS3AwsSecretKey(""secret"").setS3Endpoint(""endpoint.example.com"").setS3SignerType(PrestoS3SignerType.S3SignerType).setS3PathStyleAccess(true).setS3UseInstanceCredentials(false).setS3SslEnabled(false).setS3SseEnabled(true).setS3SseType(PrestoS3SseType.KMS).setS3SseKmsKeyId(""KMS_KEY_ID"").setS3EncryptionMaterialsProvider(""EMP_CLASS"").setS3KmsKeyId(""KEY_ID"").setS3MaxClientRetries(9).setS3MaxErrorRetries(8).setS3MaxBackoffTime(new Duration(4,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(20,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(8,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(4,TimeUnit.MINUTES)).setS3MultipartMinFileSize(new DataSize(32,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(15,Unit.MEGABYTE)).setS3MaxConnections(77).setS3StagingDirectory(new File(""/s3-staging"")).setPinS3ClientToCurrentRegion(true).setS3UserAgentPrefix(""user-agent-prefix"").setS3AclType(PrestoS3AclType.PUBLIC_READ).setSkipGlacierObjects(false)","new HiveS3Config().setS3AwsAccessKey(""abc123"").setS3AwsSecretKey(""secret"").setS3Endpoint(""endpoint.example.com"").setS3SignerType(PrestoS3SignerType.S3SignerType).setS3PathStyleAccess(true).setS3UseInstanceCredentials(false).setS3SslEnabled(false).setS3SseEnabled(true).setS3SseType(PrestoS3SseType.KMS).setS3SseKmsKeyId(""KMS_KEY_ID"").setS3EncryptionMaterialsProvider(""EMP_CLASS"").setS3KmsKeyId(""KEY_ID"").setS3MaxClientRetries(9).setS3MaxErrorRetries(8).setS3MaxBackoffTime(new Duration(4,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(20,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(8,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(4,TimeUnit.MINUTES)).setS3MultipartMinFileSize(new DataSize(32,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(15,Unit.MEGABYTE)).setS3MaxConnections(77).setS3StagingDirectory(new File(""/s3-staging"")).setPinS3ClientToCurrentRegion(true).setS3UserAgentPrefix(""user-agent-prefix"").setS3AclType(PrestoS3AclType.PUBLIC_READ).setSkipGlacierObjects(true)"
"booleanProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,""Experimental: Use dynamic schedule for grouped execution when possible"",false,featuresConfig.isDynamicScheduleForGroupedExecutionEnabled())","booleanProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,""Experimental: Use dynamic schedule for grouped execution when possible"",featuresConfig.isDynamicScheduleForGroupedExecutionEnabled(),false)"
declaredIntentionToWrite.getMode() != DIRECT_TO_TARGET_NEW_DIRECTORY,declaredIntentionToWrite.getMode() == DIRECT_TO_TARGET_NEW_DIRECTORY
ImmutableList.of(),ImmutableList.of(sourceNode)
checkArgument(partitionColumns.size() == values.size()),"checkArgument(partitionColumns.size() == values.size(),""Partition value count does not match the partition column count"")"
"computeSemiJoin(inputStatistics,inputStatistics,unknown,u)","computeAntiJoin(inputStatistics,inputStatistics,unknown,u)"
"computeSemiJoin(inputStatistics,inputStatistics,unknown,u)","computeAntiJoin(inputStatistics,inputStatistics,unknown,u)"
"computeSemiJoin(inputStatistics,inputStatistics,x,unknown)","computeAntiJoin(inputStatistics,inputStatistics,x,unknown)"
"computeSemiJoin(inputStatistics,inputStatistics,x,unknown)","computeAntiJoin(inputStatistics,inputStatistics,x,unknown)"
blocked.isDone(),!blocked.isDone()
TransactionMetadata::setInActive,TransactionMetadata::setInactive
"Objects.equals(builtInVersion,configuredVersion)","!Objects.equals(builtInVersion,configuredVersion)"
page.getSizeInBytes(),page.getLogicalSizeInBytes()
page.getSizeInBytes(),page.getLogicalSizeInBytes()
"new RuntimeException(""error initializing deserializer: "" + deserializer.getClass().getName())","new RuntimeException(""error initializing deserializer: "" + deserializer.getClass().getName(),e)"
"context.createTaskContext().addPipelineContext(0,true,true)","context.createTaskContext().addPipelineContext(0,true,true,false)"
16,17
version.getUpdate().getAsInt() >= 92,version.getUpdate().getAsInt() >= 151
"LOG.error(e,""Unexpected failure when handling parsing error. This is likely a bug in the implementation"")","LOG.error(exception,""Unexpected failure when handling parsing error. This is likely a bug in the implementation"")"
getRawFieldBlock(i).getSizeInBytes(),"getRawFieldBlock(i).getRegionSizeInBytes(rowIndex,1)"
"row(""p_comment"",null,1.0,0.0,null,null,null)","row(""p_comment"",null,7.0,0.0,null,null,null)"
"row(""p_comment"",null,1.0,0.0,null,null,null)","row(""p_comment"",null,7.0,0.0,null,null,null)"
"row(""p_comment"",null,1.0,0.0,null,null,null)","row(""p_comment"",null,7.0,0.0,null,null,null)"
"row(""p_comment"",null,1.0,0.0,null,null,null)","row(""p_comment"",null,7.0,0.0,null,null,null)"
"row(""p_comment"",null,1.0,0.0,null,null,null)","row(""p_comment"",null,5.0,0.0,null,null,null)"
DEFAULT_DATA_SIZE_PER_COLUMN=10,DEFAULT_DATA_SIZE_PER_COLUMN=50
sliceInput.length(),sliceInput.getRetainedSize()
sliceInput.length(),sliceInput.getRetainedSize()
compressedSliceInput.length(),compressedSliceInput.getRetainedSize()
compressedSliceInput.length(),compressedSliceInput.getRetainedSize()
page.getSizeInBytes(),page.getRetainedSizeInBytes()
page.getSizeInBytes(),page.getRetainedSizeInBytes()
"new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionValues)","new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionNames)"
"response.setHeader(WWW_AUTHENTICATE,value)","response.addHeader(WWW_AUTHENTICATE,value)"
"response.setHeader(WWW_AUTHENTICATE,value)","response.addHeader(WWW_AUTHENTICATE,value)"
WebAppResource.class,WebUiResource.class
256 << zoomLevel,256L << zoomLevel
table.getParameters(),partition.getParameters()
table.getParameters(),partition.getParameters()
"getExpressionTypesFromInput(TEST_SESSION,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())","getExpressionTypesFromInput(session,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())"
lastPosition < positionCount,lastPosition <= positionCount
slice.getAddress(),source.getAddress()
slice.getAddress(),source.getAddress()
"checkPlanDoNotMatch(exchange(),""Expected rules to be fired before 'AddExchanges' optimizer"")","checkNoPlanNodeMatches(exchange(),""Expected rules to be fired before 'AddExchanges' optimizer"")"
"checkPlanDoNotMatch(exchange(),""Expected rules to be fired before 'AddExchanges' optimizer"")","checkNoPlanNodeMatches(exchange(),""Expected rules to be fired before 'AddExchanges' optimizer"")"
protected abstract BlockBuilder getBlock(); ,protected abstract Block getBlock(); 
@Override protected BlockBuilder getBlock(){   return blockBuilder; } ,@Override protected Block getBlock(){   return blockBuilder; } 
"expectQueryToFail(""UserWith:Colon"",ldapUserPassword,INVALID_CREDENTIALS_ERROR)","expectQueryToFail(""UserWith:Colon"",ldapUserPassword,MALFORMED_CREDENTIALS_ERROR)"
stop < start,stop <= start
"Reflection.methodHandle(type,""sizeOf"",null)","Reflection.methodHandle(type,""sizeOf"")"
"Reflection.methodHandle(bigArrayField.getType(),""sizeOf"",null)","Reflection.methodHandle(bigArrayField.getType(),""sizeOf"")"
new HashMap<>(queryMemoryReservations),new HashMap<>(queryMemoryRevocableReservations)
Set<String>,Set<Object>
"visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription())","visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription(),target.isInterface())"
((VarcharType)type).getLength(),((VarcharType)type).getLengthSafe()
((VarcharType)type).getLength(),((VarcharType)type).getLengthSafe()
"format(""RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}"")","format(""RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}"",numFields)"
cachedMemoryUsageBytes < softMemoryLimitBytes,cachedMemoryUsageBytes <= softMemoryLimitBytes
new MockQueryExecution(1),new MockQueryExecution(2)
new MockQueryExecution(1),new MockQueryExecution(2)
"shardDao.insertShard(shard,tableId,null,0,0,0)","shardDao.insertShard(shard,tableId,null,0,0,0,0)"
Column::toString,Column::getName
config.getMaxQueryMemoryPerNode().toBytes() < maxMemory.toBytes(),config.getMaxQueryMemoryPerNode().toBytes() <= maxMemory.toBytes()
Objects.hash(expressions),"Objects.hash(expressions,withOrdinality)"
"ImmutableList.of(new Identifier(""a""))","ImmutableList.of(new Identifier(""a""),new Identifier(""b""))"
2,66
2,66
isDistinct(child),!isDistinct(child)
new IdentityHashMap<>(values.length),new IdentityHashMap<>()
"row(null,null,null,null,null,null,null,null,null,null,null,null,null,null)","row(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)"
SingleMapBlockWriter.class,SingleMapBlock.class
host.getHostText(),host.getHost()
host.getHostText(),host.getHost()
host.getHostText(),host.getHost()
host.getHostText(),host.getHost()
metastore.getHostText(),metastore.getHost()
metastore.getHostText(),metastore.getHost()
proxy.getHostText(),proxy.getHost()
proxy.getHostText(),proxy.getHost()
address.getHostText(),address.getHost()
address.getHostText(),address.getHost()
"new SemanticException(TYPE_MISMATCH,node,""column %d in %s query has incompatible types: %s, %s"",i,outputFieldTypes[i].getDisplayName(),setOperationName,descFieldType.getDisplayName())","new SemanticException(TYPE_MISMATCH,node,""column %d in %s query has incompatible types: %s, %s"",i,setOperationName,outputFieldTypes[i].getDisplayName(),descFieldType.getDisplayName())"
exchange.getPartitioningScheme().isReplicateNulls(),exchange.getPartitioningScheme().isReplicateNullsAndAny()
exchange.getPartitioningScheme().isReplicateNulls(),exchange.getPartitioningScheme().isReplicateNullsAndAny()
lastFailureException instanceof ConnectException,lastFailureException instanceof SocketTimeoutException
"resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,DOUBLE,VARCHAR)","resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,REAL,DOUBLE,VARCHAR)"
buildPages.getTypes(),buildPages.getTypesWithoutHash()
buildPages.getTypes(),buildPages.getTypesWithoutHash()
buildPages.getTypes(),buildPages.getTypesWithoutHash()
buildPages.getTypes(),buildPages.getTypesWithoutHash()
buildPages.getTypes(),buildPages.getTypesWithoutHash()
buildPages.getTypes(),buildPages.getTypesWithoutHash()
"HIVE_TABLE_OFFLINE(2,EXTERNAL)","HIVE_TABLE_OFFLINE(2,USER_ERROR)"
"HIVE_PARTITION_OFFLINE(6,EXTERNAL)","HIVE_PARTITION_OFFLINE(6,USER_ERROR)"
2,34
2,34
2,34
1,33
"VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)","VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)"
"VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)","VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)"
ImmutableList.of(),ImmutableList.of(base)
nodeManager.getAllNodes(),nodeManager.getWorkerNodes()
nodeManager.getAllNodes(),nodeManager.getWorkerNodes()
Database.builder(),Database.builder(database)
"booleanSessionProperty(LEGACY_ORDER_BY,""Use legacy rules for column resolution in ORDER BY clause"",false,featuresConfig.isLegacyOrderBy())","booleanSessionProperty(LEGACY_ORDER_BY,""Use legacy rules for column resolution in ORDER BY clause"",featuresConfig.isLegacyOrderBy(),false)"
!tableLayoutHandle.getPartitions().isPresent(),tableLayoutHandle.getPartitions().isPresent()
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
new UnsupportedOperationException(),new UnsupportedOperationException(getClass().getName())
type.toUpperCase(ENGLISH),type.toLowerCase(ENGLISH)
type.toUpperCase(ENGLISH),type.toLowerCase(ENGLISH)
1,33
sequenceFileVersion == SEQUENCE_FILE_VERSION,sequenceFileVersion != SEQUENCE_FILE_VERSION
32,0
TupleDomain.none(),TupleDomain.all()
TupleDomain.none(),TupleDomain.all()
"new PrestoException(HIVE_FILESYSTEM_ERROR,e)","new PrestoException(HIVE_FILESYSTEM_ERROR,""Failed to list directory: "" + path,e)"
0,2
"shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())","shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)"
getTaskWriterCount(session) > 1,getTaskWriterCount(session) > 1 && !node.getPartitioningScheme().isPresent()
"new Duration(10,TimeUnit.SECONDS)","new Duration(60,TimeUnit.SECONDS)"
"new Duration(10,TimeUnit.SECONDS)","new Duration(60,TimeUnit.SECONDS)"
types.get(channel),types.get(i)
types.get(channel),types.get(i)
TABLE_COMMIT,TABLE_FINISH
child.getProperties().isNodePartitionedOn(partitioningRequirement),child.getProperties().isStreamPartitionedOn(partitioningRequirement)
child.getProperties().isNodePartitionedOn(partitioningRequirement),child.getProperties().isStreamPartitionedOn(partitioningRequirement)
"relations.replace(oldName,newTable) != null","relations.replace(oldName,newTable) == null"
"type.createBlockBuilder(new BlockBuilderStatus(),100)","type.createBlockBuilder(new BlockBuilderStatus(),4)"
2,34
2,34
analysis.getTypeWithCoercions(aggregate),analysis.getType(aggregate)
analysis.getTypeWithCoercions(aggregate),analysis.getType(aggregate)
analysis.getTypeWithCoercions(windowFunction),analysis.getType(windowFunction)
analysis.getTypeWithCoercions(windowFunction),analysis.getType(windowFunction)
analysis.getType(aggregate),analysis.getTypeWithCoercions(aggregate)
analysis.getType(aggregate),analysis.getTypeWithCoercions(aggregate)
analysis.getType(windowFunction),analysis.getTypeWithCoercions(windowFunction)
analysis.getType(windowFunction),analysis.getTypeWithCoercions(windowFunction)
analysis.getType(expression),analysis.getTypeWithCoercions(expression)
analysis.getType(expression),analysis.getTypeWithCoercions(expression)
return sinkMaxBufferSize; ,return maxPagePartitioningBufferSize; 
"new DataSize(42,Unit.MEGABYTE)","new DataSize(40,Unit.MEGABYTE)"
"new Duration(2,SECONDS)","new Duration(30,SECONDS)"
"new Duration(2,SECONDS)","new Duration(30,SECONDS)"
"new Duration(2,SECONDS)","new Duration(30,SECONDS)"
"new Duration(2,SECONDS)","new Duration(30,SECONDS)"
"new Duration(2,SECONDS)","new Duration(30,SECONDS)"
"tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column(""orderkey"",BIGINT).column(""partkey"",BIGINT).column(""quantity"",BIGINT)","tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column(""orderkey"",BIGINT).column(""partkey"",BIGINT).column(""quantity"",DOUBLE)"
"log.error(throwable,""Query %s failed"",queryId)","log.debug(throwable,""Query %s failed"",queryId)"
"log.error(throwable,""Query %s failed"",queryId)","log.debug(throwable,""Query %s failed"",queryId)"
hashSymbols.keySet(),hashSymbols.values()
hashSymbols.keySet(),hashSymbols.values()
config.getOrcMaxBufferSize(),config.getOrcStreamBufferSize()
config.getOrcMaxBufferSize(),config.getOrcStreamBufferSize()
2,34
16,0
2,34
"new PrestoException(INVALID_CAST_ARGUMENT,e)","new PrestoException(INVALID_CAST_ARGUMENT,""Value cannot be cast to date: "" + value.toStringUtf8(),e)"
"new PrestoException(INVALID_CAST_ARGUMENT,e)","new PrestoException(INVALID_CAST_ARGUMENT,""Value cannot be cast to time: "" + value.toStringUtf8(),e)"
"new PrestoException(INVALID_CAST_ARGUMENT,e)","new PrestoException(INVALID_CAST_ARGUMENT,""Value cannot be cast to timestamp: "" + value.toStringUtf8(),e)"
"new PrestoException(INVALID_CAST_ARGUMENT,e)","new PrestoException(INVALID_CAST_ARGUMENT,""Value cannot be cast to timestamp with time zone: "" + value.toStringUtf8(),e)"
"renderUpdate(out,results)","renderUpdate(errorChannel,results)"
0,1
"ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR,VARCHAR.getTypeSignature().toString(),VARCHAR)","ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR)"
checkArgument(prestoTypeParameters.size() == fieldTypes.size()),"checkArgument(prestoTypeParameters.size() == fieldTypes.size(),""Schema mismatch, metastore schema for row column %s has %s fields but parquet schema has %s fields"",columnName,prestoTypeParameters.size(),fieldTypes.size())"
length % dictionarySize,i % dictionarySize
length % dictionarySize,i % dictionarySize
length % dictionarySize,i % dictionarySize
length % dictionarySize,i % dictionarySize
"new SemanticException(TYPE_MISMATCH,node,e.getMessage())","new SemanticException(TYPE_MISMATCH,node,""%s"",e.getMessage())"
case READ_UNCOMMITED: ,case READ_UNCOMMITTED: 
allGroupingColumns.isEmpty(),groupingSets.isEmpty()
allGroupingColumns.isEmpty(),groupingSets.isEmpty()
ConfigAssertions.recordDefaults(FeaturesConfig.class).setExperimentalSyntaxEnabled(false).setDistributedIndexJoinsEnabled(false).setDistributedJoinsEnabled(true).setRedistributeWrites(true).setOptimizeMetadataQueries(false).setOptimizeHashGeneration(true).setOptimizeSingleDistinct(true).setPushTableWriteThroughUnion(false),ConfigAssertions.recordDefaults(FeaturesConfig.class).setExperimentalSyntaxEnabled(false).setDistributedIndexJoinsEnabled(false).setDistributedJoinsEnabled(true).setRedistributeWrites(true).setOptimizeMetadataQueries(false).setOptimizeHashGeneration(true).setOptimizeSingleDistinct(true).setPushTableWriteThroughUnion(true)
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(true),new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(false)
new ConnectorTableLayout(handle),"new ConnectorTableLayout(handle,Optional.empty(),TupleDomain.none(),Optional.empty(),Optional.empty(),ImmutableList.of())"
2,10
2,10
Files.delete(file.toPath()),Files.deleteIfExists(file.toPath())
Files.delete(file.toPath()),Files.deleteIfExists(file.toPath())
Files.delete(dir.toPath()),Files.deleteIfExists(dir.toPath())
Files.delete(dir.toPath()),Files.deleteIfExists(dir.toPath())
ImmutableList<HostAddress>,List<HostAddress>
task.cancel(),task.abort()
task.cancel(),task.abort()
4,20
4,20
"MoreObjects.toStringHelper(this).add(""user"",getUser()).add(""timeZoneKey"",timeZoneKey).add(""locale"",locale).add(""startTime"",startTime).add(""properties"",properties)","MoreObjects.toStringHelper(this).add(""user"",getUser()).add(""timeZoneKey"",timeZoneKey).add(""locale"",locale).add(""startTime"",startTime).add(""properties"",propertyValues)"
compactionStarted.getAndSet(true),!compactionStarted.getAndSet(true)
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
value.getType().getCanonicalName(),value.getType().getName()
value.getType().getCanonicalName(),value.getType().getName()
ConnectorRecordSetProvider.class,CassandraRecordSetProvider.class
"assertEquals(actualTables,expectedTables)","assertContains(actualTables,expectedTables)"
"assertEquals(actualTables,expectedTables)","assertContains(actualTables,expectedTables)"
memoryReservation.getAndAdd(bytes),memoryReservation.addAndGet(bytes)
memoryReservation.getAndAdd(bytes),memoryReservation.addAndGet(bytes)
memoryReservation.getAndAdd(bytes),memoryReservation.addAndGet(bytes)
memoryReservation.getAndAdd(bytes),memoryReservation.addAndGet(bytes)
"distinctValues.put(distinct,distinct)","distinctValues.put(slice,distinct)"
"new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)","new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)"
"new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)","new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)"
"new MaterializingOperator(operatorContext,sourceType)","new MaterializingOperator(operatorContext,sourceTypes)"
"new NullOutputOperatorFactory(operatorId,sourceType)","new NullOutputOperatorFactory(operatorId,sourceTypes)"
timeOut=30_000,timeOut=240_000
condition.isEmpty(),!condition.isEmpty()
condition.isEmpty(),!condition.isEmpty()
"future1.get(1,TimeUnit.SECONDS)","future1.get(2,TimeUnit.SECONDS)"
2,10
2,10
"""A task is in the ABORTED state but stage is "" + stageState","""A task is in the ABORTED state but stage is "" + currentState"
"""A task is in the ABORTED state but stage is "" + stageState","""A task is in the ABORTED state but stage is "" + currentState"
FilterAndProjectOperator.class,ScanFilterAndProjectOperator.class
16,0
"Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build)","Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build,Collector.Characteristics.UNORDERED)"
16,0
"new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,sessionTimeZone,sessionTimeZone)","new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,hiveStorageTimeZone,sessionTimeZone)"
entry.getKey().isEmpty(),!entry.getKey().isEmpty()
1,17
"assertEquals(row.getField(0),2L)","assertEquals(row.getField(0),3L)"
"assertEquals(row.getField(0),3L)","assertEquals(row.getField(0),2L)"
"new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,false,false,factory)","new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,true,false,factory)"
"new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,false,false,factory)","new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,true,false,factory)"
primitiveType != null,primitiveType != null || arrayComponentType != null
primitiveType != null,primitiveType != null || arrayComponentType != null
1,17
ArrayList<Class<?>>,List<Class<?>>
"new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,false,aggregationAnnotation.approximate(),factory)","new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,true,aggregationAnnotation.approximate(),factory)"
partitionKey.getType().toString(),partitionKey.getType().getName()
partitionKey.getType().toString(),partitionKey.getType().getName()
public QueryRunner printPlan(){   printPlan=true;   return this; } ,public LocalQueryRunner printPlan(){   printPlan=true;   return this; } 
ConnectorSplitManager.class,CassandraSplitManager.class
"visitNode(node,context)","visitStatement(node,context)"
"visitNode(node,context)","visitStatement(node,context)"
"visitNode(node,context)","visitStatement(node,context)"
"visitNode(node,context)","visitStatement(node,context)"
2,10
"zoneId.equals(""+00:00"") | zoneId.equals(""-00:00"")","zoneId.equals(""+00:00"") || zoneId.equals(""-00:00"")"
Exception.class,RuntimeException.class
"builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new PruneUnreferencedOutputs())","builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneUnreferencedOutputs(),new PruneRedundantProjections())"
future.isCancelled(),future.isDone()
future.isCancelled(),future.isDone()
2,66
"builder.put(columnHandle,0L)","builder.put(columnHandle,0.0)"
RuntimeException e,TableNotFoundException e
bufferedBytes >= maxBufferedBytes,bufferedBytes < maxBufferedBytes
0,1
0,1
"tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column(""orderkey"",LONG).column(""custkey"",LONG).column(""orderstatus"",STRING).column(""totalprice"",DOUBLE).column(""orderdate"",STRING).column(""orderpriority"",STRING).column(""clerk"",STRING).column(""shippriority"",STRING)","tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column(""orderkey"",LONG).column(""custkey"",LONG).column(""orderstatus"",STRING).column(""totalprice"",DOUBLE).column(""orderdate"",STRING).column(""orderpriority"",STRING).column(""clerk"",STRING).column(""shippriority"",LONG)"
String[],Object[]
"connectors.put(connectorName,connector)","connectors.put(connectorId,connector)"
!remoteTableHandle.isPresent(),remoteTableHandle.isPresent()
startOffset > pages.size(),startOffset >= pages.size()
bindings.get(),"bindings.or(ImmutableMap.<ColumnHandle,Object>of())"
taskOutput.getState().isDone(),!taskOutput.getState().isDone()
"assertEquals(input.getFieldCount(),3)","assertEquals(input.getFieldCount(),4)"
(!client.isFailed()) && (!client.isGone()),(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())
"queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)","queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)"
"queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)","queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)"
"Sets.difference(liveQueries,queryIdsSnapshot)","Sets.difference(queryIdsSnapshot,liveQueries)"
queryIdsSnapshot.remove(deadQuery),queryIds.remove(deadQuery)
queryIdsSnapshot.remove(deadQuery),queryIds.remove(deadQuery)
"Math.min(clientCount,1)","Math.max(clientCount,1)"
"Math.min(clientCount,1)","Math.max(clientCount,1)"
((StringLiteral)literal).getSlice(),((StringLiteral)literal).getValue()
((StringLiteral)literal).getSlice(),((StringLiteral)literal).getValue()
"Cli.buildCli(""presto"",Runnable.class)","Cli.<Runnable>builder(""presto"")"
"Cli.buildCli(""presto"",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)","Cli.buildCli(""presto"",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)"
"Cli.buildCli(""presto"",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)","Cli.buildCli(""presto"",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)"
globalExecutionStats.getSplits(),globalExecutionStats.getStartedSplits()
globalExecutionStats.getSplits(),globalExecutionStats.getStartedSplits()
globalExecutionStats.getSplits(),globalExecutionStats.getStartedSplits()
globalExecutionStats.getSplits(),globalExecutionStats.getStartedSplits()
executionStats.getSplits(),executionStats.getStartedSplits()
executionStats.getSplits(),executionStats.getStartedSplits()
1,33
Double.isNaN(rate),Double.isNaN(rate) || Double.isInfinite(rate)
"Ints.min(startedSplits.get(),completedSplits.get(),splits)","Ints.min(startedSplits.get(),splits)"
"Ints.min(completedSplits.get(),splits)","Ints.min(completedSplits.get(),startedSplits.get(),splits)"
input.getDouble(0) < 10.0,input.getDouble(0) < 0.05
cursor.getPosition(),cursor.getCurrentValueEndPosition()
cursor.getPosition(),cursor.getCurrentValueEndPosition()
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,33
1,33
DEFAULT_LABEL_MIPMAP=true,DEFAULT_LABEL_MIPMAP=false
realIndex < columns.size(),realIndex < columns.size() && columns.get(realIndex).getColumn() != null
"assertEquals(avDegree,1.0)","assertEquals(avDegree,0.5)"
"assertEquals(avDegree,2.0)","assertEquals(avDegree,1.0)"
"assertEquals(avDegree,1.0)","assertEquals(avDegree,0.5)"
"assertEquals(avDegree,2.0)","assertEquals(avDegree,1.0)"
graphModel.getGraph().getEdgeCount(),graphModel.getGraph().getNodeCount()
graphModel.getGraph().getEdgeCount(),graphModel.getGraph().getNodeCount()
propEditor != null,propEditor != null && !type.isArray()
propEditor != null,propEditor != null && !type.isArray()
column.createColumnObserver(),column.createColumnObserver(false)
"NbBundle.getMessage(ImporterGEXF.class,""importerGEXF_error_pid"")","NbBundle.getMessage(ImporterGEXF.class,""importerGEXF_error_pid"",id)"
alpha=1,alpha=0
streamTokenizer.ttype == StreamTokenizer.TT_WORD,"streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '""'"
streamTokenizer.ttype == StreamTokenizer.TT_WORD,"streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '""'"
streamTokenizer.ttype == StreamTokenizer.TT_WORD,"streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '""'"
streamTokenizer.ttype == StreamTokenizer.TT_WORD,"streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '""'"
edge.setType(type),edge.setDirection(type)
edge.setType(type),edge.setDirection(type)
edge.setType(EdgeDirection.DIRECTED),edge.setDirection(EdgeDirection.DIRECTED)
edge.setType(EdgeDirection.DIRECTED),edge.setDirection(EdgeDirection.DIRECTED)
edge.setType(EdgeDirection.UNDIRECTED),edge.setDirection(EdgeDirection.UNDIRECTED)
edge.setType(EdgeDirection.UNDIRECTED),edge.setDirection(EdgeDirection.UNDIRECTED)
edge.setType(edgeDefault),edge.setDirection(edgeDefault)
edge.setType(edgeDefault),edge.setDirection(edgeDefault)
edge.setType(edgeDefault),edge.setDirection(edgeDefault)
edge.setType(edgeDefault),edge.setDirection(edgeDefault)
graphWidth / 2,graphHeight / 2
graphWidth / 2,graphHeight / 2
vizConfig.isShowArrows() && dataBridge.isDirected(),edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()
size=1f,size=10.0f
view != null,view == null
size=1f,size=10.0f
source != null,source != null && !source.isEmpty()
target != null,target != null && !target.isEmpty()
option == JOptionPane.CANCEL_OPTION,option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
option == JOptionPane.CANCEL_OPTION,option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
hgraph.getMutualDegree(n),hgraph.getTotalOutDegree(n)
hgraph.getMutualDegree(n),hgraph.getTotalOutDegree(n)
visibleOnly=false,visibleOnly=true
"NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false)","NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,true)"
Set<Renderer>,Set<String>
"AbstractRanking.refreshMinMax(this,graph)","DynamicAttributeRanking.refreshMinMax(this,graph)"
"AbstractRanking.refreshMinMax(this,graph)","DynamicAttributeRanking.refreshMinMax(this,graph)"
"AbstractRanking.refreshMinMax(this,graph)","DynamicAttributeRanking.refreshMinMax(this,graph)"
"AbstractRanking.refreshMinMax(this,graph)","DynamicAttributeRanking.refreshMinMax(this,graph)"
container.getTimeFormat().equals(TimeFormat.DATE),container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
container.getTimeFormat().equals(TimeFormat.DATE),container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
container.getTimeFormat().equals(TimeFormat.DATE),container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
container.getTimeFormat().equals(TimeFormat.DATE),container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
new InputStreamReader(fileObject.getInputStream()),"new InputStreamReader(fileObject.getInputStream(),""UTF-8"")"
1,33
1,33
model.getSelectedLayout() != null,model != null && model.getSelectedLayout() != null
SaveTask.class,LoadTask.class
-90,90
"String id=reader.getAttributeValue(null,""id""); ","Integer id=Integer.parseInt(reader.getAttributeValue(null,""id"")); "
nodeColumn.getIndex(),edgeColumn.getIndex()
nodeColumn.getIndex(),edgeColumn.getIndex()
Utilities.isMac(),Utilities.isMac() || Utilities.isUnix()
attributeModel != null,exportAttributes && attributeModel != null
attributeModel != null,exportAttributes && attributeModel != null
n.getNodeData().getId().toLowerCase().contains(str),n.getNodeData().getId().toLowerCase().equals(str)
n.getNodeData().getId().toLowerCase().contains(str),n.getNodeData().getId().toLowerCase().equals(str)
n.getNodeData().getLabel().toLowerCase().contains(str),n.getNodeData().getLabel().toLowerCase().equals(str)
n.getNodeData().getLabel().toLowerCase().contains(str),n.getNodeData().getLabel().toLowerCase().equals(str)
"String id=reader.getAttributeValue(null,""id""); ","Integer id=Integer.parseInt(reader.getAttributeValue(null,""id"")); "
"layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(availableStrategiesComboBox,0,232,Short.MAX_VALUE)","layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(availableStrategiesComboBox,0,218,Short.MAX_VALUE)"
graph.getEdges(),graph.getEdgesAndMetaEdges()
graph.getEdges(),graph.getEdgesAndMetaEdges()
graph.getEdges(),graph.getEdgesAndMetaEdges()
graph.getEdges(),graph.getEdgesAndMetaEdges()
"""value"".equals(key)","""value"".equals(key) || ""weight"".equals(key)"
"""source"".equals(key) || ""target"".equals(key) || ""value"".equals(key)|| ""label"".equals(key)","""source"".equals(key) || ""target"".equals(key) || ""value"".equals(key)|| ""weight"".equals(key)|| ""label"".equals(key)"
container.getAttributeModel().getNodeTable(),container.getAttributeModel().getEdgeTable()
container.getAttributeModel().getNodeTable(),container.getAttributeModel().getEdgeTable()
sourceEdgeTextData.getText().isEmpty(),!sourceEdgeTextData.getText().isEmpty()
sourceEdgeTextData.getText().isEmpty(),!sourceEdgeTextData.getText().isEmpty()
sourceEdgeTextData.getText().isEmpty(),!sourceEdgeTextData.getText().isEmpty()
DegreeRangeBuilder.class,EgoBuilder.class
sourceNodeData != null,sourceNodeTextData != null
sourceNodeData != null,sourceNodeTextData != null
sourceNodeTextData.getText().isEmpty(),!sourceNodeTextData.getText().isEmpty()
2f / 3f,9f / 10f
resultsE.appendChild(reportE),reportsE.appendChild(reportE)
resultsE.appendChild(reportE),reportsE.appendChild(reportE)
!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop(),!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()&& edge.isDirected()
toRemove[0],toRemove[1]
"type.equalsIgnoreCase(""boolean"")","type.equalsIgnoreCase(""boolean"") || type.equalsIgnoreCase(""bool"")"
"type.equalsIgnoreCase(""integer"")","type.equalsIgnoreCase(""integer"") || type.equalsIgnoreCase(""int"")"
minZ != 0f && maxZ != 0f,minZ != 0f || maxZ != 0f
minZ != 0f && maxZ != 0f,minZ != 0f || maxZ != 0f
"colorModeClass.equals(""ProportionalSizeMode"")","sizeModeClass.equals(""ProportionalSizeMode"")"
"colorModeClass.equals(""ProportionalSizeMode"")","sizeModeClass.equals(""ProportionalSizeMode"")"
"colorModeClass.equals(""ScaledSizeMode"")","sizeModeClass.equals(""ScaledSizeMode"")"
"colorModeClass.equals(""ScaledSizeMode"")","sizeModeClass.equals(""ScaledSizeMode"")"
DEFAULT_OCTREE_WIDTH=10000,DEFAULT_OCTREE_WIDTH=50000
9,1033
"""Stream "" + importer","""Stream "" + importerName"
"""Stream "" + importer","""Stream "" + importerName"
"""Stream "" + importer","""Stream "" + importerName"
"""Stream "" + importer","""Stream "" + importerName"
saveRunnable instanceof LongTask,saveTask instanceof LongTask
loadRunnable instanceof LongTask,loadTask instanceof LongTask
"NbBundle.getMessage(DesktopImportControllerUI.class,""DesktopImportControllerUI.spigot.ui.dialog.title"")","NbBundle.getMessage(DesktopImportControllerUI.class,""DesktopImportControllerUI.spigot.ui.dialog.title"",ui.getDisplayName())"
graphModel.isDirected(),graphModel.isMixed()
graphModel.isDirected(),graphModel.isMixed()
FiltersTopComponent.findInstance().getUiModel().getSelectedQuery(),FiltersTopComponent.findInstance().getUiModel().getSelectedRoot()
FiltersTopComponent.findInstance().getUiModel().getSelectedQuery(),FiltersTopComponent.findInstance().getUiModel().getSelectedRoot()
absEdge.getTarget(),absEdge.getTarget(view.getViewId())
n.getNodeData().x(),n.getNodeData().y()
n.getNodeData().x(),n.getNodeData().y()
"fileObject.hasExt(""zip"")","fileObject.hasExt(""zip"") || fileObject.hasExt(""ZIP"")"
graphModel.getUndirectedGraph(),graphModel.getUndirectedGraphVisible()
graphModel.getUndirectedGraph(),graphModel.getUndirectedGraphVisible()
graphModel.getDirectedGraph(),graphModel.getDirectedGraphVisible()
graphModel.getDirectedGraph(),graphModel.getDirectedGraphVisible()
graphModel.getUndirectedGraph(),graphModel.getUndirectedGraphVisible()
graphModel.getUndirectedGraph(),graphModel.getUndirectedGraphVisible()
"new Font(nodeFontName,nodeFontSize,nodeFontStyle)","new Font(nodeFontName,nodeFontStyle,nodeFontSize)"
"new Font(edgeFontName,edgeFontSize,edgeFontStyle)","new Font(edgeFontName,edgeFontStyle,edgeFontSize)"
titleTextField.getText(),nameTextField.getText()
titleTextField.getText(),nameTextField.getText()
titleTextField.getText(),nameTextField.getText()
titleTextField.getText(),nameTextField.getText()
nameTextField.getText(),titleTextField.getText()
nameTextField.getText(),titleTextField.getText()
model.getNodeTextColumns() == null,model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
model.getNodeTextColumns() == null,model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
selectedFile != null,selectedFile != null && fileFilter != null
selectedFile != null,selectedFile != null && fileFilter != null
model.getCurrentResult() != null,model.getCurrentResult() != null && graphModel != null
Integer[],Float[]
"AttributeUtils.getDefault().getMin(column,valuesArray)","AttributeUtils.getDefault().getMax(column,valuesArray)"
"AttributeUtils.getDefault().getMin(column,valuesArray)","AttributeUtils.getDefault().getMax(column,valuesArray)"
view.getClusteredLayerInDegree(absNode),view.getClusteredLayerDegree(absNode)
view.getClusteredLayerInDegree(absNode),view.getClusteredLayerDegree(absNode)
view.getClusteredLayerInDegree(absNode),view.getClusteredLayerDegree(absNode)
view.getClusteredLayerInDegree(absNode),view.getClusteredLayerDegree(absNode)
(getSource().x() + getTarget().x()) / 2f,(getSource().x() + getTarget().x()) / 3f
(getSource().y() + getTarget().y()) / 2f,(getSource().y() + getTarget().y()) / 3f
(getSource().z() + getTarget().z()) / 2f,(getSource().z() + getTarget().z()) / 3f
graphVersion.incNodeVersion(),graphVersion.incNodeAndEdgeVersion()
graphVersion.incNodeVersion(),graphVersion.incNodeAndEdgeVersion()
graphVersion.incNodeVersion(),graphVersion.incNodeAndEdgeVersion()
graphVersion.incNodeVersion(),graphVersion.incNodeAndEdgeVersion()
edgeData.getAttributes() == null,edgeData.getAttributes() != null
nodeData.getAttributes() == null,nodeData.getAttributes() != null
ImmutableList<String>,ImmutableList<Number>
"assertEquals(actual,expected)","assertEquals(expected,actual)"
"assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions(""-Xlint:-processing"")","assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions(""-Xlint:-processing"",""-implicit:none"")"
WildcardType maybeWildcardType,TypeMirror maybeWildcardType
ReflectiveOperationException e,Exception e
ReflectiveOperationException e,Exception e
methodsToImplement(methods),"methodsToImplement(type,methods)"
methodsToImplement(methods),"methodsToImplement(type,methods)"
methodsToImplement(methods),"methodsToImplement(type,methods)"
methodsToImplement(methods),"methodsToImplement(type,methods)"
Dagger_AutoFactoryProcessorComponent.builder(),DaggerAutoFactoryProcessorComponent.builder()
Dagger_AutoFactoryProcessorComponent.builder(),DaggerAutoFactoryProcessorComponent.builder()
ImmutableSet.Builder<ImplemetationMethodDescriptor>,ImmutableSet.Builder<ImplementationMethodDescriptor>
implemetationMethodDescriptors.build(),implementationMethodDescriptors.build()
implemetationMethodDescriptors.build(),implementationMethodDescriptors.build()
ImmutableSet<ImplemetationMethodDescriptor>,ImmutableSet<ImplementationMethodDescriptor>
ImmutableSet<ImplemetationMethodDescriptor>,ImmutableSet<ImplementationMethodDescriptor>
ImmutableSet<ImplemetationMethodDescriptor>,ImmutableSet<ImplementationMethodDescriptor>
ImplemetationMethodDescriptor methodDescriptor,ImplementationMethodDescriptor methodDescriptor
ImmutableSet.Builder<ImplemetationMethodDescriptor>,ImmutableSet.Builder<ImplementationMethodDescriptor>
implemetationMethodDescriptors.build(),implementationMethodDescriptors.build()
implemetationMethodDescriptors.build(),implementationMethodDescriptors.build()
ImmutableSet<ImplemetationMethodDescriptor>,ImmutableSet<ImplementationMethodDescriptor>
ImmutableSet<ImplemetationMethodDescriptor>,ImmutableSet<ImplementationMethodDescriptor>
ImmutableSet<ImplemetationMethodDescriptor>,ImmutableSet<ImplementationMethodDescriptor>
ImplemetationMethodDescriptor methodDescriptor,ImplementationMethodDescriptor methodDescriptor
"ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""AutoFactory does not support generic types"").in(file).onLine(6)","ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""AutoFactory does not support generic types"").in(file).onLine(21)"
"JSError.make(ModuleLoader.MODULE_CONFLICT,getName())","JSError.make(getName(),-1,-1,ModuleLoader.MODULE_CONFLICT,getName())"
"JSError.make(ModuleLoader.MODULE_CONFLICT,file.toString())","JSError.make(file.toString(),-1,-1,ModuleLoader.MODULE_CONFLICT,file.toString())"
"JSError.make(ModuleLoader.MODULE_CONFLICT,""my/js.js"")","JSError.make(""my/js.js"",-1,-1,ModuleLoader.MODULE_CONFLICT,""my/js.js"")"
Collection<String>,List<String>
Collection<String>,List<String>
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
new GatherGettersAndSetterProperties(compiler),new GatherGetterAndSetterProperties(compiler)
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externs,root)","GatherGetterAndSetterProperties.update(compiler,externs,root)"
"GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)","GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"
"GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)","GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"
"GatherGettersAndSetterProperties.gather(compiler,externsRoot)","GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
"GatherGettersAndSetterProperties.gather(compiler,externsRoot)","GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
"GatherGettersAndSetterProperties.gather(compiler,mainRoot)","GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
"GatherGettersAndSetterProperties.gather(compiler,mainRoot)","GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
"GatherGettersAndSetterProperties.gather(compiler,externsRoot)","GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
"GatherGettersAndSetterProperties.gather(compiler,externsRoot)","GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
"GatherGettersAndSetterProperties.gather(compiler,mainRoot)","GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
"GatherGettersAndSetterProperties.gather(compiler,mainRoot)","GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
new GatherGettersAndSetterProperties(compiler),new GatherGetterAndSetterProperties(compiler)
2,130
return ES5; ,return ES8_MODULES; 
sourceMapping != null,identifier != null
sourceMapping != null,identifier != null
newNode.makeNonIndexable(),newNode.makeNonIndexableRecursive()
newNode.makeNonIndexable(),newNode.makeNonIndexableRecursive()
NoObjectType noResolvedType=new NoResolvedType(this); ,NoResolvedType noResolvedType=new NoResolvedType(this); 
Iterable<ObjectType>,ImmutableList<ObjectType>
Iterable<ObjectType>,ImmutableList<ObjectType>
Iterable<ObjectType>,ImmutableList<ObjectType>
runOTIafterNTI=false,runOTIafterNTI=true
0,16
Iterable<TypedVar>,ImmutableList<TypedVar>
"testSame(js,js)",testSame(js)
"DiagnosticType.error(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")","DiagnosticType.disabled(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")"
"DiagnosticType.error(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")","DiagnosticType.disabled(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")"
"DiagnosticType.disabled(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")","DiagnosticType.error(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")"
"DiagnosticType.disabled(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")","DiagnosticType.error(""JSC_TOO_MANY_TEMPLATE_PARAMS"",""{0}"")"
"JSError.make(AbstractCompiler.READ_ERROR,getName())","JSError.make(AbstractCompiler.READ_ERROR,getName(),e.getMessage())"
"JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName())","JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName(),e.getMessage())"
List<ConformanceConfig>,ImmutableList<ConformanceConfig>
"lines(""Function.prototype.inherits = function(parentCtor) {"",""  function tempCtor() {};"",""  tempCtor.prototype = parentCtor.prototype;"",""  this.superClass_ = parentCtor.prototype;"",""  this.prototype = new tempCtor();"",""  this.prototype.constructor = this;"",""};"")","lines(""Function.prototype.inherits = function(parentCtor) {"",""  function tempCtor() {};"",""  tempCtor.prototype = parentCtor.prototype;"",""  this.superClass_ = parentCtor.prototype;"",""  this.prototype = new tempCtor();"",""  this.prototype.constructor = this;"",""};"",""/** @constructor */ function A() {}"",""/** @constructor */ function B() {}"",""B.inherits(A);"",""use(B.superClass_);"")"
Iterable<Symbol>,ImmutableList<Symbol>
1,17
List<PersistentLocalScope>,ImmutableList<PersistentLocalScope>
runOTIafterNTI=true,runOTIafterNTI=false
List<INPUT>,ImmutableList<INPUT>
List<SuggestedFix>,ImmutableList<SuggestedFix>
"JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath)","JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath,e.getMessage())"
"JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath)","JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath,e.getMessage())"
"testSame(""var foo = function (a) {}; foo.call(this, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);"")","test(""var foo = function (a) {}; foo.call(this, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);"")"
"testSame(""var foo = function (a) {}; foo.call(this, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);"")","test(""var foo = function (a) {}; foo.call(this, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);"")"
"testSame(""var foo = function (a) {}; foo.call(null, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);"")","test(""var foo = function (a) {}; foo.call(null, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);"")"
"testSame(""var foo = function (a) {}; foo.call(null, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);"")","test(""var foo = function (a) {}; foo.call(null, 1);"",""var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);"")"
"DiagnosticGroups.registerGroup(""oldCheckTypes"",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS)","DiagnosticGroups.registerGroup(""oldCheckTypes"",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS,DiagnosticGroups.GLOBAL_THIS)"
"testError(""class Foo extends BaseFoo { constructor() { Foo.base(this); } }"",GOOG_BASE_CLASS_ERROR)","testError(""class Foo extends BaseFoo { constructor() { Foo.base(this); } }"",BASE_CLASS_ERROR)"
"testError(""class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }"",GOOG_BASE_CLASS_ERROR)","testError(""class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }"",BASE_CLASS_ERROR)"
"DiagnosticType.warning(""JSC_INVALID_MODULE_PATH"",""Invalid module path \""{0}\"" for resolution mode \""{1}\"""")","DiagnosticType.error(""JSC_INVALID_MODULE_PATH"",""Invalid module path \""{0}\"" for resolution mode \""{1}\"""")"
"DiagnosticType.warning(""JSC_INVALID_MODULE_PATH"",""Invalid module path \""{0}\"" for resolution mode \""{1}\"""")","DiagnosticType.error(""JSC_INVALID_MODULE_PATH"",""Invalid module path \""{0}\"" for resolution mode \""{1}\"""")"
0,0
2,2
"new IllegalStateException(""Unexpected number of values for entry:"" + entryValues)","new SourceMapParseException(""Unexpected number of values for entry:"" + entryValues)"
"assertEquals(actual().toString(),typeString)","assertEquals(typeString,actual().toString())"
Exception cause,Throwable cause
Exception cause,Throwable cause
Exception unexpectedException,Throwable unexpectedException
!scriptsToUpdate.add(n),scriptsToUpdate.add(n)
"checkNotNull(getPropDefFromClass(superType,pname))","checkNotNull(getPropDefFromClass(superType,pname),""getPropDefFromClass(%s, %s) returned null"",superType,pname)"
n.isArrayPattern(),caught.isArrayPattern()
n.isArrayPattern(),caught.isArrayPattern()
options.needsTranspilationFrom(ES7),options.needsTranspilationFrom(ES8)
Exception e,IOException e
"@GwtIncompatible(""ObjectInputStream"") public void restoreState(InputStream inputStream) throws Exception {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } ","@GwtIncompatible(""ObjectInputStream"") public void restoreState(InputStream inputStream) throws IOException {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } "
"testWarning(""goog.require('a.c');\ngoog.require('a.b')"",REQUIRES_NOT_SORTED,""goog.require() statements are not sorted. The correct order is:\n\n"" + ""goog.require('a.b');\ngoog.require('a.c');\n\n"")","testWarning(""goog.require('a.c');\ngoog.require('a.b')"",REQUIRES_NOT_SORTED)"
"testWarning(LINE_JOINER.join(""goog.require('a.c');"",""/** @suppress {extraRequire} */"",""goog.require('a.b')""),REQUIRES_NOT_SORTED,LINE_JOINER.join(""goog.require() statements are not sorted. The correct order is:"","""",""/**"","" @suppress {extraRequire}"","" */"",""goog.require('a.b');"",""goog.require('a.c');"","""",""""))","testWarning(LINE_JOINER.join(""goog.require('a.c');"",""/** @suppress {extraRequire} */"",""goog.require('a.b')""),REQUIRES_NOT_SORTED)"
"testWarning(LINE_JOINER.join(""goog.module('m');"","""",""var d = goog.require('a.b.d');"",""var c = goog.require('a.c');"","""",""alert(1);""),REQUIRES_NOT_SORTED,""goog.require() statements are not sorted. The correct order is:\n\n"" + ""var c = goog.require('a.c');\nvar d = goog.require('a.b.d');\n\n"")","testWarning(LINE_JOINER.join(""goog.module('m');"","""",""var d = goog.require('a.b.d');"",""var c = goog.require('a.c');"","""",""alert(1);""),REQUIRES_NOT_SORTED)"
checkArgument(child.parent == null),"checkArgument(child.parent == null,""Cannot add already-owned child node.\nChild: %s\nExisting parent: %s\nNew parent: %s"",child,parent,this)"
textProto.charAt(0) == UTF8_BOM_CODE,!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE
List<SourceFile>,ImmutableList<SourceFile>
List<String>,ImmutableList<String>
List<SourceFile>,ImmutableList<SourceFile>
List<String>,ImmutableList<String>
List<String>,ImmutableList<String>
List<String>,ImmutableList<String>
List<String>,ImmutableList<String>
List<String>,ImmutableList<String>
List<String>,ImmutableList<String>
nameDefinitionMultimap.keySet(),nameDefinitionMultimap.keys()
nameDefinitionMultimap.keySet(),nameDefinitionMultimap.keys()
nameDefinitionMultimap.keys(),nameDefinitionMultimap.keySet()
nameDefinitionMultimap.keys(),nameDefinitionMultimap.keySet()
"DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
"DiagnosticType.disabled(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")","DiagnosticType.error(""JSC_GOOG_MODULE_IN_NON_MODULE"",""goog.module() call must be the first statement in a module."")"
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null),"Preconditions.checkState(n.isModuleBody() || scope.getParent() == null,""Expected %s to be a module body, or %s to be the global scope."",n,scope)"
index > templateTypes.size(),index >= templateTypes.size()
"DiagnosticGroups.registerGroup(""functionParams"",FunctionTypeBuilder.OPTIONAL_ARG_AT_END)","DiagnosticGroups.registerGroup(""functionParams"",FunctionTypeBuilder.INEXISTENT_PARAM,FunctionTypeBuilder.OPTIONAL_ARG_AT_END)"
1,0
"Multimap<Object,JSError>","Multimap<JSType,JSError>"
"JSError.make(REPORT_PATH_IO_ERROR,reportPath)","JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"
"JSError.make(REPORT_PATH_IO_ERROR,reportPath)","JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"
IR.name(TMP_ERROR),IR.thisNode()
"this.nameDefinitionMultimap.remove(name,node)","this.nameDefinitionMultimap.remove(name,def)"
"IR.var(IR.name(shortName),googRequireNode)","IR.constNode(IR.name(shortName),googRequireNode)"
"IR.var(IR.name(shortName),googRequireNode)","IR.constNode(IR.name(shortName),googRequireNode)"
"Pattern.compile(""(--?[a-zA-Z_]+)=(.*)"")","Pattern.compile(""(--?[a-zA-Z_]+)=(.*)"",Pattern.DOTALL)"
18,2
Preconditions.checkState(hasInstanceType()),"Preconditions.checkState(hasInstanceType(),""Expected a constructor; got %s"",this)"
System.currentTimeMillis() + start,System.currentTimeMillis() - start
"/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ COVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return ""options.setConvertToDottedProperties(true)"";   } } ","/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ CONVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return ""options.setConvertToDottedProperties(true)"";   } } "
this == OtiOnly,this == OTI_ONLY
this == OtiOnly,this == OTI_ONLY
this == NtiOnly,this == NTI_ONLY
this == NtiOnly,this == NTI_ONLY
"report(n,MISPLACED_ANNOTATION)","report(n,MISPLACED_ANNOTATION,""@abstract"",""only functions or methods can be abstract"")"
"report(n,MISPLACED_ANNOTATION)","report(n,MISPLACED_ANNOTATION,""@abstract"",""function with a non-empty body cannot be abstract"")"
"report(n,MISPLACED_ANNOTATION)","report(n,MISPLACED_ANNOTATION,""@abstract"",""constructors cannot be abstract"")"
"report(n,MISPLACED_ANNOTATION)","report(n,MISPLACED_ANNOTATION,""@abstract"",""only functions or methods can be abstract"")"
"report(n,MISPLACED_ANNOTATION)","report(n,MISPLACED_ANNOTATION,""@abstract"",""static methods cannot be abstract"")"
"ImmutableList.of(qmark,bang)","ImmutableList.of(bang,qmark)"
"DiagnosticType.error(""JSC_CONSTANT_REASSIGNED_VALUE_ERROR"",""constant {0} assigned a value more than once.\n"" + ""Original definition at {1}"")","DiagnosticType.warning(""JSC_CONSTANT_REASSIGNED_VALUE_ERROR"",""constant {0} assigned a value more than once.\n"" + ""Original definition at {1}"")"
"DiagnosticType.error(""JSC_CONSTANT_REASSIGNED_VALUE_ERROR"",""constant {0} assigned a value more than once.\n"" + ""Original definition at {1}"")","DiagnosticType.warning(""JSC_CONSTANT_REASSIGNED_VALUE_ERROR"",""constant {0} assigned a value more than once.\n"" + ""Original definition at {1}"")"
"test(externs,js,(String)null,ConstCheck.CONST_REASSIGNED_VALUE_ERROR,null)","test(externs,js,(String)null,null,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
"testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)","testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
"testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)","testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
funType.toString(),Integer.toString(types.size())
"JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString())","JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString(),funType.toString())"
12,8
"ImmutableSet.of(""reportUnknownTypes"")","ImmutableSet.of(""reportUnknownTypes"",""analyzerChecks"")"
"t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME)","t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName())"
"report(SHIFT_AMOUNT_OUT_OF_BOUNDS,right)","report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n)"
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
"newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)","newName.putProp(Node.ORIGINALNAME_PROP,qName)"
options.setLanguageIn(LanguageMode.ECMASCRIPT5),options.setLanguageOut(LanguageMode.ECMASCRIPT5)
options.setLanguageIn(LanguageMode.ECMASCRIPT5),options.setLanguageOut(LanguageMode.ECMASCRIPT5)
"t.report(n,UNUSED_PRIVATE_PROPERTY)","t.report(n,UNUSED_PRIVATE_PROPERTY,propName)"
"DiagnosticType.error(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")","DiagnosticType.warning(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")"
"DiagnosticType.error(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")","DiagnosticType.warning(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")"
"testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"DiagnosticType.warning(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")","DiagnosticType.error(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")"
"DiagnosticType.warning(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")","DiagnosticType.error(""JSC_REDECLARED_VARIABLE"",""Redeclared variable: {0}"")"
"testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)","testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
"NodeTraversal.traverseEs6(compiler,originalRoot,this)","NodeTraversal.traverseEs6(compiler,scriptRoot,this)"
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } ,/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
/**   * Tests for  {@link Es6SortedDependencies}  */ public class Es6SortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new Es6SortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return true;   } } ,/**   * Tests for  {@link Es6SortedDependencies}  */ public class Es6SortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new Es6SortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return true;   } } 
MAX_PRETTY_PRINTED_PROPERTIES=4,MAX_PRETTY_PRINTED_PROPERTIES=10
NodeUtil.getFunctionNameNode(enclosingFunction),NodeUtil.getFunctionNameNode(fn)
"test(""var foo = function (module) {module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(module){module.exports={}};"" + ""var module$test=foo$$module$test"")","testModules(""var foo = function (module) {module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(module){module.exports={}};"" + ""var module$test=foo$$module$test"")"
"test(""var foo = function (module) {module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(module){module.exports={}};"" + ""var module$test=foo$$module$test"")","testModules(""var foo = function (module) {module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(module){module.exports={}};"" + ""var module$test=foo$$module$test"")"
"test(""var foo = function () {var module = {};module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){var module={};module.exports={}};"" + ""var module$test=foo$$module$test"")","testModules(""var foo = function () {var module = {};module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){var module={};module.exports={}};"" + ""var module$test=foo$$module$test"")"
"test(""var foo = function () {var module = {};module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){var module={};module.exports={}};"" + ""var module$test=foo$$module$test"")","testModules(""var foo = function () {var module = {};module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){var module={};module.exports={}};"" + ""var module$test=foo$$module$test"")"
"test(""var foo = function () {if (true) var module = {};"" + ""module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){if(true)var module={};"" + ""module.exports={}};""+ ""var module$test=foo$$module$test"")","testModules(""var foo = function () {if (true) var module = {};"" + ""module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){if(true)var module={};"" + ""module.exports={}};""+ ""var module$test=foo$$module$test"")"
"test(""var foo = function () {if (true) var module = {};"" + ""module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){if(true)var module={};"" + ""module.exports={}};""+ ""var module$test=foo$$module$test"")","testModules(""var foo = function () {if (true) var module = {};"" + ""module.exports = {};};"" + ""module.exports = foo;"",""goog.provide('module$test');"" + ""var foo$$module$test=function(){if(true)var module={};"" + ""module.exports={}};""+ ""var module$test=foo$$module$test"")"
options.checkProvides.isOn(),options.checkProvides.isOn() || options.enables(DiagnosticGroups.MISSING_PROVIDE)
"JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION)","JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION,pair.type.toString())"
block.useSourceInfoFromForTree(exprRoot),block.useSourceInfoIfMissingFromForTree(exprRoot)
block.useSourceInfoFromForTree(exprRoot),block.useSourceInfoIfMissingFromForTree(exprRoot)
"JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE)","JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE,member.getString())"
"!expr.isGetProp() || !expr.getLastChild().getString().equals(""bind"")","!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals(""bind"")"
"new MalformedException(""Unrecognized message placeholder referenced: "" + phName,objLitNode)","new MalformedException(""Unrecognized message placeholder referenced: "" + phName,node)"
"new MalformedException(""Unused message placeholder: "" + phName,objLitNode)","new MalformedException(""Unused message placeholder: "" + phName,node)"
"JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT_YET,""Case statements that contain yields"")","JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,""Case statements that contain yields"")"
"JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT,""Undecomposable expression"")","JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT,""Undecomposable expression"")"
"DiagnosticType.disabled(""AMBIGUOUS_FUNCTION_DECL"",""Ambiguous use of a named function: {0}."")","DiagnosticType.error(""AMBIGUOUS_FUNCTION_DECL"",""Ambiguous use of a named function: {0}."")"
"DiagnosticType.disabled(""AMBIGUOUS_FUNCTION_DECL"",""Ambiguous use of a named function: {0}."")","DiagnosticType.error(""AMBIGUOUS_FUNCTION_DECL"",""Ambiguous use of a named function: {0}."")"
"getCode().split(""\n"")","getCode().split(""\n"",-1)"
2,66
66,2
2,66
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty,"reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty&& !""__proto__"".equals(propertyName)"
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally,"reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally&& !""__proto__"".equals(propertyName)"
25,24
"DiagnosticType.warning(""JSC_BAD_PRIVATE_GLOBAL_ACCESS"",""Access to private variable {0} not allowed outside file {1}."")","DiagnosticType.error(""JSC_BAD_PRIVATE_GLOBAL_ACCESS"",""Access to private variable {0} not allowed outside file {1}."")"
"DiagnosticType.warning(""JSC_BAD_PRIVATE_GLOBAL_ACCESS"",""Access to private variable {0} not allowed outside file {1}."")","DiagnosticType.error(""JSC_BAD_PRIVATE_GLOBAL_ACCESS"",""Access to private variable {0} not allowed outside file {1}."")"
DEFAULT_MAX_UNION_SIZE=20,DEFAULT_MAX_UNION_SIZE=30
"JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,""struct"",""struct"")","JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,""struct"",className)"
"JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,""dict"",""dict"")","JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,""dict"",className)"
i >= 0,i > 0
isTop() || isUnknown(),isTop() || isUnknown() || objs == null && typeVar == null
2,10
2,10
obj1.isLoose || obj2.isLoose,obj1.isLoose && obj2.isLoose
10,2
9,41
"testClosureFunction(""goog.isArray"",ALL_TYPE,ALL_TYPE,ALL_TYPE)","testClosureFunction(""goog.isArray"",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)"
"DiagnosticType.disabled(""JSC_MISPLACED_TYPE_ANNOTATION"",""Type annotations are not allowed here. "" + ""Are you missing parentheses?"")","DiagnosticType.warning(""JSC_MISPLACED_TYPE_ANNOTATION"",""Type annotations are not allowed here. "" + ""Are you missing parentheses?"")"
"DiagnosticType.disabled(""JSC_MISPLACED_TYPE_ANNOTATION"",""Type annotations are not allowed here. "" + ""Are you missing parentheses?"")","DiagnosticType.warning(""JSC_MISPLACED_TYPE_ANNOTATION"",""Type annotations are not allowed here. "" + ""Are you missing parentheses?"")"
traces.set(null),traces.remove()
0,4
0,4
0,4
0,4
1024,1028
1024,1028
0,4
0,4
8,9
0,1
0,4
16,20
16,20
"logger.info(""Aliasing common strings"")","logger.fine(""Aliasing common strings"")"
"logger.info(""Aliasing common strings"")","logger.fine(""Aliasing common strings"")"
logger.info(sb.toString()),logger.fine(sb.toString())
logger.info(sb.toString()),logger.fine(sb.toString())
"logger.info(""Collapsed "" + numRenamedPropertyNames + "" properties into ""+ numNewPropertyNames+ "" and skipped renaming ""+ numSkippedPropertyNames+ "" properties."")","logger.fine(""Collapsed "" + numRenamedPropertyNames + "" properties into ""+ numNewPropertyNames+ "" and skipped renaming ""+ numSkippedPropertyNames+ "" properties."")"
"logger.info(""Collapsed "" + numRenamedPropertyNames + "" properties into ""+ numNewPropertyNames+ "" and skipped renaming ""+ numSkippedPropertyNames+ "" properties."")","logger.fine(""Collapsed "" + numRenamedPropertyNames + "" properties into ""+ numNewPropertyNames+ "" and skipped renaming ""+ numSkippedPropertyNames+ "" properties."")"
"logger.info(""Creating extern file for exports"")","logger.fine(""Creating extern file for exports"")"
"logger.info(""Creating extern file for exports"")","logger.fine(""Creating extern file for exports"")"
"logger.info(""Remove try/catch/finally"")","logger.fine(""Remove try/catch/finally"")"
"logger.info(""Remove try/catch/finally"")","logger.fine(""Remove try/catch/finally"")"
"logger.info(""Strip code"")","logger.fine(""Strip code"")"
"logger.info(""Strip code"")","logger.fine(""Strip code"")"
"logger.info(""Computing Control Flow Graph"")","logger.fine(""Computing Control Flow Graph"")"
"logger.info(""Computing Control Flow Graph"")","logger.fine(""Computing Control Flow Graph"")"
"logger.info(""Normalizing"")","logger.fine(""Normalizing"")"
"logger.info(""Normalizing"")","logger.fine(""Normalizing"")"
"logger.info(""Recording function information"")","logger.fine(""Recording function information"")"
"logger.info(""Recording function information"")","logger.fine(""Recording function information"")"
"logger.info(""Moving functions + variable into deeper modules"")","logger.fine(""Moving functions + variable into deeper modules"")"
"logger.info(""Moving functions + variable into deeper modules"")","logger.fine(""Moving functions + variable into deeper modules"")"
"logger.info(""Renamed "" + instancesRenamed + "" instances of ""+ propsRenamed+ "" properties."")","logger.fine(""Renamed "" + instancesRenamed + "" instances of ""+ propsRenamed+ "" properties."")"
"logger.info(""Renamed "" + instancesRenamed + "" instances of ""+ propsRenamed+ "" properties."")","logger.fine(""Renamed "" + instancesRenamed + "" instances of ""+ propsRenamed+ "" properties."")"
"logger.info(""Skipped renaming "" + instancesSkipped + "" invalidated ""+ ""properties, ""+ propsSkipped+ "" instances of properties ""+ ""that were skipped for specific types and ""+ singleTypeProps+ "" properties that were referenced from only one type."")","logger.fine(""Skipped renaming "" + instancesSkipped + "" invalidated ""+ ""properties, ""+ propsSkipped+ "" instances of properties ""+ ""that were skipped for specific types and ""+ singleTypeProps+ "" properties that were referenced from only one type."")"
"logger.info(""Skipped renaming "" + instancesSkipped + "" invalidated ""+ ""properties, ""+ propsSkipped+ "" instances of properties ""+ ""that were skipped for specific types and ""+ singleTypeProps+ "" properties that were referenced from only one type."")","logger.fine(""Skipped renaming "" + instancesSkipped + "" invalidated ""+ ""properties, ""+ propsSkipped+ "" instances of properties ""+ ""that were skipped for specific types and ""+ singleTypeProps+ "" properties that were referenced from only one type."")"
"logger.info(""Expanding Jquery Aliases"")","logger.fine(""Expanding Jquery Aliases"")"
"logger.info(""Expanding Jquery Aliases"")","logger.fine(""Expanding Jquery Aliases"")"
"logger.info(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")","logger.fine(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")"
"logger.info(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")","logger.fine(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")"
"logger.info(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")","logger.fine(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")"
"logger.info(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")","logger.fine(""Named "" + namedCount + "" anon functions using ""+ bytesUsed+ "" bytes"")"
logger.info(name),logger.fine(name)
logger.info(name),logger.fine(name)
"logger.info(""Parsing Dep: "" + filePath)","logger.fine(""Parsing Dep: "" + filePath)"
"logger.info(""Parsing Dep: "" + filePath)","logger.fine(""Parsing Dep: "" + filePath)"
options.removeUnusedVars,options.removeUnusedVars || options.removeUnusedLocalVars
functionJSDocInfo != null,functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null
0,1
8,9
8,9
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
2,0
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
18,16
new PeepholeSubstituteAlternateSyntax(true),new PeepholeSubstituteAlternateSyntax(false)
new PeepholeSubstituteAlternateSyntax(false),new PeepholeSubstituteAlternateSyntax(true)
"JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,parent.fullName())","JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,name.fullName(),parent.fullName(),parent.declaration.source.getName(),String.valueOf(parent.declaration.node.getLineno()))"
n.getCharno(),fieldNameNode.getCharno()
n.getCharno(),fieldNameNode.getCharno()
"ImmutableList.of(""es3.js"",""es5.js"",""w3c_event.js"",""w3c_event3.js"",""gecko_event.js"",""ie_event.js"",""webkit_event.js"",""w3c_dom1.js"",""w3c_dom2.js"",""w3c_dom3.js"",""gecko_dom.js"",""ie_dom.js"",""webkit_dom.js"",""w3c_css.js"",""gecko_css.js"",""ie_css.js"",""webkit_css.js"",""google.js"",""deprecated.js"",""fileapi.js"",""flash.js"",""gears_symbols.js"",""gears_types.js"",""gecko_xml.js"",""html5.js"",""ie_vml.js"",""iphone.js"",""webstorage.js"",""w3c_css3d.js"",""w3c_elementtraversal.js"",""w3c_geolocation.js"",""w3c_indexeddb.js"",""w3c_range.js"",""w3c_selectors.js"",""w3c_xml.js"",""window.js"",""webkit_notifications.js"")","ImmutableList.of(""es3.js"",""es5.js"",""w3c_event.js"",""w3c_event3.js"",""gecko_event.js"",""ie_event.js"",""webkit_event.js"",""w3c_dom1.js"",""w3c_dom2.js"",""w3c_dom3.js"",""gecko_dom.js"",""ie_dom.js"",""webkit_dom.js"",""w3c_css.js"",""gecko_css.js"",""ie_css.js"",""webkit_css.js"",""google.js"",""deprecated.js"",""fileapi.js"",""flash.js"",""gears_symbols.js"",""gears_types.js"",""gecko_xml.js"",""html5.js"",""ie_vml.js"",""iphone.js"",""webstorage.js"",""w3c_css3d.js"",""w3c_elementtraversal.js"",""w3c_geolocation.js"",""w3c_indexeddb.js"",""w3c_range.js"",""w3c_selectors.js"",""w3c_xml.js"",""window.js"",""webkit_notifications.js"",""webgl.js"")"
node1.checkTreeEqualsSilent(node1),node1.isEquivalentTo(node1)
node1.checkTreeEqualsSilent(node1),node1.isEquivalentTo(node1)
node1.checkTreeEqualsSilent(node2),node1.isEquivalentTo(node2)
node1.checkTreeEqualsSilent(node2),node1.isEquivalentTo(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
node1.checkTreeTypeAwareEqualsSilent(node2),node1.isEquivalentToTyped(node2)
"DiagnosticType.error(""JSC_NAME_REFERENCE_IN_EXTERNS"",""accessing name {0} in externs has no effect"")","DiagnosticType.warning(""JSC_NAME_REFERENCE_IN_EXTERNS"",""accessing name {0} in externs has no effect"")"
"DiagnosticType.error(""JSC_NAME_REFERENCE_IN_EXTERNS"",""accessing name {0} in externs has no effect"")","DiagnosticType.warning(""JSC_NAME_REFERENCE_IN_EXTERNS"",""accessing name {0} in externs has no effect"")"
"testSame(""asdf;"",""var asdf;"",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)","testSame(""asdf;"",""var asdf;"",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)"
"testSame(""yz();"",""function yz() {}"",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)","testSame(""yz();"",""function yz() {}"",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)"
new GoogleCodeRemoval(compiler),new ClosureCodeRemoval(compiler)
8,12
hashFunction.hashBytes(littleEndian),hashFunction.hashBytes(bigEndian)
littleEndian.order(),bigEndian.order()
littleEndian.order(),bigEndian.order()
hashFunction.newHasher().putBytes(littleEndian),hashFunction.newHasher().putBytes(bigEndian)
littleEndian.order(),bigEndian.order()
littleEndian.order(),bigEndian.order()
hashFunction.hashBytes(littleEndian),hashFunction.hashBytes(bigEndian)
littleEndian.order(),bigEndian.order()
littleEndian.order(),bigEndian.order()
hashFunction.newHasher().putBytes(littleEndian),hashFunction.newHasher().putBytes(bigEndian)
littleEndian.order(),bigEndian.order()
littleEndian.order(),bigEndian.order()
Thread.currentThread().isInterrupted(),Thread.currentThread().interrupted()
Thread.currentThread().isInterrupted(),Thread.currentThread().interrupted()
Thread.currentThread().isInterrupted(),Thread.currentThread().interrupted()
Thread.currentThread().isInterrupted(),Thread.currentThread().interrupted()
"@SuppressWarnings(""unused"") private final Object strongReference; ","@SuppressWarnings(""unused"") private final WeakSafeReadWriteLock strongReference; "
Object strongReference,WeakSafeReadWriteLock strongReference
"@SuppressWarnings(""unused"") private final Object strongReference; ","@SuppressWarnings(""unused"") private final WeakSafeReadWriteLock strongReference; "
Object strongReference,WeakSafeReadWriteLock strongReference
"@SuppressWarnings(""unused"") private final Object strongReference; ","@SuppressWarnings(""unused"") private final WeakSafeReadWriteLock strongReference; "
Object strongReference,WeakSafeReadWriteLock strongReference
"@SuppressWarnings(""unused"") private final Object strongReference; ","@SuppressWarnings(""unused"") private final WeakSafeReadWriteLock strongReference; "
Object strongReference,WeakSafeReadWriteLock strongReference
ExceptionInInitializerError|ClassNotFoundException,Error|ClassNotFoundException
ExceptionInInitializerError|ClassNotFoundException,Error|ClassNotFoundException
0,2
0,2
"assertEquals(service.state(),Service.State.FAILED)","assertEquals(Service.State.FAILED,service.state())"
"assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)","assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)"
"assertEquals(countDownLatch.getCount(),3L)","assertEquals(3L,countDownLatch.getCount())"
"assertEquals(q.toString(),""[]"")","assertEquals(""[]"",q.toString())"
"assertEquals(service.state(),Service.State.FAILED)","assertEquals(Service.State.FAILED,service.state())"
"assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)","assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)"
"assertEquals(countDownLatch.getCount(),3L)","assertEquals(3L,countDownLatch.getCount())"
"assertEquals(q.toString(),""[]"")","assertEquals(""[]"",q.toString())"
Object edge,E edge
Object edge,E edge
Object edge,E edge
Object edge,E edge
Object node,N node
Object node,N node
Object edge,E edge
Object edge,E edge
Object node,N node
Object node,N node
Object node,N node
Object edge,E edge
Object edge,E edge
Object node,N node
Object node,N node
Object node,N node
Object edge,E edge
Object edge,E edge
Object edge,E edge
Object edge,E edge
Object edge,E edge
Object edge,E edge
Object node,N node
Object node,N node
Object edge,E edge
Object edge,E edge
Object node,N node
Object node,N node
Object node,N node
Object edge,E edge
Object edge,E edge
Object node,N node
Object node,N node
Object node,N node
Object edge,E edge
Object edge,E edge
1,0
"Multimap<Feature<?>,Feature<?>>","ImmutableMultimap<Feature<?>,Feature<?>>"
"SortedMap<Integer,Integer>","ImmutableSortedMap<Integer,Integer>"
Multiset<String>,ImmutableMultiset<String>
Iterable<ManyValues>,ImmutableList<ManyValues>
List<Stats>,ImmutableList<Stats>
List<PairedStats>,ImmutableList<PairedStats>
Set<String>,ImmutableSet<String>
"BiMap<Integer,String>","ImmutableBiMap<Integer,String>"
List<Integer>,ImmutableList<Integer>
"Map<String,String>","ImmutableMap<String,String>"
1,17
1,17
1,17
1,17
DUE_DILIGENCE_MILLIS=50,DUE_DILIGENCE_MILLIS=100
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
8,9
inputFuture.cancel(mayInterruptIfRunning),localInputFuture.cancel(mayInterruptIfRunning)
inputFuture.cancel(mayInterruptIfRunning),localInputFuture.cancel(mayInterruptIfRunning)
"Map<K,? extends V>","EnumMap<K,? extends V>"
testerAnnotation.getClass(),testerAnnotation.annotationType()
testerAnnotation.getClass(),testerAnnotation.annotationType()
18,2
new IllegalArgumentException(e),"new IllegalArgumentException(""Could not parse '"" + input + ""'"",e)"
failure != null,failure == null
failure != null,failure == null
failure != null,failure == null
1,9
2,10
2,10
2,10
2,10
2,10
2,10
1,9
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
2,10
s.elapsedTime(TimeUnit.NANOSECONDS),s.elapsed(TimeUnit.NANOSECONDS)
s.elapsedTime(TimeUnit.NANOSECONDS),s.elapsed(TimeUnit.NANOSECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
stopwatch.elapsedMillis(),stopwatch.elapsed(MILLISECONDS)
"parameterIsPrimitiveOrNullable(func,indexOfParamToSetToNull)","parameterIsPrimitiveOrNullable(func,i)"
UnmodifiableIterable<T>,Iterable<T>
UnmodifiableIterable<T>,Iterable<T>
2,18
Set<Key<?>>,ImmutableSet<Key<?>>
"ensureInChild(parent,FooImpl.class,FooBar.class,Foo.class)","ensureInChild(parent,FooImpl.class,Foo.class)"
"checkForMisplacedBindingAnnotations(method,errors) | !isValidMethod(injectableMethod,errors)","checkForMisplacedBindingAnnotations(method,errors) || !isValidMethod(injectableMethod,errors)"
ImmutableList.of(result),ImmutableList.copyOf(result)
ImmutableList.of(result),ImmutableList.copyOf(result)
ImmutableList.of(modules),ImmutableList.copyOf(modules)
ImmutableList.of(modules),ImmutableList.copyOf(modules)
ImmutableList.of(interceptors),ImmutableList.copyOf(interceptors)
ImmutableList.of(interceptors),ImmutableList.copyOf(interceptors)
ImmutableList.of(sourcesAsStrings),ImmutableList.copyOf(sourcesAsStrings)
ImmutableList.of(sourcesAsStrings),ImmutableList.copyOf(sourcesAsStrings)
ImmutableList.of(listeners),ImmutableList.copyOf(listeners)
ImmutableList.of(listeners),ImmutableList.copyOf(listeners)
ImmutableSet.of(modules),ImmutableSet.copyOf(modules)
ImmutableSet.of(modules),ImmutableSet.copyOf(modules)
e.getCause(),t.getCause()
e.getCause(),t.getCause()
"name.startsWith(""java."") || name.startsWith(""javax."") || name.startsWith(""junit."")|| name.startsWith(""sun."")|| name.startsWith(""com.sun."")","name.startsWith(""java."") || name.startsWith(""javax."") || name.startsWith(""junit."")|| name.startsWith(""sun."")|| name.startsWith(""com.sun."")|| name.contains(""cglib"")"
0,1
0,1
0,1
0,1
new TypeResolver(arrayListOfString),new TypeResolver(hasRelatedOfString)
"Parameter.forConstructor(errorHandler,fastConstructor)","Parameter.forConstructor(errorHandler,constructor)"
"current.getLabel().startsWith(""ns"") && !pre.getLabel().startsWith(""ns"")","current.getLabel().startsWith(""ns"") && !pre.getLabel().startsWith(""ns"") && !pre.getValue().equals(Predefine.TAG_BIGIN)"
"current.getLabel().startsWith(""nt"") && !pre.getLabel().startsWith(""nt"")","current.getLabel().startsWith(""nt"") && !pre.getLabel().startsWith(""nt"") && !pre.getValue().equals(Predefine.TAG_BIGIN)"
input.size(),input.entrySet()
input.size(),input.entrySet()
"map.put(i,emp,0L,SECONDS,2L,SECONDS)","map.put(i,emp,0L,SECONDS,14L,SECONDS)"
"assertTrueAllTheTime(() -> {   assertTrue(map.containsKey(0));   Collection<Employee> valuesNullCity=map.values(predicateCityNull);   assertEquals(2,valuesNullCity.size());   Collection<Employee> valuesNotNullCity=map.values(Predicates.equal(""city"",""cityname""));   assertEquals(3,valuesNotNullCity.size()); } ,5)","assertTrueAllTheTime(() -> {   assertTrue(map.containsKey(0));   Collection<Employee> valuesNullCity=map.values(predicateCityNull);   assertEquals(2,valuesNullCity.size());   Collection<Employee> valuesNotNullCity=map.values(Predicates.equal(""city"",""cityname""));   assertEquals(3,valuesNotNullCity.size()); } ,30)"
"addOrGetIndex(definition.getKey(),definition.getValue())","addOrGetIndex(definition.getKey(),definition.getValue(),partitionStoreAdapter)"
group.getId(),group.id()
group.getId(),group.id()
IOException ignored,Exception ignored
remoteAddressAliases != null,remoteAddressAliases != null && returnValue
"latch.await(10,SECONDS)","latch.await(20,SECONDS)"
"latch.await(10,SECONDS)","latch.await(20,SECONDS)"
"assertTrueEventually(new AssertTask(){   @Override public void run(){     getStats(client,clientEngine);   } } ,STATS_PERIOD_SECONDS * 3)","assertTrueEventually(new AssertTask(){   @Override public void run(){     getStats(client,clientEngine);   } } )"
"lock.lock(1000,TimeUnit.MILLISECONDS)","lock.lock(10000,TimeUnit.MILLISECONDS)"
timePassed >= 1000,timePassed >= 10000
"bytesToString(data).split(""&"")","bytesToString(data).split(""&"",-1)"
0,16
DUPLICATE_OPS_TOLERANCE=5,DUPLICATE_OPS_TOLERANCE=10
1,1
config.getMapConfig(mapName).setTimeToLiveSeconds(5),config.getMapConfig(mapName).setTimeToLiveSeconds(10)
"assertEquals(activeEmployees,values.size())","assertEquals(String.format(""Expected %s results but got %s. Number of evicted entries: %s."",activeEmployees,values.size(),allEmployees - latch.getCount()),activeEmployees,values.size())"
sleepAtLeastMillis(1),sleepAtLeastMillis(1000)
sleepAtLeastMillis(1),sleepAtLeastMillis(1000)
1024,1025
1024,1025
0,1
0,1
"{11,6.5f}","{11,7.0f}"
"{11,6.5f}","{11,7.0f}"
"transactionalMap.put(key,value)","transactionalMap.set(key,value)"
"transactionalMap.put(key,value)","transactionalMap.set(key,value)"
"assertOpenEventually(latch,3)",assertOpenEventually(latch)
"assertOpenEventually(latch,3)",assertOpenEventually(latch)
writeDelaySeconds=2,writeDelaySeconds=10
"{14,3.0f}","{14,3.5f}"
"publisher.publishWanReplicationUpdate(name,view)","publisher.publishWanReplicationUpdateBackup(name,view)"
"publisher.publishWanReplicationUpdate(name,view)","publisher.publishWanReplicationUpdateBackup(name,view)"
maxInvocationCountObservedDuringWarmup * 1.2,maxInvocationCountObservedDuringWarmup * 2
maxInvocationCountObservedDuringWarmup * 1.2,maxInvocationCountObservedDuringWarmup * 2
timeout=600000,timeout=1800000
timeout=600000,timeout=1800000
timeout=600000,timeout=1800000
timeout=600000,timeout=1800000
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
"""Using bind address: "" + publicAddress","""Using bind address: "" + bindAddress"
BitSetUtils.class,SetUtil.class
1,1
1,1
"@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends AbstractGenericPermissionTest {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of(""deploy"").against(""deploy"").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of(""deploy"").against(""all"").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of(""all"").against(""deploy"").expect(false).run();   } } ","@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends PermissionTestSupport {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of(""deploy"").against(""deploy"").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of(""deploy"").against(""all"").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of(""all"").against(""deploy"").expect(false).run();   } } "
"new CheckPermission().of(""all"").against(""deploy"").expect(false)","new CheckPermission().of(""all"").against(""deploy"").expect(true)"
0,1
0,1
0,1
"queue.poll(2,TimeUnit.SECONDS)","queue.poll(15,TimeUnit.SECONDS)"
private final StringBuffer tmpSb=new StringBuffer(); ,private final StringBuilder tmpSb=new StringBuilder(); 
callTimeoutMillis=3000,callTimeoutMillis=6000
callTimeoutMillis=3000,callTimeoutMillis=6000
eventJournalConfig.getMapName(),eventJournalConfig.getCacheName()
eventJournalConfig.getMapName(),eventJournalConfig.getCacheName()
"AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),3)","AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),1)"
"new HazelcastProperty(""hazelcast.invalidation.reconciliation.interval.seconds"",1,SECONDS)","new HazelcastProperty(""hazelcast.invalidation.reconciliation.interval.seconds"",60,SECONDS)"
"new HazelcastProperty(""hazelcast.invalidation.min.reconciliation.interval.seconds"",1,SECONDS)","new HazelcastProperty(""hazelcast.invalidation.min.reconciliation.interval.seconds"",30,SECONDS)"
"new HazelcastProperty(""hazelcast.invalidation.reconciliation.interval.seconds"",1,SECONDS)","new HazelcastProperty(""hazelcast.invalidation.reconciliation.interval.seconds"",60,SECONDS)"
"new HazelcastProperty(""hazelcast.invalidation.min.reconciliation.interval.seconds"",1,SECONDS)","new HazelcastProperty(""hazelcast.invalidation.min.reconciliation.interval.seconds"",30,SECONDS)"
getMapNearCacheManager(dataMember),getMapNearCacheManager(nearCacheMember)
TimeUnit.SECONDS.toNanos(timeoutSeconds),TimeUnit.SECONDS.toMillis(timeoutSeconds)
TimeUnit.SECONDS.toNanos(timeoutSeconds),TimeUnit.SECONDS.toMillis(timeoutSeconds)
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
System.nanoTime(),System.currentTimeMillis()
"assertClusterSize(2,data2,data3)","assertClusterSizeEventually(2,data2,data3)"
"assertClusterSize(2,data2,data3)","assertClusterSizeEventually(2,data2,data3)"
"""TcpIpConnectionManager configured with Non Blocking IO-threading model: "" + inputThreadCount + "" input threads and ""+ outputThreads+ "" output threads""","""TcpIpConnectionManager configured with Non Blocking IO-threading model: "" + inputThreadCount + "" input threads and ""+ outputThreadCount+ "" output threads"""
"logger.info(""Optimized Selector: "" + selector.getClass().getName())","logger.finest(""Optimized Selector: "" + selector.getClass().getName())"
"logger.info(""Optimized Selector: "" + selector.getClass().getName())","logger.finest(""Optimized Selector: "" + selector.getClass().getName())"
"logger.info(""Optimized Selector: "" + selector.getClass().getName())","logger.finest(""Optimized Selector: "" + selector.getClass().getName())"
"logger.info(""Optimized Selector: "" + selector.getClass().getName())","logger.finest(""Optimized Selector: "" + selector.getClass().getName())"
"{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}","{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"
"{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}","{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"
"{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}","{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"
"{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}","{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"
24,25
24,25
(Long)strategy.getOrNull(third),(Integer)strategy.getOrNull(third)
"(Long)strategy.getOrNull(""test"",third)","(Integer)strategy.getOrNull(""test"",third)"
getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat()),getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat())
8 * 60000,16 * 60000
18,26
1,0
ownedEntryCount >= nearCacheSize,ownedEntryCount == nearCacheSize
clearFromMember.start(),clearFromMember.join()
clearFromMember.start(),clearFromMember.join()
clearFromMember.start(),clearFromMember.join()
clearFromMember.start(),clearFromMember.join()
"clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(""Error receiving heartbeat for connection: "" + connection,t);     }   } } )","clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(""Error receiving heartbeat for connection: "" + connection,t);     }   } } ,executionService.getInternalExecutor())"
"clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(""Error receiving heartbeat for connection: "" + connection,t);     }   } } )","clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(""Error receiving heartbeat for connection: "" + connection,t);     }   } } ,executionService.getInternalExecutor())"
EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries,EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response
EnterpriseMapPublisherCreateCodec.decodeResponse(response).list,EnterpriseMapPublisherCreateCodec.decodeResponse(response).response
hotRestartState != null,jsonHotRestartState != null
hotRestartState != null,jsonHotRestartState != null
QUEUE_TRANSACTION_LOG_RECORD=43,QUEUE_TRANSACTION_LOG_RECORD=44
QUEUE_TRANSACTION_LOG_RECORD=43,QUEUE_TRANSACTION_LOG_RECORD=44
Integer.valueOf(matcher.group(1)),Integer.parseInt(matcher.group(1))
Integer.valueOf(matcher.group(1)),Integer.parseInt(matcher.group(1))
Integer.valueOf(patchVersionString),Integer.parseInt(patchVersionString)
Integer.valueOf(patchVersionString),Integer.parseInt(patchVersionString)
"@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapBaseTest {   @After public void cleanup(){     System.clearProperty(""hazelcast.serialization.custom.override"");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty(""hazelcast.serialization.custom.override"",""true"");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest {   @After public void cleanup(){     System.clearProperty(""hazelcast.serialization.custom.override"");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty(""hazelcast.serialization.custom.override"",""true"");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapBaseTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format(""Hits should be greater than 0: %d > %d"",hits,0),hits > 0);     assertTrue(String.format(""Hits should be less than 1000: %d < %d"",hits,1000),hits < 1000);     assertTrue(String.format(""LastAccessTime should be greater than startTime: %d > %d"",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format(""LastAccessTime should be less or equal than current time: %d <= %d"",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(""Last access time should be set for "" + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(""Last access time should be set for "" + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue(""Last access time should be set for "" + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapAbstractTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format(""Hits should be greater than 0: %d > %d"",hits,0),hits > 0);     assertTrue(String.format(""Hits should be less than 1000: %d < %d"",hits,1000),hits < 1000);     assertTrue(String.format(""LastAccessTime should be greater than startTime: %d > %d"",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format(""LastAccessTime should be less or equal than current time: %d <= %d"",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(""Last access time should be set for "" + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(""Last access time should be set for "" + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue(""Last access time should be set for "" + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       map.put(key,""bar"");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapBaseTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(""map1"",first,map1);         assertMapSize(""map2"",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(""map1"",second,map1);         assertMapSize(""map2"",second,map2);         assertMapSize(""map3"",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(""map1"",third,map1);         assertMapSize(""map2"",third,map2);         assertMapSize(""map3"",third,map3);         assertMapSize(""map4"",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format(""%s should contain %d elements"",mapName,expectedMapSize),expectedMapSize,map.size());   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapAbstractTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(""map1"",first,map1);         assertMapSize(""map2"",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(""map1"",second,map1);         assertMapSize(""map2"",second,map2);         assertMapSize(""map3"",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(""map1"",third,map1);         assertMapSize(""map2"",third,map2);         assertMapSize(""map3"",third,map3);         assertMapSize(""map4"",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format(""%s should contain %d elements"",mapName,expectedMapSize),expectedMapSize,map.size());   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapBaseTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(""default"");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(""default"");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(""default"");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(""default"");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(""default"");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(""default"");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(""default"");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(""default"");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(""default"");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(""default"");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(""default"");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(""default"");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(""default"");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(""default"");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } "
"@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapBaseTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue(""map should be empty"",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse(""map should not be empty"",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,""bar"");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,""bar2"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar2"",map1.get(key));           assertEquals(""bar2"",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,""bar2"",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar2"",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar2"",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format(""We do not expect an entry which's key equals to %d in entry set"",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,""bar"");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,""bar"",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     assertFalse(map1.removeEntryListener(""2""));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } ","@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapAbstractTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue(""map should be empty"",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse(""map should not be empty"",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,""bar"");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,""bar2"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar2"",map1.get(key));           assertEquals(""bar2"",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,""bar2"",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar2"",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar2"",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format(""We do not expect an entry which's key equals to %d in entry set"",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(""bar"",map1.get(key));           assertEquals(""bar"",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,""bar"");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,""bar"");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(""default"");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(""default"");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,""bar"",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     assertFalse(map1.removeEntryListener(""2""));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(""default"");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(""default"");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } "
"@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapBaseTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=""foo-"" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } ","@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=""foo-"" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } "
"@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapBaseTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println(""nodeCount = "" + nodeCount);     System.out.println(""operations = "" + operations);     System.out.println(""keyCount = "" + keyCount);     Config config=new Config();     config.getReplicatedMapConfig(""test"").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName=""test"";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key=""foo-"" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println(""---------------------"");           System.out.println(""key = "" + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println(""value["" + j + ""] = ""+ map.get(key)+ "" , store version : ""+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=""foo-"" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } ","@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println(""nodeCount = "" + nodeCount);     System.out.println(""operations = "" + operations);     System.out.println(""keyCount = "" + keyCount);     Config config=new Config();     config.getReplicatedMapConfig(""test"").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName=""test"";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key=""foo-"" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println(""---------------------"");           System.out.println(""key = "" + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println(""value["" + j + ""] = ""+ map.get(key)+ "" , store version : ""+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=""foo-"" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } "
hazelcastFactory.newHazelcastClient(),hazelcastFactory.newHazelcastClient(newClientConfig())
hazelcastFactory.newHazelcastInstance(),hazelcastFactory.newHazelcastInstance(newConfig())
hazelcastFactory.newHazelcastClient(),hazelcastFactory.newHazelcastClient(newClientConfig())
hazelcastFactory.newHazelcastInstance(),hazelcastFactory.newHazelcastInstance(newConfig())
hazelcastFactory.newHazelcastClient(),hazelcastFactory.newHazelcastClient(newClientConfig())
"mm.tryLock(key,4,TimeUnit.SECONDS)","mm.tryLock(key,10,TimeUnit.SECONDS)"
"mm.tryLock(key,4,TimeUnit.SECONDS)","mm.tryLock(key,10,TimeUnit.SECONDS)"
1,33
1,33
1,33
1,33
"invocation.logger.warning(""Asking if operation execution has been started: "" + invocation)","invocation.logger.finest(""Asking if operation execution has been started: "" + invocation)"
"invocation.logger.warning(""Asking if operation execution has been started: "" + invocation)","invocation.logger.finest(""Asking if operation execution has been started: "" + invocation)"
"invocation.logger.warning(""'is-executing': "" + executing + "" -> ""+ invocation)","invocation.logger.finest(""'is-executing': "" + executing + "" -> ""+ invocation)"
"invocation.logger.warning(""'is-executing': "" + executing + "" -> ""+ invocation)","invocation.logger.finest(""'is-executing': "" + executing + "" -> ""+ invocation)"
"invocation.logger.warning(""'is-executing': "" + executing + "" -> ""+ invocation)","invocation.logger.finest(""'is-executing': "" + executing + "" -> ""+ invocation)"
"invocation.logger.warning(""'is-executing': "" + executing + "" -> ""+ invocation)","invocation.logger.finest(""'is-executing': "" + executing + "" -> ""+ invocation)"
"invocation.logger.warning(""Asking if operation execution has been started: "" + invocation)","invocation.logger.finest(""Asking if operation execution has been started: "" + invocation)"
"invocation.logger.warning(""Asking if operation execution has been started: "" + invocation)","invocation.logger.finest(""Asking if operation execution has been started: "" + invocation)"
"lock.tryLock(3,TimeUnit.SECONDS)","lock.tryLock(30,TimeUnit.SECONDS)"
"map.set(key,""value"",1,TimeUnit.SECONDS)","map.set(key,""value"",5,TimeUnit.SECONDS)"
NUMBER_OF_IDS_PER_THREAD=400001,NUMBER_OF_IDS_PER_THREAD=40000
"map.lock(key,4,TimeUnit.SECONDS)","map.lock(key,1,TimeUnit.SECONDS)"
"map.tryPut(key,newValue,8,TimeUnit.SECONDS)","map.tryPut(key,newValue,60,TimeUnit.SECONDS)"
"map.lock(key,4,TimeUnit.SECONDS)","map.lock(key,1,TimeUnit.SECONDS)"
"map.tryPut(key,value,8,TimeUnit.SECONDS)","map.tryPut(key,value,60,TimeUnit.SECONDS)"
attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length(),attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()
attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length(),attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()
2,66
callTimeout=1000,callTimeout=5000
2,66
callTimeout=1000,callTimeout=5000
callTimeoutMs=5000,callTimeoutMs=10000
callTimeoutMs=5000,callTimeoutMs=10000
callTimeout=1000,callTimeout=5000
callTimeoutMs=5000,callTimeoutMs=10000
callTimeoutMs=5000,callTimeoutMs=10000
callTimeout=1000,callTimeout=5000
callTimeout=5000,callTimeout=10000
callTimeout=5000,callTimeout=10000
"mm.tryLock(key,4,TimeUnit.SECONDS)","mm.tryLock(key,10,TimeUnit.SECONDS)"
callTimeoutMillis=1000,callTimeoutMillis=3000
"mm.tryLock(key,4,TimeUnit.SECONDS)","mm.tryLock(key,10,TimeUnit.SECONDS)"
callTimeoutMillis=1000,callTimeoutMillis=3000
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
nodeEngine.getService(LockService.SERVICE_NAME),nodeEngine.getSharedService(LockService.SERVICE_NAME)
Integer.valueOf(quantifier),Integer.parseInt(quantifier)
Integer.valueOf(quantifier),Integer.parseInt(quantifier)
Integer.valueOf(quantifier),Integer.parseInt(quantifier)
Integer.valueOf(quantifier),Integer.parseInt(quantifier)
queue.size() < 100000,queue.size() > 100000
!returnValue,returnValue
!returnValue,returnValue
!returnValue,returnValue
!returnValue,returnValue
stats.getLastAccessTime() > lastAccessTime,stats.getLastAccessTime() >= lastAccessTime
lastUpdateTime2 > lastUpdateTime,lastUpdateTime2 >= lastUpdateTime
stats.getLastUpdateTime() > lastUpdateTime,stats.getLastUpdateTime() >= lastUpdateTime
VERSION=0,VERSION=1
2,10
2,10
IOException e,Exception e
IOException e,Exception e
IOException e,Exception e
IOException e,Exception e
"createRecord(value,expiryTime)","createRecord(value,now,expiryTime)"
"createRecord(value,expiryTime)","createRecord(value,now,expiryTime)"
"createRecord(value,expiryTime)","createRecord(value,now,expiryTime)"
"createRecord(value,expiryTime)","createRecord(value,now,expiryTime)"
"new Duration(TimeUnit.MILLISECONDS,CRETAED_EXPIRY_TIME_IN_MSEC)","new Duration(TimeUnit.MILLISECONDS,CREATED_EXPIRY_TIME_IN_MSEC)"
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(2),TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(1)
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } ,10)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } )"
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } ,10)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } )"
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } ,10)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } )"
"assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } ,10)","assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(""there should be only one registration"",1,regs1.size());     assertEquals(""there should be only one registration"",1,regs2.size());   } } )"
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicLocalTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicLocalTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
"@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ","@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
"new TransactionOptions().setDurability(0).setTimeout(10,TimeUnit.SECONDS)","new TransactionOptions().setDurability(0).setTimeout(30,TimeUnit.SECONDS)"
4,68
4,68
2,66
2,66
"assertClusterSize(2,h2)","assertClusterSizeEventually(2,h2)"
"assertClusterSize(2,h2)","assertClusterSizeEventually(2,h2)"
"CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,partitionId)","CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId)"
"assertEquals(0,localReplicatedMapStats.getOwnedEntryMemoryCost())","assertEquals(1234,localReplicatedMapStats.getOwnedEntryMemoryCost())"
"assertEquals(0,deserialized.getOwnedEntryMemoryCost())","assertEquals(1234,deserialized.getOwnedEntryMemoryCost())"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertOpenEventually(countDownLatch,50)","assertOpenEventually(countDownLatch,300)"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
"assertClusterSize(2,nodes[0])","assertClusterSizeEventually(2,nodes[0])"
17,1
target.addTask(task),target.addTaskAndWakeup(task)
target.addTask(task),target.addTaskAndWakeup(task)
"putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)","setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)"
"putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)","setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)"
17,1
target.addTask(task),target.addTaskAndWakeup(task)
target.addTask(task),target.addTaskAndWakeup(task)
HazelcastInstanceFactory.terminateAll(),factory.terminateAll()
HazelcastInstanceFactory.terminateAll(),factory.terminateAll()
HazelcastInstanceFactory.terminateAll(),factory.terminateAll()
HazelcastInstanceFactory.terminateAll(),factory.terminateAll()
this.referenceId == referenceId,!transactional && this.referenceId == referenceId
this.referenceId == referenceId,!this.transactional && this.referenceId == referenceId
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
toHeapData(key),toEventData(key)
"logger.severe(""Failed to process response: "" + responsePacket + "" on response thread:""+ getName())","logger.severe(""Failed to process response: "" + responsePacket + "" on response thread:""+ getName(),e)"
"logger.severe(""Failed to process response: "" + responsePacket + "" on response thread:""+ getName())","logger.severe(""Failed to process response: "" + responsePacket + "" on response thread:""+ getName(),e)"
2,10
2,10
2,26
HazelcastClient.newHazelcastClient(),HazelcastClient.newHazelcastClient(clientConfig)
"assertOpenEventually(""responseLatch"",responseLatch,5)","assertOpenEventually(""responseLatch"",responseLatch)"
"assertOpenEventually(""responseLatch"",responseLatch,5)","assertOpenEventually(""responseLatch"",responseLatch)"
"new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)","new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)"
"new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)","new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)"
out.writeObject(function),out.writeData(function)
out.writeObject(function),out.writeData(function)
in.readObject(),in.readData()
in.readObject(),in.readData()
out.writeObject(function),out.writeData(function)
out.writeObject(function),out.writeData(function)
in.readObject(),in.readData()
in.readObject(),in.readData()
-26,-29
dirtyOutputBuffer(),dirtyOutputBuffer() || currentPacket != null
dirtyOutputBuffer(),dirtyOutputBuffer() || currentPacket != null
id=13,id=15
id=14,id=16
id=15,id=17
id=16,id=18
id=17,id=19
id=18,id=20
id=19,id=21
id=19,id=22
id=21,id=20
id=23,id=21
id=24,id=22
id=25,id=23
id=26,id=24
id=27,id=25
id=28,id=26
id=29,id=27
id=30,id=28
id=31,id=29
id=32,id=30
id=33,id=31
id=34,id=32
id=35,id=33
id=36,id=34
id=37,id=35
id=38,id=36
id=39,id=37
id=40,id=38
id=41,id=39
id=42,id=40
id=43,id=41
id=44,id=42
id=45,id=43
id=46,id=44
id=47,id=45
id=48,id=46
id=49,id=47
id=50,id=48
id=51,id=49
id=52,id=50
id=53,id=51
id=54,id=52
id=55,id=53
id=56,id=54
id=19,id=17
id=20,id=18
id=21,id=19
id=22,id=20
id=23,id=21
id=24,id=22
id=1,id=2
id=2,id=3
id=3,id=4
id=4,id=5
id=4,id=6
id=5,id=7
id=6,id=8
id=7,id=9
id=7,id=10
id=8,id=11
id=9,id=12
id=10,id=13
id=11,id=14
id=12,id=15
id=13,id=16
id=14,id=17
id=15,id=18
id=16,id=19
id=17,id=20
id=15,id=14
id=16,id=15
"""wrong partition, expected: "" + getPartitionId() + "" but found:""+ op","""wrong partition, expected: "" + getPartitionId() + "" but found:""+ partitionId"
"logger.info(""Future response is already set! Current response: "" + response + "", Offered response: ""+ offeredResponse+ "", Invocation: ""+ invocation)","logger.finest(""Future response is already set! Current response: "" + response + "", Offered response: ""+ offeredResponse+ "", Invocation: ""+ invocation)"
"logger.info(""Future response is already set! Current response: "" + response + "", Offered response: ""+ offeredResponse+ "", Invocation: ""+ invocation)","logger.finest(""Future response is already set! Current response: "" + response + "", Offered response: ""+ offeredResponse+ "", Invocation: ""+ invocation)"
"new CacheCreateConfigOperation(config,true)","new CacheCreateConfigOperation(config,false)"
"new CacheCreateConfigRequest(cacheConfig,true,partitionId)","new CacheCreateConfigRequest(cacheConfig,false,partitionId)"
"new CacheCreateConfigOperation(cacheConfig,create,false)","new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)"
"MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA,THE_LONG,THE_LONG,THE_BOOLEAN)","MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA)"
1,17
new Packet(ioService.getPortableContext()),new Packet()
"cache.setRecord(key,record)","cache.putRecord(key,record)"
"cache.setRecord(key,record)","cache.putRecord(key,record)"
"cache.setRecord(key,record)","cache.putRecord(key,record)"
"cache.setRecord(key,record)","cache.putRecord(key,record)"
"assertSizeEventually(COUNT,map)","assertSizeEventually(COUNT,map,180)"
success,!success
success,!success
2,10
"comparePartitionOwnership(false,localMember,partition)","comparePartitionOwnership(true,localMember,partition)"
"comparePartitionOwnership(true,localMember,partition)","comparePartitionOwnership(false,localMember,partition)"
"new Packet(data,0,serializationService.getPortableContext())","new Packet(data,0)"
"new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())","new Packet(data,operation.getPartitionId())"
"new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())","new Packet(data,operation.getPartitionId())"
"new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())","new Packet(data,operation.getPartitionId())"
10,2
Collection<DelayedEntry>,List<DelayedEntry>
expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR,expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
hz1.getLifecycleService().terminate(),hz1.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
node.getLifecycleService().terminate(),node.getLifecycleService().shutdown()
connections.get(address),connections.get(target)
getLock(address),getLock(target)
connections.get(address),connections.get(target)
connections.get(address),connections.get(target)
getLock(address),getLock(target)
connections.get(address),connections.get(target)
THREADS_PER_CLIENT=8,THREADS_PER_CLIENT=4
MAX_ITEMS=1000,MAX_ITEMS=100
THREADS_PER_CLIENT=8,THREADS_PER_CLIENT=4
MAX_ITEMS=1000,MAX_ITEMS=100
basicInvocation.potentialResponse == null,basicInvocation.potentialResponse != null
1,17
new DescribeInstances(awsConfig).execute(endpoint),new DescribeInstances(awsConfig).execute()
new DescribeInstances(awsConfig).execute(endpoint),new DescribeInstances(awsConfig).execute()
invocation.pendingResponse == null,invocation.pendingResponse != null
new NotSupportedException(),"new NotSupportedException(""getResultSetInfo() is not supported by this resource adapter as per spec 15.11.3"")"
new HazelcastInstance[count],new HazelcastInstance[nodeCount]
i < count,i < nodeCount
i < count,i < nodeCount
out.writeObject(entry.getValue()),out.writeData(entry.getValue())
out.writeObject(entry.getValue()),out.writeData(entry.getValue())
in.readObject(),in.readData()
in.readObject(),in.readData()
Thread.sleep(5000),Thread.sleep(10000)
Thread.sleep(5000),Thread.sleep(10000)
"REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)","REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)"
"REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)","REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)"
"REMOVALS_UPDATER.compareAndSet(this,nanos,duration)","REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)"
"REMOVALS_UPDATER.compareAndSet(this,nanos,duration)","REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)"
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addRemoveTimeNano(System.nanoTime() - start),statistics.addRemoveTimeNanos(System.nanoTime() - start)
statistics.addRemoveTimeNano(System.nanoTime() - start),statistics.addRemoveTimeNanos(System.nanoTime() - start)
statistics.addRemoveTimeNano(System.nanoTime() - start),statistics.addRemoveTimeNanos(System.nanoTime() - start)
statistics.addRemoveTimeNano(System.nanoTime() - start),statistics.addRemoveTimeNanos(System.nanoTime() - start)
statistics.addRemoveTimeNano(System.nanoTime() - start),statistics.addRemoveTimeNanos(System.nanoTime() - start)
statistics.addRemoveTimeNano(System.nanoTime() - start),statistics.addRemoveTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addPutTimeNano(System.nanoTime() - start),statistics.addPutTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
statistics.addGetTimeNano(System.nanoTime() - start),statistics.addGetTimeNanos(System.nanoTime() - start)
timeout=30000,timeout=120000
0,16
timeout=30000,timeout=120000
timeout=30000,timeout=120000
expirationTime == Long.MAX_VALUE && expirationTime < 0,expirationTime == Long.MAX_VALUE || expirationTime < 0
expirationTime == Long.MAX_VALUE && expirationTime < 0,expirationTime == Long.MAX_VALUE || expirationTime < 0
"new UnsafeBasedStringCharProvider(UNSAFE,stringValueFieldOffset,str)","new UnsafeBasedStringCharProvider(unsafe,stringValueFieldOffset,str)"
"getOrCreateContainer().unlock(dataKey,caller,threadId)",getOrCreateContainer().forceUnlock(dataKey)
"getOrCreateContainer().unlock(dataKey,caller,threadId)",getOrCreateContainer().forceUnlock(dataKey)
"getOrCreateContainer().unlock(dataKey,caller,threadId)",getOrCreateContainer().forceUnlock(dataKey)
"getOrCreateContainer().unlock(dataKey,caller,threadId)",getOrCreateContainer().forceUnlock(dataKey)
"new MapStoreWithStoreCount(expectedStoreCount,300,100)","new MapStoreWithStoreCount(expectedStoreCount,300,50)"
1,0
1,0
1,0
1,0
1,0
"cache.remove(key,null)",cache.removeRecord(key)
"getClusterMap().put(buildAttributeName(name),value)","getClusterMap().set(buildAttributeName(name),value)"
"getClusterMap().put(buildAttributeName(name),value)","getClusterMap().set(buildAttributeName(name),value)"
"clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)","clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)"
"clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)","clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)"
count <= 0,count < 0
count <= 0,count < 0
18,26
0,0
instance2.getLifecycleService().terminate(),instance2.getLifecycleService().shutdown()
instance2.getLifecycleService().terminate(),instance2.getLifecycleService().shutdown()
"assertFalse(""reuse-address"",networkConfig.isReuseAddress())","assertTrue(""reuse-address"",networkConfig.isReuseAddress())"
"assertFalse(""reuse-address"",networkConfig.isReuseAddress())","assertTrue(""reuse-address"",networkConfig.isReuseAddress())"
instance2.getLifecycleService().terminate(),instance2.getLifecycleService().shutdown()
instance2.getLifecycleService().terminate(),instance2.getLifecycleService().shutdown()
"assertFalse(""reuse-address"",networkConfig.isReuseAddress())","assertTrue(""reuse-address"",networkConfig.isReuseAddress())"
"assertFalse(""reuse-address"",networkConfig.isReuseAddress())","assertTrue(""reuse-address"",networkConfig.isReuseAddress())"
topicRegistrations == null && topicRegistrations.isEmpty(),topicRegistrations == null || topicRegistrations.isEmpty()
topicRegistrations == null && topicRegistrations.isEmpty(),topicRegistrations == null || topicRegistrations.isEmpty()
keys.isEmpty(),keySet.isEmpty()
keys.isEmpty(),keySet.isEmpty()
keys.isEmpty(),keySet.isEmpty()
keys.isEmpty(),keySet.isEmpty()
mapServiceContext.hasRegisteredListener(mapName),!mapServiceContext.hasRegisteredListener(mapName)
mapServiceContext.hasRegisteredListener(mapName),!mapServiceContext.hasRegisteredListener(mapName)
new ArrayList<Data>(),new ArrayList<Data>(entries.size())
Collection<Data>,List<Data>
Collection<Data>,List<Data>
16 << 10,32 << 10
(long)y & 0xFFFFFFFL,(long)y & 0xFFFFFFFFL
(long)y & 0xFFFFFFFL,(long)y & 0xFFFFFFFFL
LOAD_FACTOR=1000,LOAD_FACTOR=0.75f
"attribute.split(""\\."")","paramAttribute.split(""\\."")"
"attribute.split(""\\."")","paramAttribute.split(""\\."")"
EVICT_ALL + 1,IS_EMPTY + 1
EVICT_ALL + 1,IS_EMPTY + 1
mapConfig.getTotalBackupCount(),mapConfig.getBackupCount()
mapConfig.getTotalBackupCount(),mapConfig.getBackupCount()
mapConfig.getTotalBackupCount(),mapConfig.getBackupCount()
mapConfig.getTotalBackupCount(),mapConfig.getBackupCount()
"new ObjectRecordWithStats(key,v)","new ObjectRecordWithStats(key,value)"
return context; ,return ctx; 
return context; ,return ctx; 
return context; ,return ctx; 
AbstactStoreHandler<DelayedEntry>,AbstractStoreHandler<DelayedEntry>
AbstactStoreHandler<DelayedEntry>,AbstractStoreHandler<DelayedEntry>
partitionContainer.getRecordStore(name),partitionContainer.getExistingRecordStore(name)
partitionContainer.getRecordStore(name),partitionContainer.getExistingRecordStore(name)
connectionManager.markOwnerAddressAsClosed(),connectionManager.markOwnerConnectionAsClosed()
connectionManager.markOwnerAddressAsClosed(),connectionManager.markOwnerConnectionAsClosed()
mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000,mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L
mapContainer.getMapConfig().getMaxIdleSeconds() * 1000,mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L
internalExecutor.submit(command),internalExecutor.submit(futureTask)
internalExecutor.submit(command),internalExecutor.submit(futureTask)
potentialResponse == null,potentialResponse != null
"assertOpenEventually(countDownLatch,30)",assertOpenEventually(countDownLatch)
"assertOpenEventually(countDownLatch,30)",assertOpenEventually(countDownLatch)
"assertEquals(148,map.getLocalMapStats().getHeapCost())","assertEquals(156,map.getLocalMapStats().getHeapCost())"
constructors[TXN_REMOVE_ALL],constructors[TXN_REMOVE_ALL_BACKUP]
Integer.valueOf(sessionTTL),Integer.parseInt(sessionTTL)
Integer.valueOf(sessionTTL),Integer.parseInt(sessionTTL)
Integer.valueOf(st.nextToken()),Integer.parseInt(st.nextToken())
Integer.valueOf(st.nextToken()),Integer.parseInt(st.nextToken())
Long.valueOf(args[1]),Long.parseLong(args[1])
Long.valueOf(args[1]),Long.parseLong(args[1])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(timeout),Long.parseLong(timeout)
Long.valueOf(timeout),Long.parseLong(timeout)
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[1]),Long.parseLong(args[1])
Long.valueOf(args[1]),Long.parseLong(args[1])
TransactionException e,Exception e
Integer.valueOf(sessionTTL),Integer.parseInt(sessionTTL)
Integer.valueOf(sessionTTL),Integer.parseInt(sessionTTL)
Integer.valueOf(st.nextToken()),Integer.parseInt(st.nextToken())
Integer.valueOf(st.nextToken()),Integer.parseInt(st.nextToken())
Long.valueOf(args[1]),Long.parseLong(args[1])
Long.valueOf(args[1]),Long.parseLong(args[1])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(timeout),Long.parseLong(timeout)
Long.valueOf(timeout),Long.parseLong(timeout)
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[2]),Long.parseLong(args[2])
Long.valueOf(args[1]),Long.parseLong(args[1])
Long.valueOf(args[1]),Long.parseLong(args[1])
TransactionException e,Exception e
"localCache.put(name,NULL_ENTRY)","localCache.put(name,cacheEntry)"
"localCache.put(name,NULL_ENTRY)","localCache.put(name,cacheEntry)"
numThreads.get() > MAX_THREADS,numThreads.get() >= MAX_THREADS
return true; ,return false; 
return true; ,return false; 
"new CancelJobSupervisorOperation(name,jobId,jobOwner)","new CancelJobSupervisorOperation(name,jobId)"
constructor.getTypeParameters(),constructor.getParameterTypes()
constructor.getTypeParameters(),constructor.getParameterTypes()
9,1
"latch.await(100,TimeUnit.SECONDS)","latch.await(600,TimeUnit.SECONDS)"
TrustManagerFactory.getDefaultAlgorithm(),KeyManagerFactory.getDefaultAlgorithm()
TrustManagerFactory.getDefaultAlgorithm(),KeyManagerFactory.getDefaultAlgorithm()
TrustManagerFactory.getDefaultAlgorithm(),KeyManagerFactory.getDefaultAlgorithm()
TrustManagerFactory.getDefaultAlgorithm(),KeyManagerFactory.getDefaultAlgorithm()
tx == null,tx != null
tx == null,tx != null
"replicatedMapService.getReplicatedRecordStore(mapName,false)","replicatedMapService.getReplicatedRecordStore(mapName,true)"
"EventPublishingService<ReplicationMessage,ReplicatedMessageListener>","EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>"
ReplicationMessage event,IdentifiedDataSerializable event
new HashSet<RecordReplicationInfo>(recordStore.size()),new HashSet<RecordReplicationInfo>()
new HashSet<RecordReplicationInfo>(),new HashSet<RecordReplicationInfo>(recordStore.size())
entries.remove(key),entries.remove(timeKey)
"assertTrue(latch.await(5,TimeUnit.MINUTES))","assertTrue(""map size is : "" + map.size(),latch.await(5,TimeUnit.MINUTES))"
"assertEquals(8,config.getMapConfigs().size())","assertEquals(6,config.getMapConfigs().size())"
"assertEquals(8,config.getMapConfigs().size())","assertEquals(6,config.getMapConfigs().size())"
"latch.await(1,TimeUnit.MINUTES)","latch.await(5,TimeUnit.MINUTES)"
shouldBackup=false,shouldBackup=true
toBeRemovedKeys.clear(),toBeRemovedKeys.removeAll(keysToDelete)
toBeRemovedKeys.clear(),toBeRemovedKeys.removeAll(keysToDelete)
list.isEmpty(),!list.isEmpty()
list.isEmpty(),!list.isEmpty()
-1L,-1
-1L,-1
Collection<String>,List<String>
getClientConfig().getAddressList(),getClientConfig().getAddresses()
getClientConfig().getAddressList(),getClientConfig().getAddresses()
Collection<String>,List<String>
getClientConfig().getAddressList(),getClientConfig().getAddresses()
getClientConfig().getAddressList(),getClientConfig().getAddresses()
nodeEngine.getPartitionService(),nodeEngine.getClusterService()
nodeEngine.getPartitionService(),nodeEngine.getClusterService()
nodeEngine.getPartitionService(),nodeEngine.getClusterService()
nodeEngine.getPartitionService(),nodeEngine.getClusterService()
"assertEquals(3,map2.keySet().size())","assertEquals(2,map2.keySet().size())"
active,!active
active,!active
return false; ,return true; 
return false; ,return true; 
maxSize > (used / 1024 / 1024),maxSize < (used / 1024 / 1024)
maxSize > (used / total),maxSize < (used / total)
maxSize > (used / 1024 / 1024),maxSize < (used / 1024 / 1024)
maxSize > (used / total),maxSize < (used / total)
maxSize > (used / 1024 / 1024),maxSize < (used / 1024 / 1024)
maxSize > (used / total),maxSize < (used / total)
maxSize > (used / 1024 / 1024),maxSize < (used / 1024 / 1024)
maxSize > (used / total),maxSize < (used / total)
case REPLACE_IS_SAME: ,case REPLACE_IF_SAME: 
REPLACE_IS_SAME(7),REPLACE_IF_SAME(7)
"map.set(key,toStoreValue(value),0,TimeUnit.SECONDS)","map.set(key,toStoreValue(value))"
"map.set(keyValue.getKeyData(),value,0,TimeUnit.SECONDS)","map.set(keyValue.getKeyData(),value)"
factory.getSemaphore(packet.name),factory.getOrCreateProxyByName(packet.name)
factory.getSemaphore(packet.name),factory.getOrCreateProxyByName(packet.name)
"latch.await(1,TimeUnit.MINUTES)","latch.await(5,TimeUnit.MINUTES)"
active=true,active=false
"nearCache.put(key,event.getValue())",nearCache.invalidate(key)
"addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println(""invalidate"");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,true)","addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println(""invalidate"");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,false)"
name == null,key == null
name == null,key == null
serverSocket == null,serverSocket == null || !serverSocket.isBound()
serverSocket == null,serverSocket == null || !serverSocket.isBound()
1000 * 5,1000 * 60
v.getCreationTime() + timeToLive > now,v.getCreationTime() + timeToLive < now
v.getCreationTime() + timeToLive > now,v.getCreationTime() + timeToLive < now
"new RunnableAdapter<T>(task,result)",new RunnableAdapter<T>(task)
toObject(value),toObject(dataValue)
instance.managementService.unregister(),instance.managementService.destroy()
instance.managementService.unregister(),instance.managementService.destroy()
instance.managementService.unregister(),instance.managementService.destroy()
instance.managementService.unregister(),instance.managementService.destroy()
new MMUnlockHandler(this),new UnlockHandler(this)
new UnlockHandler(this),new MMUnlockHandler(this)
new LogVersionMismatchRequest(),new VersionMismatchLogRequest()
expectedValue.equals(oldValue),expectedValue.equals(oldObject)
getExecutorService(),"getExecutorService(""hz.initialization"")"
"pm.runMigrationTasks(this,tasks,partitionId,replicaIndex,from)","pm.runMigrationTasks(tasks,partitionId,replicaIndex,from)"
op.getResultAsObject(),op.getResultAsObject(false)
0,2
"new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(""cached""),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } ","new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(""cached""),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } "
"new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(""cached""),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } ","new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(""cached""),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } "
ttl > 0,ttl >= 0
ttl > 0,ttl >= 0
paused.get(),!paused.get()
paused.set(false),paused.set(true)
"BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); ","Runnable t=new RunAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); "
"BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); ","Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); "
"BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); ","Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); "
hz.getCluster().getLocalMember().isSuperClient(),hz.getCluster().getLocalMember().isLiteMember()
hz.getCluster().getLocalMember().isSuperClient(),hz.getCluster().getLocalMember().isLiteMember()
Object message,Message message
2,66
128,192
"handleSecurityPermissionEndpoints(principalNode,permConfig)","handleSecurityPermissionEndpoints(child,permConfig)"
"handleSecurityPermissionActions(principalNode,permConfig)","handleSecurityPermissionActions(child,permConfig)"
m.isCacheValue(),m.isReadBackupData()
m.isCacheValue(),m.isReadBackupData()
1024 * 1024,64 * 1024
pairs != null,pairs != null && pairs.getKeyValues() != null
i < 50,i < 100
i < 50,i < 100
0,18
(o instanceof Record),!(o instanceof Record)
Thread.sleep(10),Thread.sleep(50)
"latch.await(5,TimeUnit.SECONDS)","latch.await(25,TimeUnit.SECONDS)"
UnsupportedOperationException.class,NullPointerException.class
inner.innerSetException(new TimeoutException()),"inner.innerSetException(new TimeoutException(),false)"
inner.innerSetException((Throwable)result),"inner.innerSetException((Throwable)result,true)"
out.writeDouble((Float)obj),out.writeFloat((Float)obj)
out.writeDouble((Float)obj),out.writeFloat((Float)obj)
in.readInt(),in.readLong()
in.readInt(),in.readLong()
"new EntryEvent(packet.getName(),(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))","new EntryEvent(packet.getName(),null,(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))"
"ArrayList<EntryListener<?,?>>","CopyOnWriteArrayList<EntryListener<?,?>>"
ArrayList<MessageListener<Object>>,CopyOnWriteArrayList<MessageListener<Object>>
12,28
"latch.await(100,TimeUnit.MILLISECONDS)","latch.await(10000,TimeUnit.MILLISECONDS)"
"latch.await(100,TimeUnit.MILLISECONDS)","latch.await(10000,TimeUnit.MILLISECONDS)"
"latch.await(10,TimeUnit.MILLISECONDS)","latch.await(10000,TimeUnit.MILLISECONDS)"
"/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ Object load(Object key); ","/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ V load(K key); "
Object key,K key
System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000,System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN
"node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )","node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )"
"node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )","node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )"
"node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )","node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )"
"node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )","node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )"
serverSocket.setReuseAddress(false),serverSocket.setReuseAddress(true)
serverSocket.setReuseAddress(false),serverSocket.setReuseAddress(true)
url == null,url != null
RowingBoat captain=(RowingBoat)beans.get(ROWING_BEAN); ,Captain captain=(Captain)beans.get(ROWING_BEAN); 
/**   * The tested prototype instance  */ private final Prototype testedPrototype; ,/**   * The tested prototype instance  */ private final P testedPrototype; 
final Prototype testedPrototype,final P testedPrototype
/**   * The tested prototype instance  */ private final Prototype testedPrototype; ,/**   * The tested prototype instance  */ private final P testedPrototype; 
final Prototype testedPrototype,final P testedPrototype
1,0
GnomeEngineeringManager manager=new GnomeEngineeringManager(); ,Engineer manager=new GnomeEngineeringManager(); 
"new NullPointerException(""profession and name can not be null"")","new IllegalArgumentException(""profession and name can not be null"")"
BOLD,BALD
case BOLD: ,case BALD: 
beansXml.createAlternatives(),beansXml.getOrCreateAlternatives()
beansXml.createAlternatives(),beansXml.getOrCreateAlternatives()
beansXml.createAlternatives(),beansXml.getOrCreateAlternatives()
beansXml.createAlternatives(),beansXml.getOrCreateAlternatives()
this.getClass(),Thread.currentThread()
name=Resources.REQUEST_QUEUE,lookup=Resources.REQUEST_QUEUE
"ShrinkWrap.create(WebArchive.class).addClass(BatchTestHelper.class).addClass(MyInputRecord.class).addClass(MyItemProcessor.class).addClass(MyItemReader.class).addClass(MyItemWriter.class).addClass(MyOutputRecord.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create(""beans.xml"")).addAsManifestResource(""META-INF/batch-jobs/myJob.xml"",""batch-jobs/myJob.xml"")","ShrinkWrap.create(WebArchive.class).addClass(BatchTestHelper.class).addClass(MyInputRecord.class).addClass(MyItemProcessor.class).addClass(MyItemReader.class).addClass(MyItemWriter.class).addClass(MyOutputRecord.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create(""beans.xml"")).addAsResource(""META-INF/batch-jobs/myJob.xml"")"
"ShrinkWrap.create(WebArchive.class).addClass(MyBatchlet.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create(""beans.xml"")).addAsManifestResource(""META-INF/batch-jobs/myJob.xml"",""batch-jobs/myJob.xml"")","ShrinkWrap.create(WebArchive.class).addClass(MyBatchlet.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create(""beans.xml"")).addAsResource(""META-INF/batch-jobs/myJob.xml"")"
"ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource(EmptyAsset.INSTANCE,""beans.xml"")","ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource(""beans.xml"")"
"ShrinkWrap.create(JavaArchive.class).addAsManifestResource(EmptyAsset.INSTANCE,""beans.xml"")","ShrinkWrap.create(JavaArchive.class).addAsManifestResource(""beans.xml"")"
serialVersionUID=1L,serialVersionUID=1975269372645791816L
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())),hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())),hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())),hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())),hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())),hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())),hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
"jarName.endsWith("".jar"")","jarName.endsWith("".jar"") || jarName.endsWith("".war"")"
"jarName.endsWith("".jar"")","jarName.endsWith("".jar"") || jarName.endsWith("".war"")"
3 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier,4 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
"registerConsumer(newUUIDString(),newUUIDString(),owner,attributes)","registerConsumer(owner,newUUIDString(),newUUIDString(),attributes)"
"registerConsumer(newUUIDString(),newUUIDString(),owner,attributes)","registerConsumer(owner,newUUIDString(),newUUIDString(),attributes)"
9,26
"new ServletException(""non-HTTP request or response"")","new ServletException(""non-HTTP request or response"",e)"
"new ServletException(""non-HTTP request or response"")","new ServletException(""non-HTTP request or response"",e)"
"new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)","new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"
"new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)","new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"
"new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS,1)","new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS)"
Thread.sleep(2000),Thread.sleep(5000)
"clientConfig.property(ClientProperties.READ_TIMEOUT,1000)","clientConfig.property(ClientProperties.READ_TIMEOUT,2000)"
Thread.sleep(2000),Thread.sleep(5000)
"clientConfig.property(ClientProperties.READ_TIMEOUT,1000)","clientConfig.property(ClientProperties.READ_TIMEOUT,2000)"
requestContext.getUri().getPath(),requestContext.getUri().getRawPath()
requestContext.getUri().getPath(),requestContext.getUri().getRawPath()
"LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())","LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)"
"LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())","LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)"
mime == null,mime == null || mime.value().length == 0
mime == null,mime == null || mime.value().length == 0
"assertEquals(302,t.request().get().getStatus())","assertEquals(303,t.request().get().getStatus())"
setMode(mode),setMode(RIGHT)
"mViewAbove.setCurrentItem(2,animate)","mViewAbove.setCurrentItem(0,animate)"
"t.add(R.id.frame,new SampleListFragment())","t.replace(R.id.frame,new SampleListFragment())"
"t.add(R.id.frame,new SampleListFragment())","t.replace(R.id.frame,new SampleListFragment())"
input.mark(firstReadBufferSize),input.mark(bufferSize)
"Validate.notEmpty(""Cookie name must not be empty"")","Validate.notEmpty(name,""Cookie name must not be empty"")"
"Validate.notEmpty(""Cookie name must not be empty"")","Validate.notEmpty(name,""Cookie name must not be empty"")"
"new Whitelist().addTags(""a"",""b"",""blockquote"",""br"",""cite"",""code"",""dd"",""dl"",""dt"",""em"",""i"",""li"",""ol"",""p"",""pre"",""q"",""small"",""strike"",""strong"",""sub"",""sup"",""u"",""ul"")","new Whitelist().addTags(""a"",""b"",""blockquote"",""br"",""cite"",""code"",""dd"",""dl"",""dt"",""em"",""i"",""li"",""ol"",""p"",""pre"",""q"",""small"",""span"",""strike"",""strong"",""sub"",""sup"",""u"",""ul"")"
"new Whitelist().addTags(""a"",""b"",""blockquote"",""br"",""caption"",""cite"",""code"",""col"",""colgroup"",""dd"",""div"",""dl"",""dt"",""em"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""i"",""img"",""li"",""ol"",""p"",""pre"",""q"",""small"",""strike"",""strong"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""u"",""ul"")","new Whitelist().addTags(""a"",""b"",""blockquote"",""br"",""caption"",""cite"",""code"",""col"",""colgroup"",""dd"",""div"",""dl"",""dt"",""em"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""i"",""img"",""li"",""ol"",""p"",""pre"",""q"",""small"",""span"",""strike"",""strong"",""sub"",""sup"",""table"",""tbody"",""td"",""tfoot"",""th"",""thead"",""tr"",""u"",""ul"")"
"Validate.notEmpty(""Cookie name must not be empty"")","Validate.notEmpty(name,""Cookie name must not be empty"")"
"Validate.notEmpty(""Cookie name must not be empty"")","Validate.notEmpty(name,""Cookie name must not be empty"")"
0,4
docData.charAt(0) == 65279,docData.length() > 0 && docData.charAt(0) == 65279
"StringUtil.in(name,""base"",""basefont"",""bgsound"",""command"",""link"",""meta"",""noframes"",""style"",""title"")","StringUtil.in(name,""base"",""basefont"",""bgsound"",""command"",""link"",""meta"",""noframes"",""script"",""style"",""title"")"
el.className(),el.classNames()
el.className(),el.classNames()
"child.tagName.equals(""base"") || child.tagName.equals(""script"") || child.tagName.equals(""link"")|| child.tagName.equals(""meta"")|| child.tagName.equals(""title"")","child.tagName.equals(""base"") || child.tagName.equals(""script"") || child.tagName.equals(""link"")|| child.tagName.equals(""meta"")|| child.tagName.equals(""title"")|| child.tagName.equals(""style"")|| child.tagName.equals(""object"")"
new GenerationException(e),"new GenerationException(""Couldn't parse type: "" + typeDefinition,e)"
new GenerationException(e),"new GenerationException(""Couldn't parse type: "" + typeDefinition,e)"
return true; ,return false; 
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"is(""/home/source"")","endsWith(""/home/source"")"
"assertEquals(failures.size(),1)","assertEquals(1,failures.size())"
1025,1
Thread.sleep(50),Thread.sleep(500)
1024,1025
2,18
"fMethodDescriptions.put(method,description)","fMethodDescriptions.putIfAbsent(method,description)"
"fMethodDescriptions.put(method,description)","fMethodDescriptions.putIfAbsent(method,description)"
theClass.getConstructor(new Class[0]),theClass.getConstructor()
"testClass.getMethod(SUITE_METHODNAME,new Class[0])",testClass.getMethod(SUITE_METHODNAME)
"suiteMethod.invoke(null,(Object[])new Class[0])",suiteMethod.invoke(null)
theClass.getConstructor(new Class[0]),theClass.getConstructor()
"testClass.getMethod(SUITE_METHODNAME,new Class[0])",testClass.getMethod(SUITE_METHODNAME)
"suiteMethod.invoke(null,(Object[])new Class[0])",suiteMethod.invoke(null)
"assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)","assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)"
"assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)","assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)"
"assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)","assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)"
"assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)","assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)"
10,8
10,8
10,8
10,8
10,8
10,8
10,8
10,8
10,8
10,8
10,8
10,8
1,1025
1,1025
Class.forName(name),"Class.forName(name,false,getClass().getClassLoader())"
Class.forName(name),"Class.forName(name,false,getClass().getClassLoader())"
1,1025
1,0
1,0
"getPreferences().store(fos,"""")","getPreferences().save(fos,"""")"
"getPreferences().store(fos,"""")","getPreferences().save(fos,"""")"
"getPreferences().setProperty(key,value)","getPreferences().put(key,value)"
"getPreferences().setProperty(key,value)","getPreferences().put(key,value)"
fLines.add(st.nextToken()),fLines.addElement(st.nextToken())
fLines.add(st.nextToken()),fLines.addElement(st.nextToken())
"new ResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println(""Errors here"");   } } ","new TestResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println(""Errors here"");   } } "
"getFirstByType(type,withProxy)",getFirstByType(type)
progress.start(0.19f),progress.start(0.35f)
progress.start(0.45f),progress.start(0.29f)
setMinHeight(minWidth),setMinHeight(minHeight)
setMinHeight(minWidth),setMinHeight(minHeight)
from.getClass(),to.getClass()
from.getClass(),to.getClass()
MathUtils.random(height),MathUtils.random(width)
editor.commit(),editor.apply()
editor.commit(),editor.apply()
10,2
"!calculatePositionAndValue(x,y)","event.isTouchFocusCancel() || !calculatePositionAndValue(x,y)"
glyphPositions[i] - x <= x - glyphPositions[i - 1],i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]
InputProcessor[],Object[]
InputProcessor[],Object[]
InputProcessor[],Object[]
InputProcessor[],Object[]
InputProcessor[],Object[]
InputProcessor[],Object[]
InputProcessor[],Object[]
InputProcessor[],Object[]
static public final PowIn fastSlow=pow2In; ,static public final PowOut fastSlow=pow2Out; 
showTooltip == null,showTooltip == null || showTooltip.targetActor == null
showTooltip == null,showTooltip == null || showTooltip.targetActor == null
this.originX,this.originY
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
size * 1.75f,size * 1.8f
new NativeCodeGenerator().generate(),"new NativeCodeGenerator().generate(""src"",""bin:../../gdx/bin"",""jni"")"
attributes == null,children == null
attributes == null,children == null
attributes == null,children == null
attributes == null,children == null
titleLabel.getPrefWidth(),titleTable.getPrefWidth()
titleLabel.getPrefWidth(),titleTable.getPrefWidth()
vindex >= Short.MAX_VALUE,vindex > Short.MAX_VALUE
numTouched == 1,numTouched >= 1
min.x < max.x,min.x <= max.x
"""Can't have more than 32767 vertices per batch: "" + maxTriangles","""Can't have more than 32767 vertices per batch: "" + maxVertices"
"""Can't have more than 32767 vertices per batch: "" + maxTriangles","""Can't have more than 32767 vertices per batch: "" + maxVertices"
"getAnimation(id,true)","getAnimation(id,false)"
"selectBoxList.setScrollingDisabled(false,y)","selectBoxList.setScrollingDisabled(true,y)"
success,!success
NSNumber.numberWithLong(val),NSNumber.numberWithLongLong(val)
NSNumber.numberWithLong(val),NSNumber.numberWithLongLong(val)
value.longValue(),value.longLongValue()
value.longValue(),value.longLongValue()
NSString value=(NSString)nsDictionary.get(convertKey(key)); ,Object value=nsDictionary.get(convertKey(key)); 
pool.dealloc(),pool.drain()
pool.dealloc(),pool.drain()
equal=false,equal=true
0.5f,-0.5f
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
floatBuffer.clear(),intBuffer.clear()
"GL20.glGetActiveAttrib(program,index,256,typeTmp)","GL20.glGetActiveAttrib(program,index,256,size,typeTmp)"
"GL20.glGetActiveAttrib(program,index,256,typeTmp)","GL20.glGetActiveAttrib(program,index,256,size,typeTmp)"
"GL20.glGetActiveUniform(program,index,256,typeTmp)","GL20.glGetActiveUniform(program,index,256,size,typeTmp)"
"GL20.glGetActiveUniform(program,index,256,typeTmp)","GL20.glGetActiveUniform(program,index,256,size,typeTmp)"
"GL20.glVertexAttribPointer(indx,size,normalized,stride,((ByteBuffer)buffer).asFloatBuffer())","GL20.glVertexAttribPointer(indx,size,type,normalized,stride,((ByteBuffer)buffer).asFloatBuffer())"
"GL20.glVertexAttribPointer(indx,size,normalized,stride,(FloatBuffer)buffer)","GL20.glVertexAttribPointer(indx,size,type,normalized,stride,(FloatBuffer)buffer)"
"GL15.glGetBufferParameter(target,pname,params)","GL15.glGetBufferParameteriv(target,pname,params)"
"GL15.glGetBufferParameter(target,pname,params)","GL15.glGetBufferParameteriv(target,pname,params)"
"GL11.glGetFloat(pname,params)","GL11.glGetFloatv(pname,params)"
"GL11.glGetFloat(pname,params)","GL11.glGetFloatv(pname,params)"
"EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)","EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"
"EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)","EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"
"GL11.glGetInteger(pname,params)","GL11.glGetIntegerv(pname,params)"
"GL11.glGetInteger(pname,params)","GL11.glGetIntegerv(pname,params)"
"GL20.glGetProgram(program,pname,params)","GL20.glGetProgramiv(program,pname,params)"
"GL20.glGetProgram(program,pname,params)","GL20.glGetProgramiv(program,pname,params)"
"EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)","EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"
"EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)","EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"
"GL20.glGetShader(shader,pname,params)","GL20.glGetShaderiv(shader,pname,params)"
"GL20.glGetShader(shader,pname,params)","GL20.glGetShaderiv(shader,pname,params)"
"GL11.glGetTexParameter(target,pname,params)","GL11.glGetTexParameterfv(target,pname,params)"
"GL11.glGetTexParameter(target,pname,params)","GL11.glGetTexParameterfv(target,pname,params)"
"GL11.glGetTexParameter(target,pname,params)","GL11.glGetTexParameteriv(target,pname,params)"
"GL11.glGetTexParameter(target,pname,params)","GL11.glGetTexParameteriv(target,pname,params)"
"GL20.glGetUniform(program,location,params)","GL20.glGetUniformfv(program,location,params)"
"GL20.glGetUniform(program,location,params)","GL20.glGetUniformfv(program,location,params)"
"GL20.glGetUniform(program,location,params)","GL20.glGetUniformiv(program,location,params)"
"GL20.glGetUniform(program,location,params)","GL20.glGetUniformiv(program,location,params)"
"GL20.glGetVertexAttrib(index,pname,params)","GL20.glGetVertexAttribfv(index,pname,params)"
"GL20.glGetVertexAttrib(index,pname,params)","GL20.glGetVertexAttribfv(index,pname,params)"
"GL20.glGetVertexAttrib(index,pname,params)","GL20.glGetVertexAttribiv(index,pname,params)"
"GL20.glGetVertexAttrib(index,pname,params)","GL20.glGetVertexAttribiv(index,pname,params)"
"GL11.glTexParameter(target,pname,params)","GL11.glTexParameterfv(target,pname,params)"
"GL11.glTexParameter(target,pname,params)","GL11.glTexParameterfv(target,pname,params)"
"GL11.glTexParameter(target,pname,params)","GL11.glTexParameteriv(target,pname,params)"
"GL11.glTexParameter(target,pname,params)","GL11.glTexParameteriv(target,pname,params)"
"GL20.glUniform1(location,v)","GL20.glUniform1fv(location,v)"
"GL20.glUniform1(location,v)","GL20.glUniform1fv(location,v)"
"GL20.glUniform1(location,toFloatBuffer(v,offset,count))","GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"
"GL20.glUniform1(location,toFloatBuffer(v,offset,count))","GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"
"GL20.glUniform1(location,v)","GL20.glUniform1iv(location,v)"
"GL20.glUniform1(location,v)","GL20.glUniform1iv(location,v)"
"GL20.glUniform1(location,toIntBuffer(v,offset,count))","GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"
"GL20.glUniform1(location,toIntBuffer(v,offset,count))","GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"
"GL20.glUniform2(location,v)","GL20.glUniform2fv(location,v)"
"GL20.glUniform2(location,v)","GL20.glUniform2fv(location,v)"
"GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))","GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"
"GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))","GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"
"GL20.glUniform2(location,v)","GL20.glUniform2iv(location,v)"
"GL20.glUniform2(location,v)","GL20.glUniform2iv(location,v)"
"GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))","GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"
"GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))","GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"
"GL20.glUniform3(location,v)","GL20.glUniform3fv(location,v)"
"GL20.glUniform3(location,v)","GL20.glUniform3fv(location,v)"
"GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))","GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"
"GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))","GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"
"GL20.glUniform3(location,v)","GL20.glUniform3iv(location,v)"
"GL20.glUniform3(location,v)","GL20.glUniform3iv(location,v)"
"GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))","GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"
"GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))","GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"
"GL20.glUniform4(location,v)","GL20.glUniform4fv(location,v)"
"GL20.glUniform4(location,v)","GL20.glUniform4fv(location,v)"
"GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))","GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"
"GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))","GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"
"GL20.glUniform4(location,v)","GL20.glUniform4iv(location,v)"
"GL20.glUniform4(location,v)","GL20.glUniform4iv(location,v)"
"GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))","GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"
"GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))","GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"
"GL20.glUniformMatrix2(location,transpose,value)","GL20.glUniformMatrix2fv(location,transpose,value)"
"GL20.glUniformMatrix2(location,transpose,value)","GL20.glUniformMatrix2fv(location,transpose,value)"
"GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))","GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"
"GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))","GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"
"GL20.glUniformMatrix3(location,transpose,value)","GL20.glUniformMatrix3fv(location,transpose,value)"
"GL20.glUniformMatrix3(location,transpose,value)","GL20.glUniformMatrix3fv(location,transpose,value)"
"GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))","GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"
"GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))","GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"
"GL20.glUniformMatrix4(location,transpose,value)","GL20.glUniformMatrix4fv(location,transpose,value)"
"GL20.glUniformMatrix4(location,transpose,value)","GL20.glUniformMatrix4fv(location,transpose,value)"
"GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))","GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"
"GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))","GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"
super.beginPass(n),super.endPass(n)
gl.glDeleteBuffer(depthStencilPackedBufferHandle),gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
gl.glDeleteBuffer(depthStencilPackedBufferHandle),gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
gl.glDeleteBuffer(depthStencilPackedBufferHandle),gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
gl.glDeleteBuffer(depthStencilPackedBufferHandle),gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
pixmap.getHeight() - yHotspot - 4,pixmap.getHeight() - yHotspot - 1
new Color(0x696969ff),new Color(0xbfbfbfff)
r1,!r1
r1,!r1
"jniGetLocalAnchorA(addr,tmp)","jniGetLocalAnchorB(addr,tmp)"
"jniGetLocalAnchorA(addr,tmp)","jniGetLocalAnchorB(addr,tmp)"
"jniGetLocalAnchorA(addr,tmp)","jniGetLocalAxisA(addr,tmp)"
"jniGetLocalAnchorA(addr,tmp)","jniGetLocalAxisA(addr,tmp)"
yz*=ly,yx*=ly
lights.shadowMap != null,lights != null && lights.shadowMap != null
18,2
18,2
"Color.rgb888ToColor(color,colorInt)","Color.rgba8888ToColor(color,colorInt)"
"Color.rgb888ToColor(color,colorInt)","Color.rgba8888ToColor(color,colorInt)"
26,24
"font.drawMultiLine(batch,results,20,300)","font.draw(batch,results,20,300)"
"font.drawMultiLine(batch,results,20,300)","font.draw(batch,results,20,300)"
"isTouched(0.75f,1)","isTouched(0.5f,1)"
Gdx.input.getX(),Gdx.input.getX(i)
child.getParent(),p.getParent()
child.getParent(),p.getParent()
"isTouched(0.75f,1)","isTouched(0.5f,1)"
Gdx.input.getX(),Gdx.input.getX(i)
id == null,partId == null
id == null,partId == null
"new BufferedImage(region.height,region.width,page.getType())","new BufferedImage(region.width,region.height,page.getType())"
"new BufferedImage(region.height,region.width,page.getType())","new BufferedImage(region.width,region.height,page.getType())"
NUM_TOUCHES=40,NUM_TOUCHES=20
packFileName.substring(packFileName.length() - settings.atlasExtension.length()),"packFileName.substring(0,packFileName.length() - settings.atlasExtension.length())"
UIPasteboard.getGeneral(),UIPasteboard.getGeneralPasteboard()
UIPasteboard.getGeneral(),UIPasteboard.getGeneralPasteboard()
UIPasteboard.getGeneral(),UIPasteboard.getGeneralPasteboard()
UIPasteboard.getGeneral(),UIPasteboard.getGeneralPasteboard()
TimeUtils.nanoTime(),TimeUtils.millis()
TimeUtils.nanoTime(),TimeUtils.millis()
TimeUtils.nanoTime(),TimeUtils.millis()
TimeUtils.nanoTime(),TimeUtils.millis()
17,25
17,25
VertexAttribute.Color(),VertexAttribute.ColorPacked()
VertexAttribute.Color(),VertexAttribute.ColorPacked()
VertexAttribute.Color(),VertexAttribute.ColorPacked()
VertexAttribute.Color(),VertexAttribute.ColorPacked()
knownType != null,typeName != null
knownType != null,typeName != null
"localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)","localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)"
"localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)","localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)"
doubleValue == 0,doubleValue != 0
longValue == 0,longValue != 0
new BulletTestCollection(),new Box2DTestCollection()
"Foundation.NSLog(""[info] "" + tag + "": ""+ message)","Foundation.log(""[info] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[info] "" + tag + "": ""+ message)","Foundation.log(""[info] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[info] "" + tag + "": ""+ message)","Foundation.log(""[info] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[info] "" + tag + "": ""+ message)","Foundation.log(""[info] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[error] "" + tag + "": ""+ message)","Foundation.log(""[error] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[error] "" + tag + "": ""+ message)","Foundation.log(""[error] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[error] "" + tag + "": ""+ message)","Foundation.log(""[error] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[error] "" + tag + "": ""+ message)","Foundation.log(""[error] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[debug] "" + tag + "": ""+ message)","Foundation.log(""[debug] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[debug] "" + tag + "": ""+ message)","Foundation.log(""[debug] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[error] "" + tag + "": ""+ message)","Foundation.log(""[error] "" + tag + "": ""+ message)"
"Foundation.NSLog(""[error] "" + tag + "": ""+ message)","Foundation.log(""[error] "" + tag + "": ""+ message)"
minSize(new Fixed(width)),"minSize(new Fixed(width),new Fixed(height))"
prefSize(new Fixed(width)),"prefSize(new Fixed(width),new Fixed(height))"
maxSize(new Fixed(width)),"maxSize(new Fixed(width),new Fixed(height))"
minSize(new Fixed(width)),"minSize(new Fixed(width),new Fixed(height))"
prefSize(new Fixed(width)),"prefSize(new Fixed(width),new Fixed(height))"
maxSize(new Fixed(width)),"maxSize(new Fixed(width),new Fixed(height))"
handle.parent().exists(),!handle.parent().exists()
connection.setFollowRedirects(httpRequest.getFollowRedirects()),HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
connection.setFollowRedirects(httpRequest.getFollowRedirects()),HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
connection.setFollowRedirects(httpRequest.getFollowRedirects()),HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
connection.setFollowRedirects(httpRequest.getFollowRedirects()),HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
telegram.getTimestamp() < currentTime,telegram.getTimestamp() > currentTime
new FileWrapper(token).exists(),new FileWrapper(token).exists() || new FileWrapper(token).mkdirs()
MathUtils.PI * (this.width * this.height) / 2,MathUtils.PI * (this.width * this.height) / 4
MathUtils.PI * (this.width * this.height) / 2,MathUtils.PI * (this.width * this.height) / 4
private Actor actor; ,private T actor; 
Actor actor,T actor
Actor actor,T actor
row1 * layerTileHeight,row2 * layerTileHeight
row1 * layerTileHeight,row2 * layerTileHeight
atlasFile.path(),atlasFile.name()
atlasFile.path(),atlasFile.name()
isSdkLocationValid(sdkLocation),!isSdkLocationValid(sdkLocation)
c.getName(),c.getSimpleName()
c.getName(),c.getSimpleName()
chooser.showSaveDialog(null),chooser.showOpenDialog(null)
chooser.showSaveDialog(null),chooser.showOpenDialog(null)
return areaHeight; ,return areaWidth; 
"world.add(""capsule"",5f,2.125f,5f)","world.add(""capsule"",5f,3f,5f)"
idx[j] >= 0,idx[j] > 0
collisionPoints.get(2),collisionPoints.get(0)
collisionPoints.get(2),collisionPoints.get(0)
new LwjglPreferences(name),"new LwjglPreferences(name,"".prefs/"")"
new LwjglPreferences(name),"new LwjglPreferences(name,"".prefs/"")"
new LwjglPreferences(name),"new LwjglPreferences(name,"".prefs/"")"
setColor(color),setColors(color)
setColor(color),setColors(color)
setColor(color),setColors(color)
setColor(color),setColors(color)
cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor)),cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))
cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor)),cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor)),titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor)),titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
cache5.setColor(red),cache5.setColors(red)
cache5.setColor(red),cache5.setColors(red)
cacheScaled5.setColor(red),cacheScaled5.setColors(red)
cacheScaled5.setColor(red),cacheScaled5.setColors(red)
realPointerIndex > AndroidInput.NUM_TOUCHES,realPointerIndex >= AndroidInput.NUM_TOUCHES
realPointerIndex > AndroidInput.NUM_TOUCHES,realPointerIndex >= AndroidInput.NUM_TOUCHES
realPointerIndex > AndroidInput.NUM_TOUCHES,realPointerIndex >= AndroidInput.NUM_TOUCHES
primitiveType != GL10.GL_POINTS,primitiveType == GL10.GL_POINTS
primitiveType != GL10.GL_POINTS,primitiveType == GL10.GL_POINTS
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
sizeNeeded >= items.length,sizeNeeded > items.length
(a & 0xe0) == 0xb0,(a & 0xe0) == 0xc0
(a & 0xe0) == 0xb0,(a & 0xe0) == 0xc0
1,-1
1,-1
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
Exception exception,Throwable exception
objects == null,object == null
objects == null,object == null
node.actor.getY() <= high,"node.actor.getY() <= high && !selectedNodes.contains(node,true)"
worldVertices.length < localVertices.length,worldVertices.length != localVertices.length
0 - originY,0 - originX
0 - originY,0 - originX
width - originY,width - originX
width - originY,width - originX
width - originY,width - originX
width - originY,width - originX
0 - originY,0 - originX
0 - originY,0 - originX
new MultitouchTest(),new BulletTestCollection()
ppcY / 2.54f,ppiY / 2.54f
ppcY / 2.54f,ppiY / 2.54f
tiled != null,drawable != null
tiled != null,drawable != null
tiled != null,drawable != null
tiled != null,drawable != null
targetActor.addCaptureListener(listener),actor.addCaptureListener(listener)
targetActor.addCaptureListener(listener),actor.addCaptureListener(listener)
targetActor.addListener(listener),actor.addListener(listener)
targetActor.addListener(listener),actor.addListener(listener)
targetActor.addCaptureListener(listener),actor.addCaptureListener(listener)
targetActor.addCaptureListener(listener),actor.addCaptureListener(listener)
targetActor.addListener(listener),actor.addListener(listener)
targetActor.addListener(listener),actor.addListener(listener)
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
capacity > 1 << 30,initialCapacity > 1 << 30
i++,j++
return true; ,return false; 
"sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     int n1=o1.width > o1.height ? o1.width : o1.height;     int n2=o2.width > o2.height ? o2.width : o2.height;     return n2 - n1;   } } ,0,inputRects.size)","sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     int n1=o1.width > o1.height ? o1.width : o1.height;     int n2=o2.width > o2.height ? o2.width : o2.height;     return n2 - n1;   } } )"
"sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } ,0,inputRects.size)","sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } )"
values == null,value == null
values == null,value == null
values[i] == values,values[i] == value
values[i] == values,values[i] == value
values.equals(values[i]),value.equals(values[i])
values.equals(values[i]),value.equals(values[i])
typeTmp.get(0),typeTmp.get(1)
len > bits.length,len >= bits.length
Bullet.init(),BaseBulletTest.init()
Bullet.init(),BaseBulletTest.init()
model.getBoundingBox(bbox),model.calculateBoundingBox(bbox)
model.getBoundingBox(bbox),model.calculateBoundingBox(bbox)
new SpriteBatch(10000),new SpriteBatch(5460)
debug=false,debug=true
"loadObj(file,false)",loadModel(file)
j++,k++
currentWorldTransform=renderable.modelTransform,currentModelTransform=renderable.modelTransform
currentWorldTransform=renderable.modelTransform,currentModelTransform=renderable.modelTransform
VertexAttribute.Color(),VertexAttribute.ColorUnpacked()
VertexAttribute.Color(),VertexAttribute.ColorUnpacked()
type.getSimpleName(),type.getName()
type.getSimpleName(),type.getName()
OrderedMap.class,HashMap.class
OrderedMap.class,HashMap.class
type == VertexDataType.VertexBufferObject,type == VertexDataType.VertexBufferObject || Mesh.forceVBO
type == VertexDataType.VertexBufferObject,type == VertexDataType.VertexBufferObject || Mesh.forceVBO
96.0 / 160,96.0f / 160
text.equals(((TextButton)button).getText()),text.contentEquals(((TextButton)button).getText())
text.equals(((TextButton)button).getText()),text.contentEquals(((TextButton)button).getText())
intbuf.get(),intbuf.get(0)
0,1
"GL.glBindTextureEXT(target,texture)","GL.glBindTexture(target,texture)"
"GL.glBindTextureEXT(target,texture)","GL.glBindTexture(target,texture)"
"GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)","GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"
"GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)","GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"
"GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)","GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"
"GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)","GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"
"GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))","GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"
"GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))","GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"
"GL.glDrawArraysEXT(mode,first,count)","GL.glDrawArrays(mode,first,count)"
"GL.glDrawArraysEXT(mode,first,count)","GL.glDrawArrays(mode,first,count)"
"GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))","GL.glGenTextures(n,textures,Memory.getPosition(textures))"
"GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))","GL.glGenTextures(n,textures,Memory.getPosition(textures))"
"GL.glPolygonOffsetEXT(factor,units)","GL.glPolygonOffset(factor,units)"
"GL.glPolygonOffsetEXT(factor,units)","GL.glPolygonOffset(factor,units)"
"GL.glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))","GL.glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))"
"GL.glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))","GL.glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))"
"GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)","GL.glGenTextures(n,toBuffer(textures,offset),0)"
"GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)","GL.glGenTextures(n,toBuffer(textures,offset),0)"
y / vz,z / vz
y / vz,z / vz
0,16
c * b,c * c
c * b,c * c
c * b,c * c
c * b,c * c
"element.getChildByName(""properties"")","tileElement.getChildByName(""properties"")"
"element.getChildByName(""properties"")","tileElement.getChildByName(""properties"")"
"Float.parseFloat(position.getChildByName(""Y"").getText())","-Float.parseFloat(position.getChildByName(""Y"").getText())"
"Float.parseFloat(position.getChildByName(""Y"").getText())","-Float.parseFloat(position.getChildByName(""Y"").getText())"
"renderer.filledRect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)","renderer.rect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)"
"renderer.filledRect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)","renderer.rect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)"
new AndroidFiles(this.getService().getAssets()),"new AndroidFiles(this.getService().getAssets(),this.getService().getFilesDir().getAbsolutePath())"
time.put(delta),time.put(current)
time.put(delta),time.put(current)
"file.name().contains("".etc1"")","file.name().endsWith("".etc1"")"
"file.name().contains("".etc1"")","file.name().endsWith("".etc1"")"
"System.arraycopy(value,0,value,length,value.length)","System.arraycopy(value,0,chars,length,value.length)"
"unsafeBuffers.contains(buffer,true)","!unsafeBuffers.contains(buffer,true)"
cam.near=0.1f,cam.near=1f
4 * (float)Math.sqrt(radius),6 * (float)Math.cbrt(radius)
touchEventPool.free(touchEvents),touchEventPool.freeAll(touchEvents)
touchEventPool.free(touchEvents),touchEventPool.freeAll(touchEvents)
scrollbarsOnTop && scrollX,!fadeScrollBars && scrollbarsOnTop && scrollX
2,18
min1 < min2,min1 <= min2
min1 < min2,min1 <= min2
2,18
"transform.setToRotation(new Vector3(1,0,1).nor(),angle)","transform.setToRotation(new Vector3(1,0,1).nor(),rotAngle)"
region.getRegionWidth(),region.getRegionHeight()
region.getRegionWidth(),region.getRegionHeight()
position == buffer.length,count == 0 && position == buffer.length
buffers[offset],buffers[i]
steps < 0,steps <= 0
-region.getRegionHeight(),region.getRegionHeight()
"inputProcessor.touchDown(event.x,event.y,event.pointer,Buttons.LEFT)","inputProcessor.touchDragged(event.x,event.y,event.pointer)"
"this(false,16,arrayType); ","this(true,16,arrayType); "
super.setV(u),super.setV(v)
24,25
return localVertices; ,return worldVertices; 
Gdx.files.internal(fileName).nameWithoutExtension(),Gdx.files.internal(fileName).pathWithoutExtension()
Gdx.files.internal(fileName).nameWithoutExtension(),Gdx.files.internal(fileName).pathWithoutExtension()
Gdx.files.internal(fileName).nameWithoutExtension(),Gdx.files.internal(fileName).pathWithoutExtension()
Gdx.files.internal(fileName).nameWithoutExtension(),Gdx.files.internal(fileName).pathWithoutExtension()
2,1
region != null,region == null
i=0,i=2
9,41
private String text; ,private CharSequence text; 
String text,CharSequence text
String text,CharSequence text
String text,CharSequence text
String text,CharSequence text
String text,CharSequence text
String text,CharSequence text
public String getText(){   return text; } ,public CharSequence getText(){   return text; } 
BufferUtils.newByteBuffer(fileSize),BufferUtils.newUnsafeByteBuffer(fileSize)
BufferUtils.newByteBuffer(fileSize),BufferUtils.newUnsafeByteBuffer(fileSize)
BufferUtils.freeMemory(bytebuffer),BufferUtils.disposeUnsafeByteBuffer(bytebuffer)
BufferUtils.freeMemory(bytebuffer),BufferUtils.disposeUnsafeByteBuffer(bytebuffer)
FileNotFoundException ex,Exception ex
FileNotFoundException ex,Exception ex
"cppFile.writeString(buffer.toString(),false)","cppFile.writeString(buffer.toString(),false,""UTF-8"")"
0,1
(xmin > x && xmin < x + width) || (xmax > x && xmax < x + width),(xmin > x && xmin < x + width) && (xmax > x && xmax < x + width)
"MD5Loader.loadModel(Gdx.files.internal(""data/zfat.md5mesh"").read(),false)","MD5Loader.loadModel(Gdx.files.internal(""data/zfat.md5mesh"").read(),true)"
preloadQueue.size == 0,preloadQueue.size == 0 || tasks.size() == 0
preloadQueue.size == 0,preloadQueue.size == 0 || tasks.size() == 0
buffer.put(indices),"buffer.put(indices,offset,count)"
buffer.put(indices),"buffer.put(indices,offset,count)"
scaleX == 0,scaleX == 1
handles[i],handles[count]
handles[i],handles[count]
scaleX == 0,scaleX == 1
frustum.update(combined),frustum.update(invProjectionView)
1,17
1,17
17,25
FloatBuffer target,ShortBuffer target
contact.GetWorldManifold(),contact.getWorldManifold()
contact.GetWorldManifold(),contact.getWorldManifold()
contact.GetWorldManifold(),contact.getWorldManifold()
contact.GetWorldManifold(),contact.getWorldManifold()
"new Texture(file,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)","new Texture(file,format,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)"
17,1
value | 0xff,value & 0xff
Exception e,Throwable e
IOException e,Throwable e
0,1
"pixmap.drawCircle(x,y,radius,color)","pixmap.fillCircle(x,y,radius,color)"
"pixmap.drawCircle(x,y,radius,color)","pixmap.fillCircle(x,y,radius,color)"
"public static AnimationAction $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } ","public static ScaleTo $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } "
"new GdxRuntimeException(""Failure reading Vorbis."")","new GdxRuntimeException(""Failure reading Vorbis."",e)"
"new GdxRuntimeException(""Failed to read Vorbis."")","new GdxRuntimeException(""Failed to read Vorbis."",e)"
"new GdxRuntimeException(""Error during Vorbis decoding."")","new GdxRuntimeException(""Error during Vorbis decoding."",e)"
new GameOver(Gdx.app),new MainMenu(Gdx.app)
2,0
BIG_ENOUGH_INT + 0.5,BIG_ENOUGH_INT + 0.99999999
"MD5Loader.loadModel(Gdx.files.internal(""data/zfat.md5mesh"").read())","MD5Loader.loadModel(Gdx.files.internal(""data/zfat.md5mesh"").read(),false)"
"new MD5Renderer(model,true)","new MD5Renderer(model,false,true)"
localX2 * cos,localY2 * cos
localX2 * cos,localY2 * cos
LAYERS=10,LAYERS=5
mesh.getNumVertices() / 2,mesh.getNumVertices() / 4
offset * 12,offset * 6
Exception e,Throwable e
Exception e,Throwable e
isDirect=true,isDirect=false
isDirect=false,isDirect=true
xAmount > 0,xAmount != 0
yAmount > 0,yAmount != 0
items[16],items[15]
items[17],items[16]
items[18],items[17]
items[19],items[18]
items[20],items[19]
items[21],items[20]
items[22],items[21]
items[23],items[22]
items[24],items[23]
items[25],items[24]
items[26],items[25]
items[27],items[26]
items[28],items[27]
items[29],items[28]
items[30],items[29]
items[31],items[30]
items[32],items[31]
items[33],items[32]
200000 * 4 * 4,20000 * 4 * 4
200000 * 4 * 3,20000 * 4 * 3
200000 * 4 * 4,20000 * 4 * 4
200000 * 4 * 4,20000 * 4 * 4
camera.setMatrices(app.getGraphics()),camera.setMatrices()
new Vector2(),"new Vector2(1,0)"
"app.getAudio().newAudioRecoder(22050,true)","app.getAudio().newAudioRecoder(44100,true)"
i < 20,i < 100
"app.getGraphics().newFont(app.getFiles().getInternalFileHandle(""data/arial.ttf""),12,FontStyle.Plain,true)","app.getGraphics().newFont(app.getFiles().getInternalFileHandle(""data/arial.ttf""),11,FontStyle.Plain,true)"
minor < 5,major == 1 && minor < 5
getUrl(),getOriginUrl()
getUrl(),getOriginUrl()
new ClobTypeHandler(),new StringTypeHandler()
new ClobTypeHandler(),new StringTypeHandler()
9,1
9,1
"primitiveToWrappers.put(wrapperType,primitiveType)","wrappersToPrimitives.put(wrapperType,primitiveType)"
"primitiveToWrappers.put(wrapperType,primitiveType)","wrappersToPrimitives.put(wrapperType,primitiveType)"
"primitiveToWrappers.put(wrapperType,primitiveType)","wrappersToPrimitives.put(wrapperType,primitiveType)"
"primitiveToWrappers.put(wrapperType,primitiveType)","wrappersToPrimitives.put(wrapperType,primitiveType)"
when(rs.wasNull()).thenReturn(false),when(rs.wasNull()).thenReturn(true)
when(rs.wasNull()).thenReturn(false),when(rs.wasNull()).thenReturn(true)
"ps.setString(i,parameter)","ps.setNString(i,parameter)"
"ps.setString(i,parameter)","ps.setNString(i,parameter)"
rs.getString(columnName),rs.getNString(columnName)
rs.getString(columnName),rs.getNString(columnName)
rs.getString(columnIndex),rs.getNString(columnIndex)
rs.getString(columnIndex),rs.getNString(columnIndex)
cs.getString(columnIndex),cs.getNString(columnIndex)
cs.getString(columnIndex),cs.getNString(columnIndex)
"namespace.equals("""")","namespace == null || namespace.equals("""")"
18,2
"log.debug(""Unexpected exception on closing transaction.  Cause: "" + e)","log.warn(""Unexpected exception on closing transaction.  Cause: "" + e)"
"log.debug(""Unexpected exception on closing transaction.  Cause: "" + e)","log.warn(""Unexpected exception on closing transaction.  Cause: "" + e)"
autoCommit != conn.getAutoCommit(),autoCommit != null && autoCommit != conn.getAutoCommit()
!type.isAnonymousClass() && !type.isInterface(),!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()
this.configuration.getMappedStatement(id),"this.configuration.getMappedStatement(id,false)"
metaData.getColumnName(1),metaData.getColumnLabel(1)
metaData.getColumnName(1),metaData.getColumnLabel(1)
trimmedLine.endsWith(delimiter),trimmedLine.contains(delimiter)
trimmedLine.endsWith(delimiter),trimmedLine.contains(delimiter)
"new RuntimeException(""Missing type parameter."")","new TypeException(""TypeHandler '"" + getClass() + ""' extends TypeReference but misses the type parameter. ""+ ""Remove the extension or add a type parameter to it."")"
cs.getMetaData(),rs.getMetaData()
cs.getMetaData(),rs.getMetaData()
"Map<Integer,Object>","Map<String,Object>"
"Map<Integer,Object>","Map<String,Object>"
"Map<Integer,Object>","Map<String,Object>"
"Map<Integer,Object>","Map<String,Object>"
parameter.toString(),parameter.name()
parameter.toString(),parameter.name()
parameter.toString(),parameter.name()
parameter.toString(),parameter.name()
flushStatements(false),flushStatements(true)
(InvocationTargetException)wrapped,(InvocationTargetException)unwrapped
(UndeclaredThrowableException)wrapped,(UndeclaredThrowableException)unwrapped
"new RequestManager(testTimer,300)","new RequestManager(testTimer,3000)"
"new RequestManager(testTimer,300)","new RequestManager(testTimer,3000)"
args.length == 0,args == null || args.length == 0
args.length == 0,args == null || args.length == 0
2,10
1,9
2,10
2,10
spanEvent.getNextSpanId() == -1,spanEvent.getNextSpanId() != -1
tJvmGcDetailed.getJvmGcNewCount(),tJvmGcDetailed.getJvmGcNewTime()
tJvmGcDetailed.getJvmGcNewCount(),tJvmGcDetailed.getJvmGcNewTime()
JavaAssistUtils.getParameterType(parameterTypes),JavaAssistUtils.toPinpointParameterType(parameterTypes)
JavaAssistUtils.getParameterType(parameterTypes),JavaAssistUtils.toPinpointParameterType(parameterTypes)
this.uncollectedPointCreater,this.uncollectedPointCreator
uncollectedPointCreater.createUnCollectedPoint(timestamp),uncollectedPointCreator.createUnCollectedPoint(timestamp)
uncollectedPointCreater.createUnCollectedPoint(timestamp),uncollectedPointCreator.createUnCollectedPoint(timestamp)
asyncContext.continueAsyncTraceObject(),asyncContext.currentAsyncTraceObject()
asyncContext.continueAsyncTraceObject(),asyncContext.currentAsyncTraceObject()
"writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)","writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)"
"writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)","writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)"
"addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)","addListenerMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)"
"addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)","addListenerMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)"
buffer.readableBytes() < 4,buffer.readableBytes() < 8
buffer.readableBytes() < 4,buffer.readableBytes() < 8
public final TFAgentStatMappter tFAgentStatMappter=new TFAgentStatMappter(); ,public final TFAgentStatMapper tFAgentStatMapper=new TFAgentStatMapper(); 
tFAgentStatMappter.map(agentStatBo),tFAgentStatMapper.map(agentStatBo)
tFAgentStatMappter.map(agentStatBo),tFAgentStatMapper.map(agentStatBo)
"new NodeHistogram(application,range)","new NodeHistogram(application,range,responseTimes)"
hash == 0,hash != 0
"this(host,port,threadName,queueSize,timeout,SEND_BUFFER_SIZE,DEFAULT_BUFFER_SIZE); ","this(host,port,threadName,queueSize,timeout,sendBufferSize,DEFAULT_BUFFER_SIZE); "
2,10
0,8
2,10
0,8
put(v),putBytes(v)
put(v),putBytes(v)
put(v),putBytes(v)
put(v),putBytes(v)
DatabaseDescriptor.getListenAddress().getHostName(),DatabaseDescriptor.getListenAddress().getHostAddress()
DatabaseDescriptor.getListenAddress().getHostName(),DatabaseDescriptor.getListenAddress().getHostAddress()
profileCluster.clear(),worker.clear()
profileCluster.clear(),worker.clear()
"new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService)","new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService)"
"logger.debug(""defineClass pluginClass:{} cl:{}"",className,classLoader)","logger.info(""defineClass pluginClass:{} cl:{}"",className,classLoader)"
"logger.debug(""defineClass pluginClass:{} cl:{}"",className,classLoader)","logger.info(""defineClass pluginClass:{} cl:{}"",className,classLoader)"
"new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService)","new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService)"
"logger.debug(""defineClass pluginClass:{} cl:{}"",className,classLoader)","logger.info(""defineClass pluginClass:{} cl:{}"",className,classLoader)"
"logger.debug(""defineClass pluginClass:{} cl:{}"",className,classLoader)","logger.info(""defineClass pluginClass:{} cl:{}"",className,classLoader)"
logPageUrl != null || logPageUrl.length() > 0,logPageUrl != null && logPageUrl.length() > 0
getRequestMethod == null,getRequestMethod != null
getRequestMethod == null,getRequestMethod != null
userGroupMember.getMemberId(),userGroupMember.getUserGroupId()
userGroupMember.getMemberId(),userGroupMember.getUserGroupId()
userGroupMember.getMemberId(),userGroupMember.getUserGroupId()
userGroupMember.getMemberId(),userGroupMember.getUserGroupId()
"MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)","MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)"
"MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)","MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)"
private final DynamicTrnasformerRegistry dynamicTransformerRegistry; ,private final DynamicTransformerRegistry dynamicTransformerRegistry; 
"public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info(""added retransformer classLoader: {}, class: {}, registry size: {}"",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info(""added dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException(""Transformer already exists. classLoader: "" + classLoader + "", target: ""+ targetClassName+ "", transformer: ""+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info(""removed dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } ","public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info(""added retransformer classLoader: {}, class: {}, registry size: {}"",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info(""added dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException(""Transformer already exists. classLoader: "" + classLoader + "", target: ""+ targetClassName+ "", transformer: ""+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info(""removed dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } "
private final DynamicTrnasformerRegistry dynamicTransformerRegistry; ,private final DynamicTransformerRegistry dynamicTransformerRegistry; 
"public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info(""added retransformer classLoader: {}, class: {}, registry size: {}"",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info(""added dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException(""Transformer already exists. classLoader: "" + classLoader + "", target: ""+ targetClassName+ "", transformer: ""+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info(""removed dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } ","public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info(""added retransformer classLoader: {}, class: {}, registry size: {}"",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info(""added dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException(""Transformer already exists. classLoader: "" + classLoader + "", target: ""+ targetClassName+ "", transformer: ""+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info(""removed dynamic transformer classLoader: {}, className: {}, registry size: {}"",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } "
interceptorParamTypes.length - 1,interceptorParamTypes.length - 3
"addGroupedInterceptor(filter,interceptorClassName,group,executionPolicy)","addGroupedInterceptor(filter,interceptorClassName,null,group,executionPolicy)"
"addGroupedInterceptor(filter,interceptorClassName,group,executionPolicy)","addGroupedInterceptor(filter,interceptorClassName,null,group,executionPolicy)"
"invoke(agentInfo,payload,DEFUALT_FUTURE_TIMEOUT)","invoke(agentInfo,payload,DEFAULT_FUTURE_TIMEOUT)"
"invoke(agentInfoList,payload,DEFUALT_FUTURE_TIMEOUT)","invoke(agentInfoList,payload,DEFAULT_FUTURE_TIMEOUT)"
"Assert.assertEquals(select.size(),1)","Assert.assertEquals(select.size(),0)"
"Assert.assertEquals(select.size(),1)","Assert.assertEquals(select.size(),0)"
type=500,type=200
type=200,type=100
"new IllegalArgumentException(""negative offset:"" + offset)","new IndexOutOfBoundsException(""negative offset:"" + offset)"
Integer.valueOf(tokens[3]),Integer.parseInt(tokens[3])
Integer.valueOf(tokens[3]),Integer.parseInt(tokens[3])
Integer.valueOf(tokens[3]),Integer.parseInt(tokens[3])
Integer.valueOf(tokens[3]),Integer.parseInt(tokens[3])
DEFAULT_MAX=1024,DEFAULT_MAX=4096
newId > max,newId >= max
newId > max,newId >= max
DEFAULT_MAX=1024,DEFAULT_MAX=4096
newId > max,newId >= max
newId > max,newId >= max
!traceIds.isEmpty(),traceIds.isEmpty()
findClass,!findClass
file.flush(),file.flushAndForce()
file.flush(),file.flushAndForce()
cache.flush(),cache.flushAndForce()
cache.flush(),cache.flushAndForce()
"new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null,null)","new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null)"
"Integer.getInteger(""org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor"",8)","Integer.getInteger(""org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor"",10)"
Primitive.longObjectMap(32),Primitive.longObjectMap(8)
"executeCommand(""EXPLAIN OPTIONAL MATCH (n) RETURN n;"",""DbHits"",""No data returned"")","executeCommand(""EXPLAIN OPTIONAL MATCH (n) RETURN n;"",""No data returned"")"
"executeCommand(""EXPLAIN OPTIONAL MATCH (n) RETURN n;"",""DbHits"",""No data returned"")","executeCommand(""EXPLAIN OPTIONAL MATCH (n) RETURN n;"",""No data returned"")"
(Node)container,(Relationship)container
1,33
1,33
newEmbeddedDatabaseBuilder(path),newHighlyAvailableDatabaseBuilder(path)
newEmbeddedDatabaseBuilder(path),newHighlyAvailableDatabaseBuilder(path)
cursor.retry(),cursor.shouldRetry()
cursor.retry(),cursor.shouldRetry()
newEmbeddedDatabaseBuilder(path),newHighlyAvailableDatabaseBuilder(path)
newEmbeddedDatabaseBuilder(path),newHighlyAvailableDatabaseBuilder(path)
new BranchedDataException(e),"new BranchedDataException(""Unable to perform a mandatory sanity check due to an IO error."",e)"
new BranchedDataException(e),"new BranchedDataException(""Unable to perform a mandatory sanity check due to an IO error."",e)"
(Node)container,(Relationship)container
version > 0,version > 1
version > 0,version > 1
version > 0,version > 1
o instanceof Xid,o instanceof XidImpl
"relationship(18,c,""KNOWS"",d)","relationship(19,c,""KNOWS"",d)"
ClusterLeaveReelectionListener.class,HeartbeatReelectionListener.class
1,9
new RagManager(tm),new RagManager()
new RagManager(tm),new RagManager()
o instanceof Xid,o instanceof XidImpl
"scheduler.scheduleRecurring(indexPopulation,countInvocationsJob,1,MILLISECONDS)","scheduler.scheduleRecurring(indexPopulation,countInvocationsJob,2,MILLISECONDS)"
"getClass().getSimpleName() + ""[populator:"" + populator+ "", descriptor:""+ descriptor+ ""]""","getClass().getSimpleName() + ""[populator:"" + populator+ "", descriptor:""+ indexUserDescription+ ""]"""
new WebApplicationException(serverError(e)),"new WebApplicationException(e,serverError(e))"
"new ClusterConfiguration(initialConfig.getName(),logging.getMessagesLog(ClusterConfiguration.class),initialConfig.getMemberURIs())","new ClusterConfiguration(initialConfig.getName(),initialConfig.getMemberURIs())"
"new ClusterConfiguration(name,logging.getMessagesLog(ClusterConfiguration.class),Collections.singleton(boundAt))","new ClusterConfiguration(name,Collections.singleton(boundAt))"
"new ClusterConfiguration(""clusterName"",StringLogger.DEV_NULL,initialHosts)","new ClusterConfiguration(""clusterName"",initialHosts)"
"new ClusterConfiguration(""whatever"",StringLogger.DEV_NULL,""cluster://1"",""cluster://2"")","new ClusterConfiguration(""whatever"",""cluster://1"",""cluster://2"")"
"new ClusterConfiguration(""whatever"",StringLogger.DEV_NULL,""cluster://1"",""cluster://2"")","new ClusterConfiguration(""whatever"",""cluster://1"",""cluster://2"")"
new WebApplicationException(serverError(e)),"new WebApplicationException(e,serverError(e))"
"doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString(),any(Exception.class))",doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString())
"SCHEMA(35,true)","SCHEMA(35,false)"
Setting<Long>,GraphDatabaseSetting<Long>
Setting<Long>,GraphDatabaseSetting<Long>
0,1
"serializer.statementResult(mockExecutionResult(map(""node"",node[0],""rel"",rel[0],""path"",path,""map"",map(""n1"",node[1],""r1"",rel[1]))),ResultDataContent.rest)","serializer.statementResult(mockExecutionResult(map(""node"",node[0],""rel"",rel[0],""path"",path,""map"",map(""n1"",node[1],""r1"",rel[1]))),false,ResultDataContent.rest)"
failure.getCause(),cause.getCause()
failure.getCause(),cause.getCause()
inner.deletedNodes(),inner.deletedRelationships()
inner.deletedNodes(),inner.deletedRelationships()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(cypher).toString(),engine.execute(cypher).dumpToString()
engine.execute(cypher).toString(),engine.execute(cypher).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
engine.execute(query).toString(),engine.execute(query).dumpToString()
1,33
1,33
i < 10000,i < 100
i < 100,i < 10000
graphStack.push(tx),graphStack.push(lockingTx)
"targetDirectory.directory(""unwritable"")","targetDirectory.file(""unwritable"")"
"targetDirectory.directory(""unwritable"")","targetDirectory.file(""unwritable"")"
latch.countDownFirst(),latch.awaitFirst()
latch.countDownFirst(),latch.awaitFirst()
Calendar.getInstance(),Calendar.getInstance(timeIsGivenInThisTimeZone)
PROTOCOL_VERSION=1,PROTOCOL_VERSION=2
config.get(CONFIG_KEY_READ_TIMEOUT),config.get(CONFIG_KEY_LOCK_READ_TIMEOUT)
new Neo4jGraph(database.graph),"new Neo4jGraph(database.graph,false)"
!template.contains(PATH_AUTO_NODE_INDEX) && !template.contains(PATH_AUTO_RELATIONSHIP_INDEX),"!template.contains(PATH_AUTO_NODE_INDEX) && !template.contains(PATH_AUTO_RELATIONSHIP_INDEX) && !template.contains(""_auto_"")"
"assertEquals(1,functionalTestHelper.removeAnyAutoIndex(map).size())","assertEquals(""Was: "" + map + "", no-auto-index:""+ functionalTestHelper.removeAnyAutoIndex(map),1,functionalTestHelper.removeAnyAutoIndex(map).size())"
inUseByte != Record.IN_USE.byteValue(),inUseByte != Record.IN_USE.byteValue() && inUseByte != Record.NOT_IN_USE.byteValue()
prev.getPrevProp(),prev.getNextProp()
prev.getPrevProp(),prev.getNextProp()
record.getLength() > store.getRecordSize() - store.getRecordHeaderSize(),record.getId() != 0 && record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
"new ScheduledJob(job,jobName,period)","new ScheduledJob(job,jobName,delay,period)"
"new ScheduledJob(job,jobName,period)","new ScheduledJob(job,jobName,delay,period)"
"file.getName().startsWith(""branched-"")","!file.getName().startsWith(""branched-"")"
gen.get().document(),"gen.get().document(""target/testdocs"",""testsection"")"
"put(TYPES,new MapTypeCaster(),Map.class,Double.class)","put(TYPES,new MapTypeCaster(),Map.class)"
"beans.add(0,bean)",beans.add(bean)
"beans.add(0,bean)",beans.add(bean)
"assertEquals(helper.getRelationshipIndexes().length,1)","assertEquals(1,helper.getRelationshipIndexes().length)"
i < end,i <= end
item != txId,item < txId
2,18
path(11),path(14)
path(11),path(14)
path(11),path(14)
version == null,"version == null || version.equals("""")"
version == null,"version == null || version.equals("""")"
version == null,"version == null || version.equals("""")"
version == null,"version == null || version.equals("""")"
version == null,"version == null || version.equals("""")"
version == null,"version == null || version.equals("""")"
2,9
2,9
2,9
"target.directory(""zk"" + id + ""data"")","target.directory(""zk"" + id + ""data"",true)"
"target.directory(""zk"" + id + ""data"")","target.directory(""zk"" + id + ""data"",true)"
"target.directory(""zk"" + id + ""data"")","target.directory(""zk"" + id + ""data"",true)"
@Path(PATH_NODE_INDEX_ID),@Path(PATH_RELATIONSHIP_INDEX_ID)
@Path(PATH_NODE_INDEX_ID),@Path(PATH_RELATIONSHIP_INDEX_ID)
@Path(PATH_NODE_INDEX_ID),@Path(PATH_RELATIONSHIP_INDEX_ID)
@Path(PATH_NODE_INDEX_ID),@Path(PATH_RELATIONSHIP_INDEX_ID)
"addProperty(firstNode,""band"",""The Clash"")","addProperty(secondNode,""band"",""The Clash"")"
"addProperty(firstNode,""band"",""The Clash"")","addProperty(secondNode,""band"",""The Clash"")"
"addProperty(firstNode,""band"",""The Clash"")","addProperty(secondNode,""band"",""The Clash"")"
"addProperty(firstNode,""band"",""The Clash"")","addProperty(secondNode,""band"",""The Clash"")"
"new ChannelInboundHandlerAdapter(){   @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {     if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {       assertNull(ctx.pipeline().context(WebSocketServerProtocolHandshakeHandler.class));     }   } } ","new ChannelHandler(){   @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {     if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {       assertNull(ctx.pipeline().context(WebSocketServerProtocolHandshakeHandler.class));     }   } } "
"new HttpClientCodec(4096,8192,8192,true)","new HttpClientCodec(4096,8192,true)"
"ChannelInboundHandlerAdapter handler=new ChannelDuplexHandler(){   @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {     ctx.fireChannelActive();     peerRef.exchange(ctx.channel(),1L,SECONDS);   }   @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg){     latch.countDown();     ctx.read();   }   @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause){     causeRef.set(cause);   } } ; ","ChannelHandler handler=new ChannelHandler(){   @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {     ctx.fireChannelActive();     peerRef.exchange(ctx.channel(),1L,SECONDS);   }   @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg){     latch.countDown();     ctx.read();   }   @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause){     causeRef.set(cause);   } } ; "
"method.invoke(method,ByteBuffer.allocate(1))","method.invoke(checksum,ByteBuffer.allocate(1))"
"@Override protected boolean handleResponse(ChannelHandlerContext ctx,Object response) throws HttpProxyConnectException {   if (response instanceof HttpResponse) {     if (status != null) {       throw new HttpProxyConnectException(exceptionMessage(""too many responses""),null);     }     HttpResponse res=(HttpResponse)response;     status=res.status();     inboundHeaders=res.headers();   }   boolean finished=response instanceof LastHttpContent;   if (finished) {     if (status == null) {       throw new HttpProxyConnectException(exceptionMessage(""missing response""),inboundHeaders);     }     if (status.code() != 200) {       throw new HttpProxyConnectException(exceptionMessage(""status: "" + status),inboundHeaders);     }   }   return finished; } ","@Override protected boolean handleResponse(ChannelHandlerContext ctx,Object response) throws Exception {   if (response instanceof HttpResponse) {     if (status != null) {       throw new HttpProxyConnectException(exceptionMessage(""too many responses""),null);     }     HttpResponse res=(HttpResponse)response;     status=res.status();     inboundHeaders=res.headers();   }   boolean finished=response instanceof LastHttpContent;   if (finished) {     if (status == null) {       throw new HttpProxyConnectException(exceptionMessage(""missing response""),inboundHeaders);     }     if (status.code() != 200) {       throw new HttpProxyConnectException(exceptionMessage(""status: "" + status),inboundHeaders);     }   }   return finished; } "
"logger.info(""{} exists but cannot be executed even when execute permissions set; "" + ""check volume for \""noexec\"" flag; use -Dio.netty.native.workdir=[path] "" + ""to set native working directory separately."",tmpFile.getPath())","logger.info(""{} exists but cannot be executed even when execute permissions set; "" + ""check volume for \""noexec\"" flag; use -Dio.netty.native.workdir=[path] "" + ""to set native working directory separately."",tmpFile.getPath(),""io.netty.native.workdir"")"
"super(pipeline,null,HEAD_NAME,false,true); ","super(pipeline,null,HEAD_NAME,true,true); "
promise.setSuccess(null),promise.trySuccess(null)
promise.setSuccess(null),promise.trySuccess(null)
SSL.getErrorString(err),SSL.getErrorString(stackError)
EXPLICIT_NO_UNSAFE_CAUSE == null,EXPLICIT_NO_UNSAFE_CAUSE != null
getWrappedEngine().release(),getWrappedEngine().release(decrement)
"ctx.writeAndFlush(msg,promise)","ctx.write(msg,promise)"
"ctx.writeAndFlush(msg,promise)","ctx.write(msg,promise)"
ReferenceCountUtil.safeRelease(holder),ReferenceCountUtil.release(holder)
ReferenceCountUtil.safeRelease(holder),ReferenceCountUtil.release(holder)
ReferenceCountUtil.safeRelease(holder),ReferenceCountUtil.release(holder)
ReferenceCountUtil.safeRelease(holder),ReferenceCountUtil.release(holder)
rejectRemoteInitiatedRenegotiation && SSL.getHandshakeCount(ssl) > 1,rejectRemoteInitiatedRenegotiation && !isDestroyed() && SSL.getHandshakeCount(ssl) > 1
"/**   * {@code ""content-security-policy""}  */ public static final CharSequence CONTENT_SECURITY_POLICY=new AsciiString(""content-security-policy""); ","/**   * {@code ""content-security-policy""}  */ public static final AsciiString CONTENT_SECURITY_POLICY=new AsciiString(""content-security-policy""); "
"/**   * {@code ""x-frame-options""}  */ public static final CharSequence X_FRAME_OPTIONS=new AsciiString(""x-frame-options""); ","/**   * {@code ""x-frame-options""}  */ public static final AsciiString X_FRAME_OPTIONS=new AsciiString(""x-frame-options""); "
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly())),assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly())),assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
"assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)","assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)"
0,4
0,4
"new SctpMessage(streamIdentifier,protocolIdentifier,unordered,msg.retain())","new SctpMessage(protocolIdentifier,streamIdentifier,unordered,msg.retain())"
16,17
0,1
0,1
"logger.warn(""Failed to set channel option '{}' with value '{}' for channel '{}'"",option,channel,channel,t)","logger.warn(""Failed to set channel option '{}' with value '{}' for channel '{}'"",option,value,channel,t)"
super.mySetupMutualAuthServerIsValidException(cause),super.mySetupMutualAuthServerIsValidClientException(cause)
nameLength > maxHeadersLength - headersLength,index > maxHeadersLength - headersLength
nameLength > maxHeadersLength - headersLength,index > maxHeadersLength - headersLength
Float.valueOf(encoding.substring(equalsPos + 1)),Float.parseFloat(encoding.substring(equalsPos + 1))
Float.valueOf(encoding.substring(equalsPos + 1)),Float.parseFloat(encoding.substring(equalsPos + 1))
Byte.valueOf(value.toString()),Byte.parseByte(value.toString())
Byte.valueOf(value.toString()),Byte.parseByte(value.toString())
Short.valueOf(value.toString()),Short.parseShort(value.toString())
Short.valueOf(value.toString()),Short.parseShort(value.toString())
Float.valueOf(value.toString()),Float.parseFloat(value.toString())
Float.valueOf(value.toString()),Float.parseFloat(value.toString())
Double.valueOf(value.toString()),Double.parseDouble(value.toString())
Double.valueOf(value.toString()),Double.parseDouble(value.toString())
2,66
buffer.writeBytes(content),"buffer.writeBytes(content,content.readerIndex(),content.readableBytes())"
c.content().readBytes(CONTENT_LENGTH),c.content().readSlice(CONTENT_LENGTH)
c.content().readBytes(CONTENT_LENGTH),c.content().readSlice(CONTENT_LENGTH)
connection.remote().nextStreamId(),connection.remote().incrementAndGetNextStreamId()
connection.remote().nextStreamId(),connection.remote().incrementAndGetNextStreamId()
ChannelOption<Integer>,ChannelOption<Boolean>
1 / 5,1 / 5f
PlatformDependent.getByte(index),"PlatformDependent.getByte(array,index)"
PlatformDependent.getByte(index),"PlatformDependent.getByte(array,index)"
isHandshaking(clientResult) && isHandshaking(serverResult),isHandshaking(clientResult) || isHandshaking(serverResult)
address.getHostName(),address.getHostAddress()
address.getHostName(),address.getHostAddress()
o instanceof Attribute,o instanceof InternalAttribute
Attribute attribute=(Attribute)o; ,InternalAttribute attribute=(InternalAttribute)o; 
content().copy(),content().duplicate()
content().copy(),content().duplicate()
HttpHeaderValues.IDENTITY.equals(targetContentEncoding),HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
HttpHeaderValues.IDENTITY.equals(targetContentEncoding),HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
promise.isDone(),promise.isDone() || future.isCancelled()
private final DefaultChannelPipeline pipeline; ,private final ChannelPipeline pipeline; 
peekNode(),headRef()
peekNode(),headRef()
acquiredChannelCount <= maxConnections,acquiredChannelCount < maxConnections
"SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),true)","SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),false)"
addr.isAnyLocalAddress(),addr.isAnyLocalAddress() || addr.isLoopbackAddress()
"new DatagramDnsQuery(addr,null,1)","new DatagramDnsQuery(null,addr,1)"
"new DatagramDnsQuery(addr,null,1)","new DatagramDnsQuery(null,addr,1)"
"new DatagramDnsQuery(addr,null,1)","new DatagramDnsQuery(null,addr,1)"
"new DatagramDnsQuery(addr,null,1)","new DatagramDnsQuery(null,addr,1)"
"new DatagramDnsQuery(addr,null,1)","new DatagramDnsQuery(null,addr,1)"
connection.local().createStream(toStreamId(i)),"connection.local().createStream(toStreamId(i),false)"
new SslContextBuilder(true),new SslContextBuilder(false)
new SslContextBuilder(false),new SslContextBuilder(true)
new SslContextBuilder(false),new SslContextBuilder(true)
private final ReplayingDecoderBuffer replayable=new ReplayingDecoderBuffer(); ,private final ReplayingDecoderByteBuf replayable=new ReplayingDecoderByteBuf(); 
"parent.incrementPrioritizableForTree(amt,oldParent)","parent.incrementPrioritizableForTree0(amt,oldParent)"
"parent.incrementPrioritizableForTree(amt,oldParent)","parent.incrementPrioritizableForTree0(amt,oldParent)"
parent.decrementPrioritizableForTree(amt),parent.decrementPrioritizableForTree0(amt)
parent.decrementPrioritizableForTree(amt),parent.decrementPrioritizableForTree0(amt)
config().getSoLinger() > 0,javaChannel().isOpen() && config().getSoLinger() > 0
Math.abs(diff - maxAge) <= 1,Math.abs(diff - maxAge) <= 2
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ,new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ,new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ,new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ,new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
"new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,false)","new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,true)"
lc + pb,lc + lp
lc + pb,lc + lp
decoder.readOutbound(),decoder.readInbound()
decoder.readOutbound(),decoder.readInbound()
"/**   * Returns a duplicate of this resource record.  */ @Override public ByteBufHolder duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } ","/**   * Returns a duplicate of this resource record.  */ @Override public DnsResource duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } "
2,10
1,9
port >= 65535,port >= 65536
config.isAutoRead(),!config.isAutoRead()
config.isAutoRead(),!config.isAutoRead()
config.isAutoRead(),!config.isAutoRead()
config.isAutoRead(),!config.isAutoRead()
isCancelled0(result),!isCancelled0(result)
isCancelled0(result),!isCancelled0(result)
connectPromise.setFailure(t),connectPromise.tryFailure(t)
connectPromise.setFailure(t),connectPromise.tryFailure(t)
1,9
1,9
2,66
2,66
promise.setFailure(cause),promise.tryFailure(cause)
promise.setFailure(cause),promise.tryFailure(cause)
"!SystemPropertyUtil.getBoolean(""io.netty.noJdkZlibDecoder"",true)","SystemPropertyUtil.getBoolean(""io.netty.noJdkZlibDecoder"",true)"
1024,1025
"((ChannelProgressivePromise)promise).setProgress(progress,-1)","((ChannelProgressivePromise)promise).tryProgress(progress,-1)"
"((ChannelProgressivePromise)promise).setProgress(progress,-1)","((ChannelProgressivePromise)promise).tryProgress(progress,-1)"
ch.unsafe().flushNow(),ch.unsafe().flush()
ch.unsafe().flushNow(),ch.unsafe().flush()
"ctx.write(""Welcome to "" + InetAddress.getLocalHost().getHostName() + "" secure chat service!\n"")","ctx.writeAndFlush(""Welcome to "" + InetAddress.getLocalHost().getHostName() + "" secure chat service!\n"")"
"ctx.write(""Welcome to "" + InetAddress.getLocalHost().getHostName() + "" secure chat service!\n"")","ctx.writeAndFlush(""Welcome to "" + InetAddress.getLocalHost().getHostName() + "" secure chat service!\n"")"
"ctx.write(""Your session is protected by "" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + "" cipher suite.\n"")","ctx.writeAndFlush(""Your session is protected by "" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + "" cipher suite.\n"")"
"ctx.write(""Your session is protected by "" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + "" cipher suite.\n"")","ctx.writeAndFlush(""Your session is protected by "" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + "" cipher suite.\n"")"
"c.write(""["" + ctx.channel().remoteAddress() + ""] ""+ msg+ '\n')","c.writeAndFlush(""["" + ctx.channel().remoteAddress() + ""] ""+ msg+ '\n')"
"c.write(""["" + ctx.channel().remoteAddress() + ""] ""+ msg+ '\n')","c.writeAndFlush(""["" + ctx.channel().remoteAddress() + ""] ""+ msg+ '\n')"
"c.write(""[you] "" + msg + '\n')","c.writeAndFlush(""[you] "" + msg + '\n')"
"c.write(""[you] "" + msg + '\n')","c.writeAndFlush(""[you] "" + msg + '\n')"
compositeBuffer(),compositeBuffer(Integer.MAX_VALUE)
wrappedBuffer(byteBuffer),"wrappedBuffer(Integer.MAX_VALUE,byteBuffer)"
src[srcIdx],src[i]
src[srcIdx],src[i]
new TelnetServerPipelineFactory(),new TelnetServerInitializer()
count <= 0,count < 0
1,0
return handshakeTimeoutMillis; ,return closeNotifyTimeoutMillis; 
"decodeAttribute(nameAttribute.getValue(),charset)",cleanString(nameAttribute.getValue())
"logger.error(""Failed to enumerate network interfaces"",e)","logger.warn(""Failed to enumerate network interfaces"",e)"
"logger.error(""Failed to enumerate network interfaces"",e)","logger.warn(""Failed to enumerate network interfaces"",e)"
closedChannelException != null,closedChannelException == null
runTasks & 0x40,runTasks & 0x3F
assertFalse(dr.isFailure()),assertTrue(dr.isFailure())
assertFalse(dr.isFailure()),assertTrue(dr.isFailure())
assertFalse(dr.isFailure()),assertTrue(dr.isFailure())
assertFalse(dr.isFailure()),assertTrue(dr.isFailure())
assertFalse(dr.isFailure()),assertTrue(dr.isFailure())
assertFalse(dr.isFailure()),assertTrue(dr.isFailure())
ChannelStateHandler handler=(ChannelStateHandler)handler(); ,ChannelHandler handler=handler(); 
handler instanceof ChannelInboundHandler,handler instanceof ChannelOutboundHandler
promise.tryFailure(new ClosedChannelException()),promise.setFailure(new ClosedChannelException())
promise.tryFailure(new ClosedChannelException()),promise.setFailure(new ClosedChannelException())
promise.setFailure(new ClosedChannelException()),promise.tryFailure(new ClosedChannelException())
promise.setFailure(new ClosedChannelException()),promise.tryFailure(new ClosedChannelException())
runAllTasks(),processSelectedKeys()
runAllTasks(),processSelectedKeys()
processSelectedKeys(),runAllTasks()
processSelectedKeys(),runAllTasks()
1,17
ctx.nextOutboundMessageBuffer(),ctx.nextInboundMessageBuffer()
ctx.nextOutboundMessageBuffer(),ctx.nextInboundMessageBuffer()
Thread.sleep(400),Thread.sleep(401)
Thread.sleep(50),Thread.sleep(51)
"AbstractBootstrap<ServerBootstrap,Channel>","AbstractBootstrap<ServerBootstrap,ServerChannel>"
"AbstractBootstrap<ServerBootstrap,ServerChannel>","AbstractBootstrap<ServerBootstrap,Channel>"
StringBuilder sb=new StringBuilder(64); ,ByteBuf line=buffer(64); 
sb.toString(),line.toString(charset)
sb.toString(),line.toString(charset)
StringBuilder sb=new StringBuilder(64); ,ByteBuf line=buffer(64); 
sb.toString(),line.toString(charset)
sb.toString(),line.toString(charset)
data.remaining(),data.position()
data.remaining(),data.position()
1,17
1,17
Values.WEBSOCKET.equalsIgnoreCase(upgrade),!Values.WEBSOCKET.equalsIgnoreCase(upgrade)
Values.UPGRADE.equalsIgnoreCase(connection),!Values.UPGRADE.equalsIgnoreCase(connection)
Values.WEBSOCKET.equalsIgnoreCase(upgrade),!Values.WEBSOCKET.equalsIgnoreCase(upgrade)
Values.UPGRADE.equalsIgnoreCase(connection),!Values.UPGRADE.equalsIgnoreCase(connection)
"new SpdySessionStatus(11,""INTERNAL_ERROR"")","new SpdySessionStatus(2,""INTERNAL_ERROR"")"
case 11: ,case 2: 
Values.WEBSOCKET.equalsIgnoreCase(upgrade),!Values.WEBSOCKET.equalsIgnoreCase(upgrade)
Values.UPGRADE.equalsIgnoreCase(connection),!Values.UPGRADE.equalsIgnoreCase(connection)
"sctpChannelClass.getMethod(""open"",null)","sctpChannelClass.getMethod(""open"")"
"public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; ","public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; "
timeout=120000,timeout=30000
header.writeBytes(mask),out.writeBytes(mask)
header.writeBytes(mask),out.writeBytes(mask)
header.writeBytes(mask),out.writeBytes(mask)
header.writeBytes(mask),out.writeBytes(mask)
Exception e,Throwable t
buf.clear(),buf.discardReadBytes()
buf.clear(),buf.discardReadBytes()
index > capacity(),index >= capacity()
"public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(""Invalid index: "" + index + "" - Bytes needed: ""+ (index)+ "", maximum is ""+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } ","public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(""Invalid index: "" + index + "" - Bytes needed: ""+ (index)+ "", maximum is ""+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } "
index > capacity(),index >= capacity()
"public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(""Invalid index: "" + index + "" - Bytes needed: ""+ (index)+ "", maximum is ""+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } ","public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(""Invalid index: "" + index + "" - Bytes needed: ""+ (index)+ "", maximum is ""+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } "
1,17
1,17
1,1
ChannelBufferHolders.catchAllBuffer(),ChannelBufferHolders.messageBuffer(queue)
that.getPath() == null,that.getPath() == null && getPath() != null
that.getDomain() == null,that.getDomain() == null && getDomain() != null
c.getPath() == null,c.getPath() == null && getPath() != null
c.getDomain() == null,c.getDomain() == null && getDomain() != null
that.getPath() == null,that.getPath() == null && getPath() != null
that.getDomain() == null,that.getDomain() == null && getDomain() != null
c.getPath() == null,c.getPath() == null && getPath() != null
c.getDomain() == null,c.getDomain() == null && getDomain() != null
"""true"".equalsIgnoreCase(value)","!""true"".equalsIgnoreCase(value)"
byteBuf.readable(),!byteBuf.readable()
inbound.isEmpty() && inbound.hasByteBuffer(),!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()
data.limit(),buffer.limit()
data.limit(),buffer.limit()
data.limit(),buffer.limit()
data.limit(),buffer.limit()
handlers[0] == null,handlers.length == 0 || handlers[0] == null
handlers[0] == null,handlers.length == 0 || handlers[0] == null
2,66
selector.select(500),selector.select(10)
500 * 1000000L,10 * 1000000L
selector.select(500),selector.select(10)
500 * 1000000L,10 * 1000000L
"/**   */ class SctpClientPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException(""Failed to create a selector."",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn(""Failed to close a selector."",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn(""Failed to close a selector."",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn(""Unexpected exception in the selector loop."",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException(""connection timed out""); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } ","/**   */ class SctpClientPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException(""Failed to create a selector."",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn(""Failed to close a selector."",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn(""Failed to close a selector."",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn(""Unexpected exception in the selector loop."",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException(""connection timed out""); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } "
"/**   */ class SctpServerPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn(""Failed to accept a connection."",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(""Failed to initialize an accepted socket."",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn(""Failed to close a partially accepted socket."",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(""Failed to close a selector."",e); } } } } } ","/**   */ class SctpServerPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn(""Failed to accept a connection."",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(""Failed to initialize an accepted socket."",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn(""Failed to close a partially accepted socket."",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(""Failed to close a selector."",e); } } } } } "
"channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))","channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))"
"channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))","channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))"
uri.toASCIIString(),uri.getRawPath()
uri.toASCIIString(),uri.getRawPath()
ObjectStreamClass.lookupAny(clazz),ObjectStreamClass.lookup(clazz)
ObjectStreamClass.lookupAny(clazz),ObjectStreamClass.lookup(clazz)
clazz.isPrimitive() || clazz.isArray(),clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0
"this(maxFrameLength,lengthFieldOffset,lengthFieldOffset,lengthAdjustment,initialBytesToStrip,false); ","this(maxFrameLength,lengthFieldOffset,lengthFieldLength,lengthAdjustment,initialBytesToStrip,false); "
System.identityHashCode(this),System.identityHashCode(o)
System.identityHashCode(this),System.identityHashCode(o)
ctx.sendDownstream(e),ctx.sendUpstream(e)
ctx.sendDownstream(e),ctx.sendUpstream(e)
"""maxHeaderSize must be a positive integer: "" + maxChunkSize","""maxHeaderSize must be a positive integer: "" + maxHeaderSize"
"""maxHeaderSize must be a positive integer: "" + maxChunkSize","""maxHeaderSize must be a positive integer: "" + maxHeaderSize"
return 10; ,return 8; 
return 18; ,return 16; 
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING,handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING,handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED
hasNextChunk(),!hasNextChunk()
hasNextChunk(),!hasNextChunk()
hasNextChunk(),!hasNextChunk()
hasNextChunk(),!hasNextChunk()
private final Executor eventExecutor; ,private final ExecutionHandler executionHandler; 
AsynchronousCloseException e,ClosedChannelException e
z.next_in[z.next_in_index++] == 0,z.next_in[z.next_in_index++] != 0
z.next_in[z.next_in_index++] == 0,z.next_in[z.next_in_index++] != 0
"wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())","wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())"
value.length() <= 3,value.length() <= 9
1,1
1,1
ctx.sendDownstream(e),ctx.sendUpstream(e)
ctx.sendDownstream(e),ctx.sendUpstream(e)
ctx.sendDownstream(e),ctx.sendUpstream(e)
ctx.sendDownstream(e),ctx.sendUpstream(e)
localAddress != null,localAddress != null && getParent() == null
"decodeLast(ctx,e.getChannel(),cumulation,state)","decodeLast(ctx,e.getChannel(),replayable,state)"
toByteBuffer(),"toByteBuffer(index,length)"
1,33
1,33
"channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)","channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)"
"channelIdle(ctx,IdleState.ALL_IDLE,lastReadTime)","channelIdle(ctx,IdleState.ALL_IDLE,lastIoTime)"
content.readable(),!content.readable()
Exception e,Throwable t
calendar.get(HOUR),calendar.get(HOUR_OF_DAY)
"/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandlerContext {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } ","/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandler {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } "
ChannelBuffers.buffer(length),"ChannelBuffers.buffer(order(),length)"
value >>> 8,value >> 8
9,25
new IllegalArgumentException(),new IndexOutOfBoundsException()
handshakeFuture != null,handshakeFuture == null
handshakeFuture != null,handshakeFuture == null
estimatedLength < 8,estimatedLength < 0
mListView.getChildAt(index),mListView.getListChildAt(index)
mListView.getChildAt(index),mListView.getListChildAt(index)
mListView.getChildAt(index),mListView.getListChildAt(index)
mListView.getChildAt(index),mListView.getListChildAt(index)
@NonNull,@Nullable
getPositionForView(switchView) < getHeaderViewsCount(),getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
getPositionForView(switchView) < getHeaderViewsCount(),getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
mAbsListView.getPositionForView(childView) == position,mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder
"super.getView(position,contextualUndoView.getContentView(),parent)","super.getView(position,contextualUndoView.getContentView(),contextualUndoView)"
"super.getView(position,contextualUndoView.getContentView(),parent)","super.getView(position,contextualUndoView.getContentView(),contextualUndoView)"
mDownView != null,mDownView != null && mDownView instanceof ContextualUndoView
AnimationAdapter<T>,PropertyValuesAnimationAdapter<T>
AnimationAdapter<T>,PropertyValuesAnimationAdapter<T>
AnimationAdapter<T>,PropertyValuesAnimationAdapter<T>
16,0
properties.length > 3,properties.length > 4
"Arrays.equals(oldVal,val)","!Arrays.equals(oldVal,val)"
"!lowByte.equals("""")","lowByte.equals("""")"
events == null,events == null && this.calDavLoader != null
"cal.set(1900,1,1,hour,minute,second)","cal.set(1900,0,1,hour,minute,second)"
"logger.warn(""NODE {}: BATTERY LOW!"",this.getNode().getNodeId())","logger.debug(""NODE {}: BATTERY LOW!"",this.getNode().getNodeId())"
"logger.warn(""NODE {}: BATTERY LOW!"",this.getNode().getNodeId())","logger.debug(""NODE {}: BATTERY LOW!"",this.getNode().getNodeId())"
"CONFIG_REFRESH.equals(configKey) || ""service.pid"".equals(configKey)","CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey) || ""service.pid"".equals(configKey)"
level <= RF_STATUS_FULL_SIGNAL,level < RF_STATUS_FULL_SIGNAL
level <= RF_STATUS_HIGH_SIGNAL,level < RF_STATUS_HIGH_SIGNAL
level <= RF_STATUS_MEDIUM_SIGNAL,level < RF_STATUS_MEDIUM_SIGNAL
level <= RF_STATUS_LOW_SIGNAL,level < RF_STATUS_LOW_SIGNAL
batteryVp >= full,batteryVp > full
batteryVp >= high,batteryVp > high
batteryVp >= medium,batteryVp > medium
batteryVp >= low,batteryVp > low
1,33
9,1
9,1
new byte[19],new byte[20]
new byte[13],new byte[14]
new byte[10],new byte[11]
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0,nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0,nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0,nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0,nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0,nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0,nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
heatpumpValues[65],heatpumpValues[66]
heatpumpValues[65],heatpumpValues[66]
new byte[13],new byte[14]
new byte[17],new byte[18]
new byte[10],new byte[12]
new byte[9],new byte[10]
new byte[16],new byte[17]
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP),(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP),(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION),(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION),(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
new byte[13],new byte[14]
new byte[17],new byte[18]
new byte[10],new byte[12]
new byte[9],new byte[10]
new byte[16],new byte[17]
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
Thread.sleep(50),Thread.sleep(100)
"logger.debug(""myq securityToken: {}"",securityToken)","logger.trace(""myq securityToken: {}"",securityToken)"
"logger.debug(""myq securityToken: {}"",securityToken)","logger.trace(""myq securityToken: {}"",securityToken)"
"logger.debug(""Invalid Account Credentials"")","logger.trace(""Invalid Account Credentials"")"
"logger.debug(""Invalid Account Credentials"")","logger.trace(""Invalid Account Credentials"")"
"logger.debug(""MyQ binding received command '{}' for item '{}'"",command,itemName)","logger.trace(""MyQ binding received command '{}' for item '{}'"",command,itemName)"
"logger.debug(""MyQ binding received command '{}' for item '{}'"",command,itemName)","logger.trace(""MyQ binding received command '{}' for item '{}'"",command,itemName)"
"logger.debug(""rapidRefreshFuture scheduleing for {} millis"",millis)","logger.trace(""rapidRefreshFuture scheduleing for {} millis"",millis)"
"logger.debug(""rapidRefreshFuture scheduleing for {} millis"",millis)","logger.trace(""rapidRefreshFuture scheduleing for {} millis"",millis)"
"logger.debug(""rapidRefreshFutureEnd stopping"")","logger.trace(""rapidRefreshFutureEnd stopping"")"
"logger.debug(""rapidRefreshFutureEnd stopping"")","logger.trace(""rapidRefreshFutureEnd stopping"")"
"logger.debug(""Retreiveing door data"")","logger.trace(""Retreiveing door data"")"
"logger.debug(""Retreiveing door data"")","logger.trace(""Retreiveing door data"")"
"logger.debug(""attempting to login"")","logger.trace(""attempting to login"")"
"logger.debug(""attempting to login"")","logger.trace(""attempting to login"")"
"logger.debug(""Requsting URL {}"",url)","logger.trace(""Requsting URL {}"",url)"
"logger.debug(""Requsting URL {}"",url)","logger.trace(""Requsting URL {}"",url)"
"logger.debug(""Received MyQ  JSON: {}"",dataString)","logger.trace(""Received MyQ  JSON: {}"",dataString)"
"logger.debug(""Received MyQ  JSON: {}"",dataString)","logger.trace(""Received MyQ  JSON: {}"",dataString)"
"logger.debug(""myq ReturnCode: {}"",returnCode)","logger.trace(""myq ReturnCode: {}"",returnCode)"
"logger.debug(""myq ReturnCode: {}"",returnCode)","logger.trace(""myq ReturnCode: {}"",returnCode)"
"logger.debug(""myq securityToken: {}"",securityToken)","logger.trace(""myq securityToken: {}"",securityToken)"
"logger.debug(""myq securityToken: {}"",securityToken)","logger.trace(""myq securityToken: {}"",securityToken)"
"logger.debug(""Invalid Account Credentials"")","logger.trace(""Invalid Account Credentials"")"
"logger.debug(""Invalid Account Credentials"")","logger.trace(""Invalid Account Credentials"")"
"logger.debug(""MyQ binding received command '{}' for item '{}'"",command,itemName)","logger.trace(""MyQ binding received command '{}' for item '{}'"",command,itemName)"
"logger.debug(""MyQ binding received command '{}' for item '{}'"",command,itemName)","logger.trace(""MyQ binding received command '{}' for item '{}'"",command,itemName)"
"logger.debug(""rapidRefreshFuture scheduleing for {} millis"",millis)","logger.trace(""rapidRefreshFuture scheduleing for {} millis"",millis)"
"logger.debug(""rapidRefreshFuture scheduleing for {} millis"",millis)","logger.trace(""rapidRefreshFuture scheduleing for {} millis"",millis)"
"logger.debug(""rapidRefreshFutureEnd stopping"")","logger.trace(""rapidRefreshFutureEnd stopping"")"
"logger.debug(""rapidRefreshFutureEnd stopping"")","logger.trace(""rapidRefreshFutureEnd stopping"")"
"logger.debug(""Retreiveing door data"")","logger.trace(""Retreiveing door data"")"
"logger.debug(""Retreiveing door data"")","logger.trace(""Retreiveing door data"")"
"logger.debug(""attempting to login"")","logger.trace(""attempting to login"")"
"logger.debug(""attempting to login"")","logger.trace(""attempting to login"")"
"logger.debug(""Requsting URL {}"",url)","logger.trace(""Requsting URL {}"",url)"
"logger.debug(""Requsting URL {}"",url)","logger.trace(""Requsting URL {}"",url)"
"logger.debug(""Received MyQ  JSON: {}"",dataString)","logger.trace(""Received MyQ  JSON: {}"",dataString)"
"logger.debug(""Received MyQ  JSON: {}"",dataString)","logger.trace(""Received MyQ  JSON: {}"",dataString)"
"logger.debug(""myq ReturnCode: {}"",returnCode)","logger.trace(""myq ReturnCode: {}"",returnCode)"
"logger.debug(""myq ReturnCode: {}"",returnCode)","logger.trace(""myq ReturnCode: {}"",returnCode)"
configElements[1],configElements[0]
configList.size() == 0,configList == null || configList.size() == 0
configList.size() == 0,configList == null || configList.size() == 0
configList.size() == 0,configList == null || configList.size() == 0
configList.size() == 0,configList == null || configList.size() == 0
configElements[1],configElements[0]
"logger.warn(""gave up waiting for query reply from device {}"",m_address)","logger.debug(""gave up waiting for query reply from device {}"",m_address)"
"logger.warn(""gave up waiting for query reply from device {}"",m_address)","logger.debug(""gave up waiting for query reply from device {}"",m_address)"
"logger.warn(""gave up waiting for query reply from device {}"",m_address)","logger.debug(""gave up waiting for query reply from device {}"",m_address)"
"logger.warn(""gave up waiting for query reply from device {}"",m_address)","logger.debug(""gave up waiting for query reply from device {}"",m_address)"
ZWaveSwithcAllCommandClass.class,ZWaveSwitchAllCommandClass.class
"zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)","zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)"
"zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)","zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)"
session.getMachineIdentifier().equals(config.getMachineIdentifier()),session.getMachineIdentifier().startsWith(config.getMachineIdentifier())
session.getMachineIdentifier().equals(config.getMachineIdentifier()),session.getMachineIdentifier().startsWith(config.getMachineIdentifier())
findState != 0,findState > 0
"logger.info(""Calimero library version {}"",Settings.getLibraryVersion())","logger.debug(""Calimero library version {}"",Settings.getLibraryVersion())"
"logger.info(""Calimero library version {}"",Settings.getLibraryVersion())","logger.debug(""Calimero library version {}"",Settings.getLibraryVersion())"
"provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials)","provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials) && thermostats.containsKey(provider.getThermostatIdentifier(itemName))"
"logger.info(""Calimero library version {}"",Settings.getLibraryVersion())","logger.debug(""Calimero library version {}"",Settings.getLibraryVersion())"
"logger.info(""Calimero library version {}"",Settings.getLibraryVersion())","logger.debug(""Calimero library version {}"",Settings.getLibraryVersion())"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())","logger.debug(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())"
"logger.error(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())","logger.debug(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""Error connecting to Plex"",e)","logger.debug(""Error connecting to Plex"",e)"
"logger.error(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())","logger.debug(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())"
"logger.error(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())","logger.debug(""[{}]: Websocket error: {}"",connection.getHost(),e.getMessage())"
"logger.error(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())","logger.debug(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())"
"logger.error(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())","logger.debug(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())"
"logger.error(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())","logger.debug(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())"
"logger.error(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())","logger.debug(""Cannot retrieve item {} for widget {}"",itemName,w.eClass().getInstanceTypeName())"
i <= repeatCount,i < repeatCount
i <= repeatCount,i < repeatCount
i <= repeatCount,i < repeatCount
i <= repeatCount,i < repeatCount
"database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())","database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
"database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())","database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
"database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())","database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
"database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())","database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
"database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())","database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
"database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())","database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
"logger.trace(""Receive queue TAKE: Length={}"",recvQueue.size())","logger.debug(""Receive queue TAKE: Length={}"",recvQueue.size())"
"logger.trace(""Receive queue TAKE: Length={}"",recvQueue.size())","logger.debug(""Receive queue TAKE: Length={}"",recvQueue.size())"
"logger.trace(""Receive queue ADD: Length={}"",recvQueue.size())","logger.debug(""Receive queue ADD: Length={}"",recvQueue.size())"
"logger.trace(""Receive queue ADD: Length={}"",recvQueue.size())","logger.debug(""Receive queue ADD: Length={}"",recvQueue.size())"
"logger.debug(""NODE {}: App version requested but Version class not supported"",this.getNodeId())","logger.trace(""NODE {}: App version requested but Version class not supported"",this.getNodeId())"
"logger.debug(""NODE {}: App version requested but Version class not supported"",this.getNodeId())","logger.trace(""NODE {}: App version requested but Version class not supported"",this.getNodeId())"
"logger.debug(""NODE {}: App version requested but version is unknown"",this.getNodeId())","logger.trace(""NODE {}: App version requested but version is unknown"",this.getNodeId())"
"logger.debug(""NODE {}: App version requested but version is unknown"",this.getNodeId())","logger.trace(""NODE {}: App version requested but version is unknown"",this.getNodeId())"
"logger.debug(""NODE {}: Retry timout: Advancing"")","logger.debug(""NODE {}: Retry timout: Advancing"",node.getNodeId())"
"logger.debug(""NODE {}: Retry timout: Can't advance"")","logger.debug(""NODE {}: Retry timout: Can't advance"",node.getNodeId())"
msg.getType() == Message.Type.error,msg.getType() == Message.Type.error || msg.getBody() == null
msg.getType() == Message.Type.error,msg.getType() == Message.Type.error || msg.getBody() == null
"logger.error(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)","logger.trace(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
"logger.error(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)","logger.trace(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
"logger.error(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)","logger.trace(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
"logger.error(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)","logger.trace(""{} unsupported item type {} for item {}"",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
incomingMessage.getMessagePayloadByte(1),incomingMessage.getMessagePayloadByte(0)
"logger.error(""Configuration for influxdb not yet loaded or broken."")","logger.warn(""Configuration for influxdb not yet loaded or broken."")"
"logger.error(""Configuration for influxdb not yet loaded or broken."")","logger.warn(""Configuration for influxdb not yet loaded or broken."")"
"logger.error(""InfluxDB is not yet connected"")","logger.warn(""InfluxDB is not yet connected"")"
"logger.error(""InfluxDB is not yet connected"")","logger.warn(""InfluxDB is not yet connected"")"
"logger.error(""Configuration for influxdb not yet loaded or broken."")","logger.warn(""Configuration for influxdb not yet loaded or broken."")"
"logger.error(""Configuration for influxdb not yet loaded or broken."")","logger.warn(""Configuration for influxdb not yet loaded or broken."")"
"logger.error(""InfluxDB is not yet connected"")","logger.warn(""InfluxDB is not yet connected"")"
"logger.error(""InfluxDB is not yet connected"")","logger.warn(""InfluxDB is not yet connected"")"
"new VariableInformation(10,""Total operation time compressor"",NibeDataType.S32,Type.Sensor)","new VariableInformation(1,""Total operation time compressor"",NibeDataType.S32,Type.Sensor)"
"new VariableInformation(10,""Total operation time compressor"",NibeDataType.S32,Type.Sensor)","new VariableInformation(1,""Total operation time compressor"",NibeDataType.S32,Type.Sensor)"
incomingMessage.setTransActionCanceled(true),incomingMessage.setTransactionCanceled(true)
incomingMessage.setTransActionCanceled(true),incomingMessage.setTransactionCanceled(true)
"logger.debug(""Illegal argument in chart: {}"",e)","logger.info(""Illegal argument in chart: {}"",e)"
"logger.debug(""Illegal argument in chart: {}"",e)","logger.info(""Illegal argument in chart: {}"",e)"
oldestNode == null,oldestNode == null || oldestNode.getLastSent() == null
oldestNode == null,oldestNode == null || oldestNode.getLastSent() == null
"historicState(item,timestamp)","historicState(item,timestamp,serviceName)"
"historicState(item,timestamp)","historicState(item,timestamp,serviceName)"
"historicState(item,timestamp)","historicState(item,timestamp,serviceName)"
"historicState(item,timestamp)","historicState(item,timestamp,serviceName)"
"logger.debug(""Item not found error while generating chart."")","logger.error(""Item not found error while generating chart."",e)"
"String transformationResult=JsonPath.read(source,JSonPathExpression); ","Object transformationResult=JsonPath.read(source,JSonPathExpression); "
"setSunPosition(calendar,latitude,longitude,sun)","setSunPosition(cal,latitude,longitude,sun)"
incomingMessage.getMessagePayloadByte(0),incomingMessage.getMessagePayloadByte(1)
incomingMessage.getMessagePayloadByte(0),incomingMessage.getMessagePayloadByte(1)
"logger.error(""NODE {}: DeleteReturnRoute command failed."")","logger.error(""NODE {}: DeleteReturnRoute command failed."",nodeId)"
incomingMessage.getMessagePayloadByte(0),incomingMessage.getMessagePayloadByte(1)
incomingMessage.getMessagePayloadByte(0),incomingMessage.getMessagePayloadByte(1)
incomingMessage.getMessagePayloadByte(0),incomingMessage.getMessagePayloadByte(1)
incomingMessage.getMessagePayloadByte(0),incomingMessage.getMessagePayloadByte(1)
sendMessage() == false,currentStage != NodeStage.DONE && sendMessage() == false
sendMessage() == false,currentStage != NodeStage.DONE && sendMessage() == false
new PercentType(precent),new PercentType(percent)
endpointId <= result.getInstances(),result != null && endpointId <= result.getInstances()
zController.sendData(doRequestStop()),zController.enqueue(doRequestStop())
zController.sendData(doRequestStop()),zController.enqueue(doRequestStop())
zController.sendData(doRequestStop()),zController.enqueue(doRequestStop())
zController.sendData(doRequestStop()),zController.enqueue(doRequestStop())
filter.setPageSize(3),filter.setPageSize(1000)
IOUtils.closeQuitely(is),IOUtils.closeQuietly(is)
IOUtils.closeQuitely(is),IOUtils.closeQuietly(is)
"Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)","Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)"
"Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL)","Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)"
"Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL)","Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)"
"Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)","Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)"
IOUtils.closeQuitely(is),IOUtils.closeQuietly(is)
IOUtils.closeQuitely(is),IOUtils.closeQuietly(is)
var.setValue(guessType(value)),var.setValueType(guessType(value))
var.setValue(guessType(value)),var.setValueType(guessType(value))
"start.set(Calendar.DAY_OF_MONTH,startMonth)","start.set(Calendar.DAY_OF_MONTH,startDay)"
stationItemName != null,stationItemName != null && openSprinkler != null
"start.set(Calendar.DAY_OF_MONTH,startMonth)","start.set(Calendar.DAY_OF_MONTH,startDay)"
Integer.parseInt(parts[1]),"Integer.parseInt(parts[1],16)"
"new PairPongMsg(getMessageCount(),(byte)0,MaxCulMsgType.PAIR_PONG,(byte)0,this.srcAddr,dstAddr)","new PairPongMsg(getMessageCount(),(byte)0,(byte)0,this.srcAddr,dstAddr)"
item.getName().matches(name),item.getName().equals(name)
item.getName().matches(name),item.getName().equals(name)
value.doubleValue(),value.toBigInteger()
value.doubleValue(),value.toBigInteger()
calendar.getTimeZone().getDSTSavings(),calendar.getTimeZone().getRawOffset()
calendar.getTimeZone().getDSTSavings(),calendar.getTimeZone().getRawOffset()
calendar.getTimeZone().getDSTSavings(),calendar.getTimeZone().getRawOffset()
calendar.getTimeZone().getDSTSavings(),calendar.getTimeZone().getRawOffset()
stateHolder.reloadVariables(),stateHolder.reloadDatapoints()
stateHolder.reloadVariables(),stateHolder.reloadDatapoints()
"logger.debug(""Queue length is {} - deferring HEAL."")","logger.debug(""Queue length is {} - deferring HEAL."",zController.getSendQueueLength())"
isNodeHealing(node.getNodeId()),!isNodeHealing(node.getNodeId())
"String.format(""NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s"",this.node.getNodeStage().getLabel(),targetStage.getLabel())","String.format(""NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s"",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())"
"String.format(""NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s"",this.node.getNodeStage().getLabel(),targetStage.getLabel())","String.format(""NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s"",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())"
"{(byte)this.getNode().getNodeId(),3,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}","{(byte)this.getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}"
bits2[0],bits2[1]
bits2[0],bits2[1]
bits2[1] == false,bits2[1] == true
bits2[1] == false,bits2[1] == true
"logger.info(""The GENA Subscription for serviceID {} is established for device {}"",sub.getService().getServiceId(),sub.getService().getDevice())","logger.debug(""The GENA Subscription for serviceID {} is established for device {}"",sub.getService().getServiceId(),sub.getService().getDevice())"
"logger.info(""The GENA Subscription for serviceID {} is established for device {}"",sub.getService().getServiceId(),sub.getService().getDevice())","logger.debug(""The GENA Subscription for serviceID {} is established for device {}"",sub.getService().getServiceId(),sub.getService().getDevice())"
"logger.warn(""The GENA Subscription for serviceID {} ended for device {}"",subscription.getService().getServiceId(),subscription.getService().getDevice())","logger.debug(""The GENA Subscription for serviceID {} ended for device {}"",subscription.getService().getServiceId(),subscription.getService().getDevice())"
"logger.warn(""The GENA Subscription for serviceID {} ended for device {}"",subscription.getService().getServiceId(),subscription.getService().getDevice())","logger.debug(""The GENA Subscription for serviceID {} ended for device {}"",subscription.getService().getServiceId(),subscription.getService().getDevice())"
bindingConfig != null,bindingConfig != null && converterHandler != null
bindingConfig != null,bindingConfig != null && converterHandler != null
serialNumber.equals(null),!serialNumber.equals(null)
"converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)","converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"
"converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)","converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"
"new S_Command(""00FE30"",20.0)","new S_Command(""00FE30"",1,20.0)"
"new S_Command(""00FE30"",20.0)","new S_Command(""00FE30"",1,20.0)"
ParseUtils.parseHumidity(S300TH_DATA_1),ParseUtils.parseS300THHumidity(S300TH_DATA_1)
ParseUtils.parseHumidity(S300TH_DATA_1),ParseUtils.parseS300THHumidity(S300TH_DATA_1)
"logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpoint,this.getNode().getNodeId())","logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpointId,this.getNode().getNodeId())"
"logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpoint,this.getNode().getNodeId())","logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpointId,this.getNode().getNodeId())"
"logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpoint,this.getNode().getNodeId())","logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpointId,this.getNode().getNodeId())"
"logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpoint,this.getNode().getNodeId())","logger.error(""Endpoint {} not found on node {}. Cannot set command classes."",endpointId,this.getNode().getNodeId())"
socket == null,socket != null
"""Searching class for device type "" + deviceAddress","""Searching class for device type "" + deviceType"
"""Searching class for device type "" + deviceAddress","""Searching class for device type "" + deviceType"
Set<Item>,List<Item>
"logger.debug(getName() + "" has been started"")","logger.info(getName() + "" has been started"")"
"logger.debug(getName() + "" has been started"")","logger.info(getName() + "" has been started"")"
HashSet<Item>,ArrayList<Item>
"triggerManager.getRules(CHANGE,item,newState,oldState)","triggerManager.getRules(CHANGE,item,oldState,newState)"
2,34
!(topicParts.length > 2) && !topicParts[0].equals(TOPIC_PREFIX),!(topicParts.length > 2) || !topicParts[0].equals(TOPIC_PREFIX)
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
1,1
getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).collect(Collectors.toList()),getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).findFirst()
OpenmrsProfileWithoutTest1Module bean=applicationContext.getBean(OpenmrsProfileWithoutTest1Module.class); ,OpenmrsProfileWithoutMissingModule bean=applicationContext.getBean(OpenmrsProfileWithoutMissingModule.class); 
OpenmrsProfileWithoutTest1Module.class,OpenmrsProfileWithoutMissingModule.class
"Assert.assertEquals(20,Context.getAdministrationService().getAllGlobalProperties().size())","Assert.assertEquals(21,Context.getAdministrationService().getAllGlobalProperties().size())"
"Assert.assertEquals(20,as.getAllGlobalProperties().size())","Assert.assertEquals(21,as.getAllGlobalProperties().size())"
"Assert.assertEquals(19,as.getAllGlobalProperties().size())","Assert.assertEquals(20,as.getAllGlobalProperties().size())"
9,41
9,41
patient.getIdentifiers().size() == 1,!patient.isVoided() && patient.getIdentifiers().size() == 1
"Arrays.asList(""dirty"",""log"",""serialVersionUID"",""DATE_TIME_PATTERN"",""TIME_PATTERN"",""DATE_PATTERN"",""FORM_NAMESPACE_PATH_SEPARATOR"",""FORM_NAMESPACE_PATH_MAX_LENGTH"",""obsId"",""groupMembers"",""uuid"",""changedBy"",""dateChanged"",""voided"",""voidedBy"",""voidReason"",""dateVoided"",""formNamespaceAndPath"")","Arrays.asList(""dirty"",""log"",""serialVersionUID"",""DATE_TIME_PATTERN"",""TIME_PATTERN"",""DATE_PATTERN"",""FORM_NAMESPACE_PATH_SEPARATOR"",""FORM_NAMESPACE_PATH_MAX_LENGTH"",""obsId"",""groupMembers"",""uuid"",""changedBy"",""dateChanged"",""voided"",""voidedBy"",""voidReason"",""dateVoided"",""formNamespaceAndPath"",""$jacocoData"")"
10,74
9,41
saveTask(taskDefinition),saveTaskDefinition(taskDefinition)
saveTask(taskDefinition),saveTaskDefinition(taskDefinition)
"wizardModel.databaseConnection.contains(""localhost"")","wizardModel.databaseConnection.contains(""localhost"") || wizardModel.databaseConnection.contains(""127.0.0.1"")"
Throwable t,Exception t
Throwable t,Exception t
Throwable t,Exception t
Throwable t,Exception t
Throwable t,Exception t
Throwable t,Exception t
Throwable t,Exception t
Throwable t,Exception t
10,74
12,76
12,76
12,76
12,76
10,74
10,74
probeParentLoaderLast=true,probeParentLoaderLast=false
10,74
12,76
12,76
12,76
12,76
10,74
10,74
cSet.setConcept(this),cSet.setConceptSet(this)
cSet.setConcept(this),cSet.setConceptSet(this)
cSet.getConcept(),cSet.getConceptSet()
cSet.getConcept(),cSet.getConceptSet()
1,33
1,33
1,33
4,36
Context.getProviderService().getAllProviderAttributeTypes(false),Context.getProviderService().getAllProviderAttributeTypes(true)
Context.getProviderService().getAllProviderAttributeTypes(false),Context.getProviderService().getAllProviderAttributeTypes(true)
order.getInstructions(),order.getDosingInstructions()
order.getInstructions(),order.getDosingInstructions()
"/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Throwable {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException(""This method can only be called from the TimerSchedulerTask class, not "" + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } ","/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Exception {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException(""This method can only be called from the TimerSchedulerTask class, not "" + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } "
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Throwable exceptionThrown=null; ,/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Exception exceptionThrown=null; 
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Throwable getExceptionThrown(){   return exceptionThrown; } ,/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Exception getExceptionThrown(){   return exceptionThrown; } 
Throwable t,Exception t
Throwable ex,Exception ex
Throwable ex,Exception ex
Throwable t,Exception t
Throwable e,Exception e
"/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage(""Unable to start module"",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal(""Unable to refresh the spring application context.  Root Cause was:"",rootCause);       }  else {         log.fatal(""Unable to refresh the spring application context. Unloading all modules,  Error was:"",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace(""Unable to shutdown module:"" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),""Got an error while starting a mandatory module: "" + e.getMessage() + "". Check the server logs for more information"");       } catch (      Throwable t2) {         log.warn(""caught another error: "",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } ","/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage(""Unable to start module"",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal(""Unable to refresh the spring application context.  Root Cause was:"",rootCause);       }  else {         log.fatal(""Unable to refresh the spring application context. Unloading all modules,  Error was:"",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace(""Unable to shutdown module:"" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),""Got an error while starting a mandatory module: "" + e.getMessage() + "". Check the server logs for more information"");       } catch (      Throwable t2) {         log.warn(""caught another error: "",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } "
Throwable t3,Exception t3
Throwable t2,Exception t2
Throwable ex,Exception ex
Throwable ex,Exception ex
Throwable t2,Exception t2
"assertEquals(2,possibleOutcomes.size())","assertEquals(4,possibleOutcomes.size())"
"assertEquals(2,possibleOutcomes.size())","assertEquals(4,possibleOutcomes.size())"
getConcept() != null || getConcept().getName() != null,getConcept() != null && getConcept().getName() != null
getConcept() != null || getConcept().getDescription() != null,getConcept() != null && getConcept().getDescription() != null
"Subqueries.gt(0L,subquery)","Subqueries.lt(0L,subquery)"
"Subqueries.gt(0L,subquery)","Subqueries.lt(0L,subquery)"
"""false"".equals(showRelationships)","""false"".equals(showRelationships) || result.hasErrors()"
"""false"".equals(showRelationships)","""false"".equals(showRelationships) || result.hasErrors()"
conceptToValidate.getConceptId(),conceptToValidate.getUuid()
conceptToValidate.getConceptId(),conceptToValidate.getUuid()
patientState.getState().getId(),patientState.getState().getUuid()
patientState.getState().getId(),patientState.getState().getUuid()
patientState.getState().getId(),patientState.getState().getUuid()
patientState.getState().getId(),patientState.getState().getUuid()
program.getProgramId(),program.getUuid()
program.getProgramId(),program.getUuid()
"assertEquals(2,conceptStopWords.size())","assertEquals(1,conceptStopWords.size())"
Context.getVisitService().getAllVisitTypes(true),Context.getVisitService().getAllVisitTypes()
Context.getVisitService().getAllVisitTypes(),Context.getVisitService().getAllVisitTypes(true)
Context.getVisitService().getAllVisitTypes(false),Context.getVisitService().getAllVisitTypes(true)
"log.error(error,cause)","log.info(error,cause)"
"log.error(error,cause)","log.info(error,cause)"
"Assert.assertEquals(3,providers.size())","Assert.assertEquals(4,providers.size())"
conceptAnswer.getConcept(),conceptAnswer.getAnswerConcept()
conceptAnswer.getConcept(),conceptAnswer.getAnswerConcept()
conceptAnswer.getConcept(),conceptAnswer.getAnswerConcept()
conceptAnswer.getConcept(),conceptAnswer.getAnswerConcept()
conceptAnswer.getConcept(),conceptAnswer.getAnswerConcept()
conceptAnswer.getConcept(),conceptAnswer.getAnswerConcept()
Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()),!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()),!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
"log.error(error,cause)","log.info(error,cause)"
"log.error(error,cause)","log.info(error,cause)"
Integer.class,Program.class
"new CustomChangeException(""Failed to insert one or more concept map types"")","new CustomChangeException(""Failed to insert one or more concept map types"",be)"
"new CustomChangeException(""Failed to insert one or more concept map types"")","new CustomChangeException(""Failed to insert one or more concept map types"",be)"
"new CustomChangeException(""Failed to insert one or more concept map types"")","new CustomChangeException(""Failed to insert one or more concept map types"",be)"
"/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; ","/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; "
"/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } ","/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } "
(Integer)criteria.uniqueResult(),(Long)criteria.uniqueResult()
"/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; ","/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; "
"/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } ","/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } "
(Integer)criteria.uniqueResult(),(Long)criteria.uniqueResult()
Thread.sleep(600),Thread.sleep(2500)
Thread.sleep(1200),Thread.sleep(2500)
page=TESTING_AUTHENTICATION_SETUP,page=DATABASE_TABLES_AND_USER
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem),codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem),codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
"className.indexOf(""org.openmrs."")","className.lastIndexOf(""org.openmrs."")"
"className.indexOf(""org.openmrs."")","className.lastIndexOf(""org.openmrs."")"
"className.indexOf(""org.openmrs."")","className.lastIndexOf(""org.openmrs."")"
"className.indexOf(""org.openmrs."")","className.lastIndexOf(""org.openmrs."")"
"log.debug(""PID contains identifier with no assigning authority"")","log.error(""PID contains identifier with no assigning authority"")"
"log.debug(""PID contains identifier with no assigning authority"")","log.error(""PID contains identifier with no assigning authority"")"
"log.debug(""PID contains identifier with no assigning authority"")","log.error(""PID contains identifier with no assigning authority"")"
"log.debug(""PID contains identifier with no assigning authority"")","log.error(""PID contains identifier with no assigning authority"")"
person.getVoidReason(),person.getPersonVoidReason()
person.getVoidReason(),person.getPersonVoidReason()
person.getVoidReason(),person.getPersonVoidReason()
person.getVoidReason(),person.getPersonVoidReason()
args.length > 1,args.length > 1 && args[1] instanceof String
args.length > 1,args.length > 1 && args[1] instanceof String
-120,-121
-120,-121
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
"new BindException(concept,""concept"")","new BindException(newConcept,""concept"")"
StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer),StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)
StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer),StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)
"controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),""Save User"",""pass123"",""pass123"",new String[0],user,new BindException(user,""user""))","controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),""Save User"",""pass123"",""pass123"",new String[0],""true"",user,new BindException(user,""user""))"
"controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),""Save User"",""pass123"",""pass123"",new String[0],user,new BindException(user,""user""))","controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),""Save User"",""pass123"",""pass123"",new String[0],""true"",user,new BindException(user,""user""))"
"pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)","pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)"
"pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)","pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)"
ModuleFactory.stopModule(mod),"ModuleFactory.stopModule(mod,true,true)"
ModuleFactory.stopModule(mod),"ModuleFactory.stopModule(mod,true,true)"
Context.getAdministrationService().saveGlobalProperty(coreProp),Context.getAdministrationService().saveGlobalProperty(propToUpdate)
Context.getAdministrationService().saveGlobalProperty(coreProp),Context.getAdministrationService().saveGlobalProperty(propToUpdate)
"methodName.startsWith(""save"")","methodName.startsWith(""save"") || methodName.startsWith(""create"") || methodName.startsWith(""update"")"
ps.createRelationship(rel),ps.saveRelationship(rel)
ps.createRelationship(rel),ps.saveRelationship(rel)
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId)),Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId)),Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
"methodName.startsWith(""save"")","methodName.startsWith(""save"") || methodName.startsWith(""create"") || methodName.startsWith(""update"")"
ps.createRelationship(rel),ps.saveRelationship(rel)
ps.createRelationship(rel),ps.saveRelationship(rel)
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId)),Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId)),Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
"Expression.eq(""searchable"",format)","Expression.eq(""searchable"",searchable)"
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS),Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS),Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
"Expression.eq(""searchable"",format)","Expression.eq(""searchable"",searchable)"
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS),Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS),Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST),"getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"""")"
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST),"getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"""")"
patientExitObs != null,patientExitObs != null && patientExitObs.size() > 0
patientExitObs != null,patientExitObs != null && patientExitObs.size() > 0
value.isEmpty(),"value.equals("""")"
value.isEmpty(),"value.equals("""")"
order.isCurrent(),order.isCurrent() || order.isFuture()
order.isCurrent(),order.isCurrent() || order.isFuture()
request.getLocalAddr(),request.getRemoteAddr()
request.getLocalAddr(),request.getRemoteAddr()
request.getLocalAddr(),request.getRemoteAddr()
request.getLocalAddr(),request.getRemoteAddr()
names[2],names[0]
names[2],names[0]
allowedIdentifiersCheckDigits[i],allowedIdentifiersCheckDigitsInts[i]
allowedIdentifiersCheckDigits[i],allowedIdentifiersCheckDigitsInts[i]
Context.getEncounterService().createEncounter(encounter),Context.getEncounterService().saveEncounter(encounter)
Context.getEncounterService().createEncounter(encounter),Context.getEncounterService().saveEncounter(encounter)
Context.getEncounterService().createEncounter(encounter),Context.getEncounterService().saveEncounter(encounter)
Context.getEncounterService().createEncounter(encounter),Context.getEncounterService().saveEncounter(encounter)
encounter.getObsAtTopLevel(false),encounter.getObsAtTopLevel(true)
encounter.getObsAtTopLevel(false),encounter.getObsAtTopLevel(true)
dateOfBirth == null,dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
dateOfBirth == null,dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
dateOfBirth == null,dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
dateOfBirth == null,dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
username.length(),systemId.length()
username.length(),systemId.length()
username.length(),systemId.length()
username.length(),systemId.length()
user.getSystemId() == null,"user.getSystemId() == null || user.getSystemId().equals("""")"
user.getSystemId() == null,"user.getSystemId() == null || user.getSystemId().equals("""")"
user.getSystemId() == null,"user.getSystemId() == null || user.getSystemId().equals("""")"
user.getSystemId() == null,"user.getSystemId() == null || user.getSystemId().equals("""")"
E extends Model,T extends Model
E extends Model,T extends Model
typeSerializer.getClass(),typeSerializer.getDeserializedType()
typeSerializer.getClass(),typeSerializer.getDeserializedType()
tableInfo.getType(),field.getType()
tableInfo.getType(),field.getType()
typeSerializer.getClass(),typeSerializer.getDeserializedType()
typeSerializer.getClass(),typeSerializer.getDeserializedType()
tableInfo.getType(),field.getType()
tableInfo.getType(),field.getType()
mTableInfo.getTableName(),Cache.getTableName(type)
Exception exception,T exception
? extends Exception,? extends T
? extends Exception,? extends T
? extends Exception,? extends T
Exception exception,T exception
Exception exception,T exception
Exception exception,T exception
? extends Exception,? extends T
? extends Exception,? extends T
? extends Exception,? extends T
Exception exception,T exception
Exception exception,T exception
status == 400,status == 404
"GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)","GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)"
1,33
1,33
9,41
9,41
9,41
1,33
9,41
9,41
9,41
1,33
GenericIntegrationTest.class,BodyAvailabilityTest.class
0,0
0,0
"doMethod(""GET"",""/books/"" + bookId,null)","getResponse(""GET"",""/books/"" + bookId,null)"
"doMethod(""GET"",""/books/"" + bookId,null)","getResponse(""GET"",""/books/"" + bookId,null)"
is.read(data),is.read(buffer)
new File(value).getPath(),new File(value).toPath()
new File(value).getPath(),new File(value).toPath()
new AnnotationNode(),"new AnnotationNode(desc,true)"
t.st == ST.LABEL,t != null && t.st == ST.LABEL
in.readShortx(),in.readUShortx()
in.readShortx(),in.readUShortx()
"new File(FilenameUtils.getBaseName(file) + ""_dex2jar.jar"")","new File(dex.getParentFile(),FilenameUtils.getBaseName(file) + ""_dex2jar.jar"")"
t3.getSize(),t3.getSort()
t3.getSize(),t3.getSort()
Type.LONG_TYPE.equals(typeInStack),Type.LONG_TYPE.equals(typeInStack) || Type.DOUBLE_TYPE.equals(typeInStack)
fragUtils.getClass(),fragUtils.fragmentType()
fragUtils.getClass(),fragUtils.fragmentType()
Object.class,String.class
Object.class,String.class
"field.set(instanceRef,value)","field.set(instance,value)"
InterruptedException e,Exception e
InterruptedException e,Exception e
"createService(apiKey,apiSecret,callback,defaultScope,responseType,userAgent,httpClientConfig,httpClient)","createService(apiKey,apiSecret,callback,defaultScope,responseType,null,userAgent,httpClientConfig,httpClient)"
"RequestBody.create(mediaType,(byte[])bodyContents)","RequestBody.create((byte[])bodyContents,mediaType)"
"RequestBody.create(mediaType,(String)bodyContents)","RequestBody.create((String)bodyContents,mediaType)"
"RequestBody.create(mediaType,(File)bodyContents)","RequestBody.create((File)bodyContents,mediaType)"
"ResponseBody.create(MediaType.get(""text/plain""),new byte[0])","ResponseBody.create(new byte[0],MediaType.get(""text/plain""))"
"ResponseBody.create(MediaType.get(""text/plain""),new byte[0])","ResponseBody.create(new byte[0],MediaType.get(""text/plain""))"
"ResponseBody.create(MediaType.get(""text/plain""),new byte[0])","ResponseBody.create(new byte[0],MediaType.get(""text/plain""))"
"final string clientSecret=""your client secret""; ","final String clientSecret=""your client secret""; "
1,0
1,0
1,0
1,0
0,2
"String.format(SCOPED_AUTHORIZE_URL,formURLEncode(config.getCallback()),formURLEncode(config.getScope()))","String.format(SCOPED_AUTHORIZE_URL,config.getApiKey(),formURLEncode(config.getCallback()),formURLEncode(config.getScope()))"
key.equals(OAuthConstants.SCOPE),!key.equals(OAuthConstants.SCOPE)
messageHandler.serverResponder(),messageHandler.responder()
messageHandler.serverResponder(),messageHandler.responder()
rSocketMessageHandler.serverResponder(),rSocketMessageHandler.responder()
rSocketMessageHandler.serverResponder(),rSocketMessageHandler.responder()
messageHandler.serverResponder(),messageHandler.responder()
messageHandler.serverResponder(),messageHandler.responder()
rSocketMessageHandler.serverResponder(),rSocketMessageHandler.responder()
rSocketMessageHandler.serverResponder(),rSocketMessageHandler.responder()
0,1
0,1
0,1
0,1
0,1
0,1
"this.contextRunner.withUserConfiguration(TestSecurityConfiguration.class,JwtDecoderConfiguration.class)",this.contextRunner.withUserConfiguration(JwtDecoderConfiguration.class)
entry.getValue().health().compose(this.timeoutCompose),entry.getValue().health().transformDeferred(this.timeoutCompose)
entry.getValue().health().compose(this.timeoutCompose),entry.getValue().health().transformDeferred(this.timeoutCompose)
"chain.filter(exchange).compose((call) -> filter(exchange,call))","chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
"chain.filter(exchange).compose((call) -> filter(exchange,call))","chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
entry.getValue().health().compose(this.timeoutCompose),entry.getValue().health().transformDeferred(this.timeoutCompose)
entry.getValue().health().compose(this.timeoutCompose),entry.getValue().health().transformDeferred(this.timeoutCompose)
"chain.filter(exchange).compose((call) -> filter(exchange,call))","chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
"chain.filter(exchange).compose((call) -> filter(exchange,call))","chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
messageHandler.serverAcceptor(),messageHandler.serverResponder()
messageHandler.serverAcceptor(),messageHandler.serverResponder()
rSocketMessageHandler.serverAcceptor(),rSocketMessageHandler.serverResponder()
rSocketMessageHandler.serverAcceptor(),rSocketMessageHandler.serverResponder()
Pattern.compile(CURRENT_DIR),"Pattern.compile(CURRENT_DIR,Pattern.LITERAL)"
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(1),assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(2)
exchange.getResponse().writeWith(Mono.empty()),exchange.getResponse().setComplete()
exchange.getResponse().writeWith(Mono.empty()),exchange.getResponse().setComplete()
UndertowServletWebServer.class,UndertowWebServer.class
UndertowServletWebServer.class,UndertowWebServer.class
new JmxEndpointProperties(this.environment),new JmxEndpointProperties()
10,8
10,8
this.logFactory,this.loggerContext
this.logFactory,this.loggerContext
"Assert.notNull(groupId,""ArtifactId must not be null"")","Assert.notNull(artifactId,""ArtifactId must not be null"")"
"Assert.notNull(groupId,""ArtifactId must not be null"")","Assert.notNull(artifactId,""ArtifactId must not be null"")"
FilterRegistrationBean.class,AbstractFilterRegistrationBean.class
manager != null,manager != null && manager.server != null
manager != null,manager != null && manager.server != null
!ElementsParser.isAlphaNumeric(ch2),ElementsParser.isAlphaNumeric(ch2)
"EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.TERADATA)","EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.SAP,DatabaseDriver.TERADATA)"
String pattern=this.prefix; ,StringBuilder pattern=new StringBuilder(this.prefix); 
StringBuffer pattern=new StringBuffer(this.prefix); ,StringBuilder pattern=new StringBuilder(this.prefix); 
String pattern=this.prefix; ,StringBuffer pattern=new StringBuffer(this.prefix); 
1,0
"deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))","deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
"deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))","deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
"deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))","deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
"deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))","deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
assertThat(context).getBeans(HandlerMapping.class).hasSize(7),assertThat(context).getBeans(HandlerMapping.class).hasSize(5)
(BeanDefinitionRegistry)context,(BeanDefinitionRegistry)beanFactory
(BeanDefinitionRegistry)context,(BeanDefinitionRegistry)beanFactory
1,0
1024,1025
1,0
1,0
1024,1025
1024,1025
1024,1025
1,0
1,0
1024,1025
1024,1025
1,0
8,0
9,8
1,0
4,0
1,0
1024,1025
return true; ,return false; 
getSessionTimeout().toMinutes(),getSessionTimeout().getSeconds()
getSessionTimeout().toMinutes(),getSessionTimeout().getSeconds()
1,0
assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON),"assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON,MediaType.parseMediaType(MediaTypes.HAL_JSON_VALUE + "";charset=UTF-8""))"
1,0
Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose)),Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))
Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose)),Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))
registrar.checkExisting(metric),registrar.checkExisting(added)
registrar.checkExisting(metric),registrar.checkExisting(added)
"defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))","defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))"
"defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))","defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))"
"defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))","defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))"
"defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))","defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))"
size() >= this.capacity,size() > this.capacity
DEFAULT_CAPACITY=4000,DEFAULT_CAPACITY=1000
strategiesBuilder::messageReader,strategiesBuilder::customMessageReader
strategiesBuilder::messageWriter,strategiesBuilder::customMessageWriter
adapter.getArgumentResolvers(),adapter.getCustomArgumentResolvers()
adapter.getArgumentResolvers(),adapter.getCustomArgumentResolvers()
this.thrown.equals(IllegalStateException.class),this.thrown.expect(IllegalStateException.class)
this.thrown.equals(IllegalStateException.class),this.thrown.expect(IllegalStateException.class)
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
this.thrown.equals(IllegalStateException.class),this.thrown.expect(IllegalStateException.class)
this.thrown.equals(IllegalStateException.class),this.thrown.expect(IllegalStateException.class)
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must not be null"")","this.thrown.expectMessage(""File must not be null"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
"this.thrown.equals(""File must exist"")","this.thrown.expectMessage(""File must exist"")"
SpringApplication.class,SpringBootVersion.class
"Assert.notNull(jarScanner,""Patterns must not be null"")","Assert.notNull(patterns,""Patterns must not be null"")"
"Assert.notNull(jarScanner,""Patterns must not be null"")","Assert.notNull(patterns,""Patterns must not be null"")"
ImportAutoConfigurationWithItemsOne.class,ImportAutoConfigurationWithItemsTwo.class
@UnrelatedOne,@UnrelatedTwo
ImportAutoConfigurationWithItemsOne.class,ImportAutoConfigurationWithItemsTwo.class
@UnrelatedOne,@UnrelatedTwo
"AnnotatedElementUtils.isAnnotated(type,Validated.class)","AnnotatedElementUtils.hasAnnotation(type,Validated.class)"
"AnnotatedElementUtils.isAnnotated(type,Validated.class)","AnnotatedElementUtils.hasAnnotation(type,Validated.class)"
/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Long autoCommitInterval; ,/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Integer autoCommitInterval; 
public Long getAutoCommitInterval(){   return this.autoCommitInterval; } ,public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } 
Long autoCommitInterval,Integer autoCommitInterval
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123L),assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123)
1,0
1,0
"auth.inMemoryAuthentication().withUser(""admin"").password(""admin"").roles(""ADMIN"",""USER"")","auth.inMemoryAuthentication().withUser(""admin"").password(""admin"").roles(""ADMIN"",""USER"",""ACTUATOR"")"
"this.cli.jar(""secure.groovy"")","this.cli.jar(""secure.groovy"",""data-jpa.groovy"")"
0,1
0,1
SpringBootWebSecurityConfiguration.class,SecurityAutoConfiguration.class
assertThat(ds.getValidationInterval()).isEqualTo(30000L),assertThat(ds.getValidationInterval()).isEqualTo(3000L)
"Arrays.asList(""spring-boot-starter-jetty-"",""jetty-continuation"",""jetty-util-"",""javax.servlet-"",""jetty-io-"",""jetty-http-"",""jetty-server-"",""jetty-security-"",""jetty-servlet-"",""jetty-servlets"",""jetty-webapp-"",""websocket-api"",""javax.annotation-api"",""jetty-plus"",""javax-websocket-server-impl-"",""asm-"",""javax.websocket-api-"",""asm-tree-"",""asm-commons-"",""websocket-common-"",""jetty-annotations-"",""javax-websocket-client-impl-"",""websocket-client-"",""websocket-server-"",""jetty-xml-"",""websocket-servlet-"")","Arrays.asList(""spring-boot-starter-jetty-"",""jetty-continuation"",""jetty-util-"",""javax.servlet-"",""jetty-io-"",""jetty-http-"",""jetty-server-"",""jetty-security-"",""jetty-servlet-"",""jetty-servlets"",""jetty-webapp-"",""websocket-api"",""javax.annotation-api"",""jetty-plus"",""javax-websocket-server-impl-"",""apache-el"",""asm-"",""javax.websocket-api-"",""asm-tree-"",""asm-commons-"",""websocket-common-"",""jetty-annotations-"",""javax-websocket-client-impl-"",""websocket-client-"",""websocket-server-"",""jetty-xml-"",""websocket-servlet-"")"
MockReset.before(),MockReset.after()
MockReset.before(),MockReset.after()
"mock(ExampleService.class,MockReset.before())",mock(ExampleService.class)
MockReset.before(),MockReset.after()
MockReset.before(),MockReset.after()
"mock(ExampleService.class,MockReset.before())",mock(ExampleService.class)
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1),assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2)
ObjectMapper.class,Gson.class
"Arrays.asList(""spring-boot-starter-tomcat-"",""tomcat-embed-core-"",""tomcat-embed-el-"",""tomcat-embed-logging-juli-"",""tomcat-embed-websocket-"")","Arrays.asList(""spring-boot-starter-tomcat-"",""tomcat-embed-core-"",""tomcat-embed-el-"",""tomcat-embed-websocket-"")"
"Arrays.asList(""/css/**"",""/js/**"",""/images/**"",""/**/favicon.ico"")","Arrays.asList(""/css/**"",""/js/**"",""/images/**"",""/webjars/**"",""/**/favicon.ico"")"
assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(5),assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(6)
string.length() >= 0,string.length() > 0
string.length() >= 0,string.length() > 0
1024,1025
1024,1025
0,1
0,1
0,1
0,1
0,1
0,1
0,1
0,1
"Assert.notNull(""No cache with name '"" + cacheName + ""' found."")","Assert.notNull(cache,""No cache with name '"" + cacheName + ""' found."")"
"Assert.notNull(""No cache with name '"" + cacheName + ""' found."")","Assert.notNull(cache,""No cache with name '"" + cacheName + ""' found."")"
getSslStoreProvider().getKeyStore(),getSslStoreProvider().getTrustStore()
getSslStoreProvider().getKeyStore(),getSslStoreProvider().getTrustStore()
config.getMaxRedirects(),clusterProperties.getMaxRedirects()
config.getMaxRedirects(),clusterProperties.getMaxRedirects()
config.getMaxRedirects(),clusterProperties.getMaxRedirects()
config.getMaxRedirects(),clusterProperties.getMaxRedirects()
2,4
entry.getName().startsWith(BOOT_INF_CLASSES),entry.getName().equals(BOOT_INF_CLASSES)
entry.getName().startsWith(BOOT_INF_CLASSES),entry.getName().equals(BOOT_INF_CLASSES)
IllegalStateException ex,Exception ex
SampleCacheApplication.class,CacheManagerCheck.class
SampleCacheApplication.class,CacheManagerCheck.class
"Arrays.asList(""spring-boot-starter-jetty-"",""jetty-continuation"",""jetty-util-"",""javax.servlet-"",""jetty-io-"",""jetty-http-"",""jetty-server-"",""jetty-security-"",""jetty-servlet-"",""jetty-servlets"",""jetty-webapp-"",""websocket-api"",""javax.annotation-api"",""jetty-plus"",""javax-websocket-server-impl-"",""asm-"",""javax.websocket-api-"",""asm-tree-"",""asm-commons-"",""websocket-common-"",""jetty-annotations-"",""javax-websocket-client-impl-"",""websocket-client-"",""websocket-server-"",""jetty-jndi-"",""jetty-xml-"",""websocket-servlet-"")","Arrays.asList(""spring-boot-starter-jetty-"",""jetty-continuation"",""jetty-util-"",""javax.servlet-"",""jetty-io-"",""jetty-http-"",""jetty-server-"",""jetty-security-"",""jetty-servlet-"",""jetty-servlets"",""jetty-webapp-"",""websocket-api"",""javax.annotation-api"",""jetty-plus"",""javax-websocket-server-impl-"",""asm-"",""javax.websocket-api-"",""asm-tree-"",""asm-commons-"",""websocket-common-"",""jetty-annotations-"",""javax-websocket-client-impl-"",""websocket-client-"",""websocket-server-"",""jetty-xml-"",""websocket-servlet-"")"
factory.getProxy(),factory.getProxy(getClass().getClassLoader())
0,4
0,4
1,0
1,0
getParser().parse(args),getParser().parse(argsToUse)
"assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())","assertEquals(3,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
"assertEquals(1,this.context.getBean(FilterChainProxy.class).getFilterChains().size())","assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
new Thread(),new Thread(shutdownHandler)
1,0
SocketUtils.findAvailableTcpPort(40000),SocketUtils.findAvailableTcpPort(41000)
"mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))","mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))"
"mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))","mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))"
"this.loggingSystem.initialize(null,null)","this.loggingSystem.initialize(this.initializationContext,null,null)"
NoClassDefFoundError ex,LinkageError ex
ignoreUnknownFields=false,ignoreUnknownFields=true
"new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider)","new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider,null)"
Metric<Integer>,Metric<Long>
Metric<Long>,Metric<Integer>
Metric<Integer>,Metric<Long>
Metric<Long>,Metric<Integer>
"@ConditionalOnEnablednHealthIndicator(""db"")","@ConditionalOnEnabledHealthIndicator(""db"")"
"@ConditionalOnEnablednHealthIndicator(""mongo"")","@ConditionalOnEnabledHealthIndicator(""mongo"")"
"@ConditionalOnEnablednHealthIndicator(""redis"")","@ConditionalOnEnabledHealthIndicator(""redis"")"
"@ConditionalOnEnablednHealthIndicator(""rabbit"")","@ConditionalOnEnabledHealthIndicator(""rabbit"")"
"@ConditionalOnEnablednHealthIndicator(""solr"")","@ConditionalOnEnabledHealthIndicator(""solr"")"
"@ConditionalOnEnablednHealthIndicator(""diskspace"")","@ConditionalOnEnabledHealthIndicator(""diskspace"")"
"@ConditionalOnEnablednHealthIndicator(""mail"")","@ConditionalOnEnabledHealthIndicator(""mail"")"
"@ConditionalOnEnablednHealthIndicator(""jms"")","@ConditionalOnEnabledHealthIndicator(""jms"")"
"@ConditionalOnEnablednHealthIndicator(""elasticsearch"")","@ConditionalOnEnabledHealthIndicator(""elasticsearch"")"
ConditionalOnEnablednHealthIndicator.class,ConditionalOnEnabledHealthIndicator.class
"@ConditionalOnEnablednHealthIndicator(""db"")","@ConditionalOnEnabledHealthIndicator(""db"")"
"@ConditionalOnEnablednHealthIndicator(""mongo"")","@ConditionalOnEnabledHealthIndicator(""mongo"")"
"@ConditionalOnEnablednHealthIndicator(""redis"")","@ConditionalOnEnabledHealthIndicator(""redis"")"
"@ConditionalOnEnablednHealthIndicator(""rabbit"")","@ConditionalOnEnabledHealthIndicator(""rabbit"")"
"@ConditionalOnEnablednHealthIndicator(""solr"")","@ConditionalOnEnabledHealthIndicator(""solr"")"
"@ConditionalOnEnablednHealthIndicator(""diskspace"")","@ConditionalOnEnabledHealthIndicator(""diskspace"")"
"@ConditionalOnEnablednHealthIndicator(""mail"")","@ConditionalOnEnabledHealthIndicator(""mail"")"
"@ConditionalOnEnablednHealthIndicator(""jms"")","@ConditionalOnEnabledHealthIndicator(""jms"")"
"@ConditionalOnEnablednHealthIndicator(""elasticsearch"")","@ConditionalOnEnabledHealthIndicator(""elasticsearch"")"
ConditionalOnEnablednHealthIndicator.class,ConditionalOnEnabledHealthIndicator.class
"new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)","new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)"
"new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)","new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)"
"new DefaultPropertyNamePatternsMatcher(delimeters,""aaa"",""bbbb"",""ccccc"")","new DefaultPropertyNamePatternsMatcher(delimiters,""aaa"",""bbbb"",""ccccc"")"
"new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)","new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)"
"new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)","new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)"
"new DefaultPropertyNamePatternsMatcher(delimeters,""aaa"",""bbbb"",""ccccc"")","new DefaultPropertyNamePatternsMatcher(delimiters,""aaa"",""bbbb"",""ccccc"")"
new JSONObject(),new JSONOrderedObject()
26,24
beanFactory.getBeanNamesForType(CacheAspectSupport.class),"beanFactory.getBeanNamesForType(CacheAspectSupport.class,false,false)"
Ordered.HIGHEST_PRECEDENCE + 11,Ordered.HIGHEST_PRECEDENCE + 20
equalTo(6),equalTo(5)
HornetQAutoConfiguration.class,HornetQEmbeddedConfigurationFactory.class
HornetQAutoConfiguration.class,HornetQEmbeddedConfigurationFactory.class
CachingConnectionFactory connectionFactory,ConnectionFactory connectionFactory
"RedisOperations<Object,Object>","RedisTemplate<Object,Object>"
"assertThat(cli.getErrorOutput().length(),equalTo(0))","assertThat(""Unexpected error: \n"" + cli.getErrorOutput(),cli.getErrorOutput().length(),equalTo(0))"
status().isMovedTemporarily(),status().isFound()
status().isMovedTemporarily(),status().isFound()
status().isMovedTemporarily(),status().isFound()
status().isMovedTemporarily(),status().isFound()
"getSsl(ClientAuth.NEED,""password"",""src/test/resources/test.jks"")","getSsl(ClientAuth.NEED,""password"",""src/test/resources/test.jks"",""src/test/resources/test.jks"")"
1,9
ApplicationPidFileWriter.class,EmbeddedServerPortFileWriter.class
"/**   * SSH port.  */ private String port=""2000""; ",/**   * SSH port.  */ private Integer port=2000; 
public String getPort(){   return this.port; } ,public Integer getPort(){   return this.port; } 
"/**   * Telnet port.  */ private String port=""5000""; ",/**   * Telnet port.  */ private Integer port=5000; 
public String getPort(){   return this.port; } ,public Integer getPort(){   return this.port; } 
0,1
"assertEquals(2,map.size())","assertEquals(3,map.size())"
"assertEquals(2,map.size())","assertEquals(1,map.size())"
"Arrays.asList(""spring-boot-starter-tomcat-"",""tomcat-embed-core-"",""tomcat-embed-el-"",""tomcat-embed-logging-juli-"")","Arrays.asList(""spring-boot-starter-tomcat-"",""tomcat-embed-core-"",""tomcat-embed-el-"",""tomcat-embed-logging-juli-"",""tomcat-embed-websocket-"")"
this.logger.isWarnEnabled(),this.logger.isDebugEnabled()
this.logger.isWarnEnabled(),this.logger.isDebugEnabled()
"julLogger.info(""Hello world"")","julLogger.severe(""Hello world"")"
"julLogger.info(""Hello world"")","julLogger.severe(""Hello world"")"
"julLogger.info(""Hello world"")","julLogger.severe(""Hello world"")"
"julLogger.info(""Hello world"")","julLogger.severe(""Hello world"")"
new InMemoryMessageRespository(),new InMemoryMessageRepository()
Exception ex,Throwable ex
Exception exception,Throwable exception
Cloud.class,CloudScanConfiguration.class
"assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())","assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
"assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())","assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
this.healthMvcEndpointProperties.getMapping() != null,this.healthMvcEndpointProperties.getMapping() != null && this.healthMvcEndpointProperties.getMapping().size() > 0
return faceBookProperties; ,return facebookProperties; 
logger.error(message),"logger.error(message,ex)"
DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE),"DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,JavaScopes.RUNTIME)"
pubSubDomain=true,pubSubDomain=false
assertTrue(jmsTemplate.isPubSubDomain()),assertFalse(jmsTemplate.isPubSubDomain())
assertTrue(jmsTemplate.isPubSubDomain()),assertFalse(jmsTemplate.isPubSubDomain())
assertFalse(jmsTemplate.isPubSubDomain()),assertTrue(jmsTemplate.isPubSubDomain())
assertFalse(jmsTemplate.isPubSubDomain()),assertTrue(jmsTemplate.isPubSubDomain())
jmsTemplate.setPubSubDomain(false),jmsTemplate.setPubSubDomain(true)
"logger.info(""Adding PropertySource: "" + source + "" in group: ""+ basename)","logger.trace(""Adding PropertySource: "" + source + "" in group: ""+ basename)"
"logger.info(""Adding PropertySource: "" + source + "" in group: ""+ basename)","logger.trace(""Adding PropertySource: "" + source + "" in group: ""+ basename)"
"new SpringApplicationBuilder(SampleSecureApplication.class).properties(""security.basic.enabled=false"",""security.user.password=password"")","new SpringApplicationBuilder(SampleSecureApplication.class).properties(""security.user.password=password"")"
Ordered.LOWEST_PRECEDENCE - 20,Ordered.LOWEST_PRECEDENCE - 5
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcOperations namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } ,@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcTemplate namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
ErrorWrapperEmbeddedServletContainerFactory.class,ErrorPageFilter.class
private ErrorWrapperEmbeddedServletContainerFactory filter=new ErrorWrapperEmbeddedServletContainerFactory(); ,private ErrorPageFilter filter=new ErrorPageFilter(); 
"new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } ","new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.resourceLoader,this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } "
this.repositories.add(repository),"this.repositories.add(0,repository)"
"this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)","this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)"
"this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)","this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)"
Integer.MIN_VALUE + 11,Integer.MIN_VALUE + 9
"assertEquals(2,props.getConfigPathPatterns().length,2)","assertEquals(2,props.getConfigPathPatterns().length)"
"assertEquals(2,props.getDisabledPlugins().length,2)","assertEquals(2,props.getDisabledPlugins().length)"
compile.minus(provided),runtime.minus(provided)
compile.minus(provided),runtime.minus(provided)
"Outcome.match(""missing database driver "" + driverClassName)","Outcome.noMatch(""missing database driver "" + driverClassName)"
"Outcome.match(""missing database driver "" + driverClassName)","Outcome.noMatch(""missing database driver "" + driverClassName)"
IllegalArgumentException e,Exception e
IllegalArgumentException e,Exception e
isTestOnBorrow(),isTestOnReturn()
isTestOnBorrow(),isTestOnReturn()
isTestOnBorrow(),isTestOnReturn()
isTestOnBorrow(),isTestOnReturn()
"future.get(10,TimeUnit.SECONDS)","future.get(30,TimeUnit.SECONDS)"
"factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))","factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
"factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))","factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
"factory.getEmbdeddedServletContainer(initializers[0],initializers[1])","factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
"factory.getEmbdeddedServletContainer(initializers[0],initializers[1])","factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
"factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))","factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
"factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))","factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
"factory.getEmbdeddedServletContainer(initializers[0],initializers[1])","factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
"factory.getEmbdeddedServletContainer(initializers[0],initializers[1])","factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
factory.getEmbdeddedServletContainer(),factory.getEmbeddedServletContainer()
"AstUtils.hasLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")","AstUtils.hasAtLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")"
"AstUtils.hasLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")","AstUtils.hasAtLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")"
"AstUtils.hasLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")","AstUtils.hasAtLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")"
"AstUtils.hasLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")","AstUtils.hasAtLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")"
"AstUtils.hasLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")","AstUtils.hasAtLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")"
"AstUtils.hasLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")","AstUtils.hasAtLeastOneAnnotation(classNode,""MessageEndpoint"",""EnableIntegrationPatterns"")"
"AstUtils.hasLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")","AstUtils.hasAtLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")"
"AstUtils.hasLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")","AstUtils.hasAtLeastOneAnnotation(classNode,""Controller"",""EnableWebMvc"")"
InetAddress.getLocalHost(),"InetAddress.getByName(""127.0.0.1"")"
HashSet<String>,LinkedHashSet<String>
Ordered.LOWEST_PRECEDENCE - 1,Ordered.LOWEST_PRECEDENCE - 2
return 400; ,return 405; 
"BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class)","BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class,false,false)"
"clients.inMemory().withClient(""my-trusted-client"").authorizedGrantTypes(""password"",""authorization_code"",""refresh_token"",""implicit"").authorities(""ROLE_CLIENT"",""ROLE_TRUSTED_CLIENT"").scopes(""read"",""write"",""trust"").accessTokenValiditySeconds(60).additionalInformation(""foo:bar"",""spam:bucket"")","clients.inMemory().withClient(""my-trusted-client"").authorizedGrantTypes(""password"",""authorization_code"",""refresh_token"",""implicit"").authorities(""ROLE_CLIENT"",""ROLE_TRUSTED_CLIENT"").scopes(""read"",""write"",""trust"").accessTokenValiditySeconds(60).additionalInformation(""foo:bar"",""spam:bucket"",""crap"")"
LOG.isInfoEnabled(),LOG.isDebugEnabled()
LOG.isInfoEnabled(),LOG.isDebugEnabled()
"RequestTokenFactory.createOAuth2Request(null,""foo"",null,false,Collections.singleton(""ns_admin:read""),null,null,null)","RequestTokenFactory.createOAuth2Request(null,""foo"",null,false,Collections.singleton(""ns_admin:read""),null,null,null,null)"
"RequestTokenFactory.createOAuth2Request(null,""foo"",null,false,Collections.singleton(""ns_admin:read""),null,null,null)","RequestTokenFactory.createOAuth2Request(null,""foo"",null,false,Collections.singleton(""ns_admin:read""),null,null,null,null)"
getApprovalParameters(),getRequestParameters()
getApprovalParameters(),getRequestParameters()
redirectUri == null,context != null && redirectUri == null
"BeanMapper.mapList(books,Book.class,BookDto.class)","BeanMapper.mapList(books,BookDto.class)"
"BeanMapper.mapList(books,Book.class,BookDto.class)","BeanMapper.mapList(books,BookDto.class)"
"BeanMapper.mapList(books,Book.class,BookDto.class)","BeanMapper.mapList(books,BookDto.class)"
"taskDao.findByUserId(1L,new Sort(Direction.ASC,""id""))","taskDao.findByUserId(2L,new Sort(Direction.ASC,""id""))"
Threads.sleep(2000),Threads.sleep(3000)
"new PropertiesLoader(""classpath:/application.functional.properties"",""classpath:/application.functional-local.properties"")","new PropertiesLoader(""classpath:/application.properties"",""classpath:/application.functional.properties"",""classpath:/application.functional-local.properties"")"
"new PropertiesLoader(""classpath:/application.functional.properties"",""classpath:/application.functional-local.properties"")","new PropertiesLoader(""classpath:/application.properties"",""classpath:/application.functional.properties"",""classpath:/application.functional-local.properties"")"
"new PropertiesLoader(""classpath:/application.functional.properties"",""classpath:/application.functional-local.properties"")","new PropertiesLoader(""classpath:/application.properties"",""classpath:/application.functional.properties"",""classpath:/application.functional-local.properties"")"
applicationStatistics.incrUpdateUserTimes(),applicationStatistics.incrListUserTimes()
applicationStatistics.incrUpdateUserTimes(),applicationStatistics.incrListUserTimes()
!type.isInterface(),type.isInterface()
1,0
1,0
2,0
importedClassIndex.isEmpty(),!importedClassIndex.isEmpty()
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
"javaWriter.emitSingleLineCOmment(""foo"")","javaWriter.emitSingleLineComment(""foo"")"
17,16
17,16
1,33
1,33
offset(1.0),offset(5.0)
offset(1.0),offset(5.0)
generator.generateX509Certificate(signedByKeyPair.getPrivate()),generator.generate(signedByKeyPair.getPrivate())
generator.generateX509Certificate(signedByKeyPair.getPrivate()),generator.generate(signedByKeyPair.getPrivate())
"assertEquals(512f,i,10f)","assertEquals(512f,i,20f)"
"assertEquals(512f,i,10f)","assertEquals(512f,i,20f)"
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
1,0
"executor.submit(new NamedRunnable(""OkHttp %s stream %d"",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s stream %d"",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s stream %d"",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s stream %d"",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )"
new DoubleInetAddressDns(),new SingleInetAddressDns()
new DoubleInetAddressDns(),new SingleInetAddressDns()
InetAddress.getLoopbackAddress(),"InetAddress.getByName(""localhost"")"
30 * 1000,60 * 1000
"""Content-Type"".equals(name)","""Content-Type"".equalsIgnoreCase(name)"
"""Content-Type"".equals(name)","""Content-Type"".equalsIgnoreCase(name)"
"""Content-Type"".equals(name)","""Content-Type"".equalsIgnoreCase(name)"
"""Content-Type"".equals(name)","""Content-Type"".equalsIgnoreCase(name)"
"executor.submit(new NamedRunnable(""OkHttp Window Update %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp Window Update %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp Window Update %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp Window Update %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s ping %08x%08x"",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s ping %08x%08x"",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s ping %08x%08x"",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s ping %08x%08x"",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s stream %d"",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s ACK Settings"",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s ACK Settings"",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )"
"executor.submit(new NamedRunnable(""OkHttp %s ACK Settings"",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )","executor.execute(new NamedRunnable(""OkHttp %s ACK Settings"",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Request[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Request[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Request[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Request[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Headers[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Headers[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Headers[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Headers[%s]"",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Data[%s]"",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Data[%s]"",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Data[%s]"",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Data[%s]"",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Reset[%s]"",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Reset[%s]"",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )"
"pushExecutor.submit(new NamedRunnable(""OkHttp %s Push Reset[%s]"",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )","pushExecutor.execute(new NamedRunnable(""OkHttp %s Push Reset[%s]"",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )"
"new MockResponse().setBody(""A"").setSocketPolicy(SHUTDOWN_INPUT_AT_END)","new MockResponse().setBody(""A"").setSocketPolicy(DISCONNECT_AT_END)"
"new MockResponse().setBody(""A"").setSocketPolicy(SHUTDOWN_INPUT_AT_END)","new MockResponse().setBody(""A"").setSocketPolicy(DISCONNECT_AT_END)"
17,1
"factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)","factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"
"factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)","factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"
"factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)","factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"
"factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)","factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"
"factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)","factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)"
"factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)","factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"
"factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)","factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"
"factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)","factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"
"factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)","factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"
"factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)","factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"
"factory.get(sResultClass,NO_ANNOTATIONS,retrofit)","factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"
"factory.get(sResultClass,NO_ANNOTATIONS,retrofit)","factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"
"factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)","factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)"
"factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)","factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)"
"assertThat(request.getBody().readUtf8()).isEqualTo(""<my-object><message>hello world</message><count>10</count></my-object>"")","assertThat(request.getBody().readUtf8()).isIn(""<my-object><message>hello world</message><count>10</count></my-object>"",""<my-object><count>10</count><message>hello world</message></my-object>"")"
"assertThat(request.getBody().readUtf8()).isEqualTo(""<my-object><message>hello world</message><count>10</count></my-object>"")","assertThat(request.getBody().readUtf8()).isIn(""<my-object><message>hello world</message><count>10</count></my-object>"",""<my-object><count>10</count><message>hello world</message></my-object>"")"
"new IllegalArgumentException(""Expected a proto but was: "" + body.mimeType())","new ConversionException(""Expected a proto but was: "" + body.mimeType())"
IllegalArgumentException e,ConversionException e
"new IllegalArgumentException(""Expected a proto but was: "" + body.mimeType())","new ConversionException(""Expected a proto but was: "" + body.mimeType())"
IllegalArgumentException e,ConversionException e
Endpoint server,Server server
0,8
0,8
containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class),containedToken.beginPosition()
containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class),containedToken.endPosition()
KBP_MINIMUM_SCORE=.445,KBP_MINIMUM_SCORE=.456
InputStream is=IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(languagePropertiesFile),BufferedReader is=IOUtils.readerFromString(languagePropertiesFile)
document.tokens().get(10),document.tokens().get(9)
"setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12450,12451.87)","setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12451.87,12451.87)"
ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.564,ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.563
labelProbsForToken.get(label) < entityLabelProbVals.get(label),entityLabelProbVals.containsKey(label) && labelProbsForToken.get(label) < entityLabelProbVals.get(label)
sentences.get(0).entityMentions() != null,sentences.size() > 0 && sentences.get(0).entityMentions() != null
xmlDocAnnotation.get(CoreAnnotations.TokensAnnotation.class).get(554),xmlDocAnnotation.get(CoreAnnotations.TokensAnnotation.class).get(543)
"assertEquals(15,tokens.size())","assertEquals(13,tokens.size())"
"assertEquals(12,tokens.size())","assertEquals(9,tokens.size())"
"assertEquals(12,tokens.size())","assertEquals(9,tokens.size())"
"assertEquals(12,tokens.size())","assertEquals(9,tokens.size())"
"Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)","Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class)"
"Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)","Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)"
"Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)","Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)"
"Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)","Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)"
uncompressedProto.length < 2560000,uncompressedProto.length < 2570000
uncompressedProto.length < 2550000,uncompressedProto.length < 2560000
"Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)","Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)"
"Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)","Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER,STANFORD_DEPENDENCIES)"
"Assert.assertEquals(""Recall outside target range"",0.6924,r,0.001)","Assert.assertEquals(""Recall outside target range"",0.691,r,0.001)"
uncompressedProto.length < 2500000,uncompressedProto.length < 2550000
initial(rand),initial(randToUse)
uncompressedProto.length < 2100000,uncompressedProto.length < 2500000
"log.warn(""Could not annotate via server! Trying to annotate locally..."",t)","log.err(""Could not annotate via server! Trying to annotate locally..."",t)"
"log.warn(""Could not annotate via server! Trying to annotate locally..."",t)","log.err(""Could not annotate via server! Trying to annotate locally..."",t)"
"Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class)","Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)"
"Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class)","Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)"
List<String>,List<Double>
Pattern.compile(foundAuthor),"Pattern.compile(foundAuthor,Pattern.LITERAL)"
sectionStartToken.word(),sectionStartTagToken.word()
sectionStartToken.word(),sectionStartTagToken.word()
sentencesFile == null,sentencesFile != null
"Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)","Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS)"
"annotatorImplementation.custom(inputProps,customName)","annotatorImplementation.custom(inputProps,property)"
KBP_MINIMUM_SCORE=45.30,KBP_MINIMUM_SCORE=.453
compressedProto.length < 390200,compressedProto.length < 391000
"setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)","setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)"
"setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,53.98)","setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)"
compressedProto.length < 390000,compressedProto.length < 390200
"new GrammaticalRelation(Language.UniversalChinese,""nummod"",""numeric modifier"",MODIFIER,""QP|NP|DP"",tregexCompiler,""NP|QP < ( QP  =target << M $++ NN|NP|QP)"",""NP|QP < ( DNP=target < (QP < CD !< OD) !< JJ|ADJP $++ NP|QP )"")","new GrammaticalRelation(Language.UniversalChinese,""nummod"",""numeric modifier"",MODIFIER,""QP|NP|DP"",tregexCompiler,""NP|QP < ( QP  =target << M $++ NN|NP|QP)"")"
"new GrammaticalRelation(Language.UniversalChinese,""amod:ordmod"",""ordinal numeric modifier"",ADJECTIVAL_MODIFIER,""NP|QP"",tregexCompiler,""NP < (QP=target < OD !< CLP)"",""NP|QP < ( DNP=target < (QP < OD !< CD) !< JJ|ADJP $++ NP|QP )"")","new GrammaticalRelation(Language.UniversalChinese,""amod:ordmod"",""ordinal numeric modifier"",ADJECTIVAL_MODIFIER,""NP|QP"",tregexCompiler,""NP < (QP=target < OD !< CLP)"")"
Character.isSpaceChar(origText.charAt(i)),Character.isWhitespace(origText.charAt(i))
Character.isSpaceChar(origText.charAt(i)),Character.isWhitespace(origText.charAt(i))
uncompressedProto.length < 1700000,uncompressedProto.length < 1800000
compressedProto.length < 340000,compressedProto.length < 380000
"setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.6,55.7)","setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.7,55.6)"
compressedProto.length < 330000,compressedProto.length < 340000
EnglishUdLas=84.9873,EnglishUdLas=88.72648417258083
"setAll(lowResults,highResults,expectedResults,MUC_TP,5965)","setLowHighExpected(lowResults,highResults,expectedResults,MUC_TP,5965,5970,5965)"
2,10
"dict.put(words[0],words[2])","dictionary.put(words[0],words[2])"
"dict.put(words[0],words[2])","dictionary.put(words[0],words[2])"
seenVertices.contains(startAncestor),seenVertices.contains(endAncestor)
"SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true,null)","SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true)"
VERBOSE=true,VERBOSE=false
return 0; ,return 1; 
gradHidden3[nodeIndex],gradHidden[nodeIndex]
uncompressedProto.length < 1000000,uncompressedProto.length < 1100000
toPreCompute.size(),preMap.size()
toPreCompute.size(),preMap.size()
new RuntimeIOException(e),"new RuntimeIOException(""No input file provided (use -parseFile)"",e)"
new RuntimeIOException(e),"new RuntimeIOException(""Error opening output file"",e)"
word=START_WORD,word=END_WORD
word=START_WORD,word=END_WORD
"First=word.substring(0,3)","first=word.substring(0,3)"
quoteMatcher.group(0),quoteMatcher.group(1)
wrapper.shutdownNow(),wrapper.joinWithTimeout()
wrapper.shutdownNow(),wrapper.joinWithTimeout()
"basicGraph.getShortestPath(root,t,true)","basicGraph.getShortestPath(root,t,false)"
incomingEdges.containsKey(source),incomingEdges.containsKey(dest)
"setUnknownLabels(binarized,mainLabel)","setUnknownLabels(collapsedUnary,mainLabel)"
packed[j],newPacked[j]
newState.score(),bestState.score()
newState.score(),bestState.score()
"clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class)","clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,String.class)"
new RuntimeException(),"new RuntimeException(""to length:"" + to.length + "" from length:""+ from.length)"
ArrayList<TaggedWord>,List<TaggedWord>
ArrayList<TaggedWord>,List<TaggedWord>
nodeString(),value()
nodeString(),value()
Generics.newHashMap(),Generics.newTreeMap()
Generics.newHashMap(),Generics.newTreeMap()
"endTrack(""main"")","endTracksTo(""main"")"
"endTrack(""main"")","endTracksTo(""main"")"
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()),Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()),Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
file.getAbsoluteFile(),file.getAbsolutePath()
file.getAbsoluteFile(),file.getAbsolutePath()
prevNerEndIndex != (start - 1) || nextNerStartIndex != end,prevNerEndIndex != (start - 1) && nextNerStartIndex != end
prevNerEndIndex != (start - 1) && nextNerStartIndex != end,prevNerEndIndex != (start - 1) || nextNerStartIndex != end
pieces.length <= wordColumn,pieces.length <= tagColumn
pieces.length <= wordColumn,pieces.length <= tagColumn
"setUnknownLabels(binarized,mainLabel)","setUnknownLabels(collapsedUnary,mainLabel)"
packed[j],newPacked[j]
newState.score(),bestState.score()
newState.score(),bestState.score()
"clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class)","clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,String.class)"
new RuntimeException(),"new RuntimeException(""to length:"" + to.length + "" from length:""+ from.length)"
ArrayList<TaggedWord>,List<TaggedWord>
ArrayList<TaggedWord>,List<TaggedWord>
incomingEdges.containsKey(source),incomingEdges.containsKey(dest)
nodeString(),value()
nodeString(),value()
Generics.newHashMap(),Generics.newTreeMap()
Generics.newHashMap(),Generics.newTreeMap()
"endTrack(""main"")","endTracksTo(""main"")"
"endTrack(""main"")","endTracksTo(""main"")"
"endTrack(""main"")","endTracksTo(""main"")"
"endTrack(""main"")","endTracksTo(""main"")"
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()),Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()),Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()),Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()),Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
file.getAbsoluteFile(),file.getAbsolutePath()
file.getAbsoluteFile(),file.getAbsolutePath()
file.getAbsoluteFile(),file.getAbsolutePath()
file.getAbsoluteFile(),file.getAbsolutePath()
prevNerEndIndex != (start - 1) || nextNerStartIndex != end,prevNerEndIndex != (start - 1) && nextNerStartIndex != end
prevNerEndIndex != (start - 1) || nextNerStartIndex != end,prevNerEndIndex != (start - 1) && nextNerStartIndex != end
prevNerEndIndex != (start - 1) && nextNerStartIndex != end,prevNerEndIndex != (start - 1) || nextNerStartIndex != end
prevNerEndIndex != (start - 1) && nextNerStartIndex != end,prevNerEndIndex != (start - 1) || nextNerStartIndex != end
"expectedCountsForADoc(weights,ind)","expectedCountsForADoc(weights,e4Update,ind)"
"expectedCountsForADoc(weights,ind)","expectedCountsForADoc(weights,e4Update,ind)"
"expectedCountsForADoc(weights,ind)","expectedCountsForADoc(weights,e4Update,ind)"
"expectedCountsForADoc(weights,ind)","expectedCountsForADoc(weights,e4Update,ind)"
new WordToSentenceProcessor<IN>(),new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)
new WordToSentenceProcessor<IN>(),new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)
"""GET"".equals(httpMethod)","""GET"".equalsIgnoreCase(httpMethod)"
"""GET"".equals(httpMethod)","""GET"".equalsIgnoreCase(httpMethod)"
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString())),this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString())),this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
new RefProperty(existing),new RefProperty(modelName)
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
additionalProperties.remove(DATE_FORMAT),"additionalProperties.put(DATE_FORMAT,defaultDateFormat)"
"(outputFolder + File.separator + apiFolder).replaceAll(""/"",File.separator)","(outputFolder + File.separator + apiFolder).replace(""/"",File.separator)"
"(outputFolder + File.separator + apiFolder).replaceAll(""/"",File.separator)","(outputFolder + File.separator + apiFolder).replace(""/"",File.separator)"
"(outputFolder + File.separator + modelFolder).replaceAll(""/"",File.separator)","(outputFolder + File.separator + modelFolder).replace(""/"",File.separator)"
"(outputFolder + File.separator + modelFolder).replaceAll(""/"",File.separator)","(outputFolder + File.separator + modelFolder).replace(""/"",File.separator)"
"Arrays.asList(""ErrorResponse"",""Response"",""Int"",""Int32"",""Int64"",""Int64"",""Float"",""Double"",""Bool"",""Void"",""String"",""Character"",""AnyObject"",""Any"",""Error"",""URL"",""class"",""Class"",""break"",""as"",""associativity"",""deinit"",""case"",""dynamicType"",""convenience"",""enum"",""continue"",""false"",""dynamic"",""extension"",""default"",""is"",""didSet"",""func"",""do"",""nil"",""final"",""import"",""else"",""self"",""get"",""init"",""fallthrough"",""Self"",""infix"",""internal"",""for"",""super"",""inout"",""let"",""if"",""true"",""lazy"",""operator"",""in"",""COLUMN"",""left"",""private"",""return"",""FILE"",""mutating"",""protocol"",""switch"",""FUNCTION"",""none"",""public"",""where"",""LINE"",""nonmutating"",""static"",""while"",""optional"",""struct"",""override"",""subscript"",""postfix"",""typealias"",""precedence"",""var"",""prefix"",""Protocol"",""required"",""right"",""set"",""Type"",""unowned"",""weak"")","Arrays.asList(""ErrorResponse"",""Response"",""Int"",""Int32"",""Int64"",""Int64"",""Float"",""Double"",""Bool"",""Void"",""String"",""Character"",""AnyObject"",""Any"",""Error"",""URL"",""class"",""Class"",""break"",""as"",""associativity"",""deinit"",""case"",""dynamicType"",""convenience"",""enum"",""continue"",""false"",""dynamic"",""extension"",""default"",""is"",""didSet"",""func"",""do"",""nil"",""final"",""import"",""else"",""self"",""get"",""init"",""fallthrough"",""Self"",""infix"",""internal"",""for"",""super"",""inout"",""let"",""if"",""true"",""lazy"",""operator"",""in"",""COLUMN"",""left"",""private"",""return"",""FILE"",""mutating"",""protocol"",""switch"",""FUNCTION"",""none"",""public"",""where"",""LINE"",""nonmutating"",""static"",""while"",""optional"",""struct"",""override"",""subscript"",""postfix"",""typealias"",""precedence"",""var"",""prefix"",""Protocol"",""required"",""right"",""set"",""Type"",""unowned"",""weak"",""Data"")"
getSwaggerType(swaggerModel.getAdditionalProperties()),getTypeDeclaration(swaggerModel.getAdditionalProperties())
getSwaggerType(swaggerModel.getAdditionalProperties()),getTypeDeclaration(swaggerModel.getAdditionalProperties())
TypeScriptNodeClientCodegen.class,TypeScriptJqueryClientCodegen.class
new InputStreamReader(is),"new InputStreamReader(is,""UTF-8"")"
config.getClass().toString(),config.getClass().getName()
config.getClass().toString(),config.getClass().getName()
LinkedHashSet<String>,TreeSet<String>
LinkedHashSet<String>,TreeSet<String>
getJSDocTypeWithBraces(cp),getJSDocType(cp)
getJSDocTypeWithBraces(cp),getJSDocType(cp)
getJSDocTypeWithBraces(operation),getJSDocType(operation)
getJSDocTypeWithBraces(operation),getJSDocType(operation)
"getJSDocTypeWithBraces(cm,var)","getJSDocType(cm,var)"
"getJSDocTypeWithBraces(cm,var)","getJSDocType(cm,var)"
"Arrays.asList(""abstract"",""continue"",""for"",""new"",""switch"",""assert"",""default"",""if"",""package"",""synchronized"",""boolean"",""do"",""goto"",""private"",""this"",""break"",""double"",""implements"",""protected"",""throw"",""byte"",""else"",""import"",""public"",""throws"",""case"",""enum"",""instanceof"",""return"",""transient"",""catch"",""extends"",""int"",""short"",""try"",""char"",""final"",""interface"",""static"",""void"",""class"",""finally"",""long"",""strictfp"",""volatile"",""const"",""float"",""native"",""super"",""while"")","Arrays.asList(""abstract"",""continue"",""for"",""new"",""switch"",""assert"",""default"",""if"",""package"",""synchronized"",""boolean"",""do"",""goto"",""private"",""this"",""break"",""double"",""implements"",""protected"",""throw"",""byte"",""else"",""import"",""public"",""throws"",""case"",""enum"",""instanceof"",""return"",""transient"",""catch"",""extends"",""int"",""short"",""try"",""char"",""final"",""interface"",""static"",""void"",""class"",""finally"",""long"",""strictfp"",""volatile"",""const"",""float"",""native"",""super"",""while"",""type"")"
"Arrays.asList(""abstract"",""continue"",""for"",""new"",""switch"",""assert"",""default"",""if"",""package"",""synchronized"",""boolean"",""do"",""goto"",""private"",""this"",""break"",""double"",""implements"",""protected"",""throw"",""byte"",""else"",""import"",""public"",""throws"",""case"",""enum"",""instanceof"",""return"",""transient"",""catch"",""extends"",""int"",""short"",""try"",""char"",""final"",""interface"",""static"",""void"",""class"",""finally"",""long"",""strictfp"",""volatile"",""const"",""float"",""native"",""super"",""while"")","Arrays.asList(""abstract"",""continue"",""for"",""new"",""switch"",""assert"",""default"",""if"",""package"",""synchronized"",""boolean"",""do"",""goto"",""private"",""this"",""break"",""double"",""implements"",""protected"",""throw"",""byte"",""else"",""import"",""public"",""throws"",""case"",""enum"",""instanceof"",""return"",""transient"",""catch"",""extends"",""int"",""short"",""try"",""char"",""final"",""interface"",""static"",""void"",""class"",""finally"",""long"",""strictfp"",""volatile"",""const"",""float"",""native"",""super"",""while"",""type"")"
reservedWords.contains(codegenProperty.datatypeWithEnum),reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)
"Arrays.asList(""Int"",""Float"",""Double"",""Bool"",""Void"",""String"",""Character"")","Arrays.asList(""Int"",""Float"",""Double"",""Bool"",""Void"",""String"",""Character"",""AnyObject"")"
reservedWords.contains(codegenProperty.datatypeWithEnum),reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)
"Arrays.asList(""Int"",""Float"",""Double"",""Bool"",""Void"",""String"",""Character"")","Arrays.asList(""Int"",""Float"",""Double"",""Bool"",""Void"",""String"",""Character"",""AnyObject"")"
parts.length > 0,parts.length > 1
qp.getExclusiveMaximum(),qp.isExclusiveMaximum()
qp.getExclusiveMaximum(),qp.isExclusiveMaximum()
qp.getExclusiveMinimum(),qp.isExclusiveMinimum()
qp.getExclusiveMinimum(),qp.isExclusiveMinimum()
qp.getUniqueItems(),qp.isUniqueItems()
qp.getUniqueItems(),qp.isUniqueItems()
"Arrays.asList(""bool"",""qint32"",""qint64"")","Arrays.asList(""bool"",""qint32"",""qint64"",""float"",""double"")"
"Arrays.asList(""bool"",""qint32"",""qint64"")","Arrays.asList(""bool"",""qint32"",""qint64"",""float"",""double"")"
allDefinitions != null,allDefinitions != null && composed.getInterfaces() != null
json.length() - 2,json.length() - 1
json.length() - 2,json.length() - 1
8,9
8,9
subtypeProps.isEmpty(),subtypeProps == null || subtypeProps.isEmpty()
subtypeProps.isEmpty(),subtypeProps == null || subtypeProps.isEmpty()
member.getType(beanDesc.bindingsForBeanType()),member.getType()
propMember.getType(beanDesc.bindingsForBeanType()),propMember.getType()
field.getRawType(),field.getType()
field.getRawType(),field.getType()
getter.getRawReturnType(),getter.getType()
getter.getRawReturnType(),getter.getType()
field.getRawType(),field.getType()
field.getRawType(),field.getType()
getter.getRawReturnType(),getter.getType()
getter.getRawReturnType(),getter.getType()
field.getRawType(),field.getType()
field.getRawType(),field.getType()
getter.getRawReturnType(),getter.getType()
getter.getRawReturnType(),getter.getType()
assertTrue(model.getUniqueItems()),assertFalse(model.getUniqueItems())
assertTrue(model.getUniqueItems()),assertFalse(model.getUniqueItems())
assertFalse(model.getUniqueItems()),assertTrue(model.getUniqueItems())
assertFalse(model.getUniqueItems()),assertTrue(model.getUniqueItems())
item.getClass(),item.annotationType()
item.getClass(),item.annotationType()
item.getClass(),item.annotationType()
item.getClass(),item.annotationType()
this.categoryWithApiModel=categoryWithApiModel,this.categoryWithApiModel=category
this.categoryWithApiModel=categoryWithApiModel,this.categoryWithApiModel=category
In.valueOf(apiKeyAuthConfig.in().toValue()),In.forValue(apiKeyAuthConfig.in().toValue())
In.valueOf(apiKeyAuthConfig.in().toValue()),In.forValue(apiKeyAuthConfig.in().toValue())
model.getEnum().size() == 2,model.getEnum().size() == 3
detailNode != null,detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)
"addKeys(externalClasses,DATE,""org.joda.time.LocalDate"")","addKeys(externalClasses,DATE,""org.joda.time.LocalDate"",""java.time.LocalDate"")"
"addKeys(externalClasses,DATE_TIME,""org.joda.time.DateTime"",""org.joda.time.ReadableDateTime"",""javax.xml.datatype.XMLGregorianCalendar"")","addKeys(externalClasses,DATE_TIME,""org.joda.time.DateTime"",""org.joda.time.ReadableDateTime"",""javax.xml.datatype.XMLGregorianCalendar"",""java.time.LocalDateTime"")"
"addKeys(externalClasses,DATE,""org.joda.time.LocalDate"")","addKeys(externalClasses,DATE,""org.joda.time.LocalDate"",""java.time.LocalDate"")"
"addKeys(externalClasses,DATE_TIME,""org.joda.time.DateTime"",""org.joda.time.ReadableDateTime"",""javax.xml.datatype.XMLGregorianCalendar"")","addKeys(externalClasses,DATE_TIME,""org.joda.time.DateTime"",""org.joda.time.ReadableDateTime"",""javax.xml.datatype.XMLGregorianCalendar"",""java.time.LocalDateTime"")"
"assertEquals(model.getProperties().get(NAME).getType(),""string"")","assertEquals(""string"",model.getProperties().get(NAME).getType())"
"assertEquals(model.getProperties().get(COUNT).getType(),""integer"")","assertEquals(""integer"",model.getProperties().get(COUNT).getType())"
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()),!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
8,0
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()),!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
"@Override public ResponseImpl schema(Property property){   throw new RuntimeException(""Not implemented""); } ","@Override public Response schema(Property property){   throw new RuntimeException(""Not implemented""); } "
"@Override public ResponseImpl description(String description){   throw new RuntimeException(""Not implemented""); } ","@Override public Response description(String description){   throw new RuntimeException(""Not implemented""); } "
"@Override public ResponseImpl example(String type,Object example){   throw new RuntimeException(""Not implemented""); } ","@Override public Response example(String type,Object example){   throw new RuntimeException(""Not implemented""); } "
"@Override public ResponseImpl header(String name,Property property){   throw new RuntimeException(""Not implemented""); } ","@Override public Response header(String name,Property property){   throw new RuntimeException(""Not implemented""); } "
"@Override public ResponseImpl headers(Map<String,Property> headers){   throw new RuntimeException(""Not implemented""); } ","@Override public Response headers(Map<String,Property> headers){   throw new RuntimeException(""Not implemented""); } "
ResponseImpl schema(Property property); ,Response schema(Property property); 
ResponseImpl description(String description); ,Response description(String description); 
"ResponseImpl example(String type,Object example); ","Response example(String type,Object example); "
"ResponseImpl header(String name,Property property); ","Response header(String name,Property property); "
"ResponseImpl headers(Map<String,Property> headers); ","Response headers(Map<String,Property> headers); "
@Override public ResponseImpl schema(Property property){   this.setSchema(property);   return this; } ,@Override public Response schema(Property property){   this.setSchema(property);   return this; } 
@Override public ResponseImpl description(String description){   this.setDescription(description);   return this; } ,@Override public Response description(String description){   this.setDescription(description);   return this; } 
"@Override public ResponseImpl example(String type,Object example){   if (examples == null) {     examples=new HashMap<String,Object>();   }   examples.put(type,example);   return this; } ","@Override public Response example(String type,Object example){   if (examples == null) {     examples=new HashMap<String,Object>();   }   examples.put(type,example);   return this; } "
"@Override public ResponseImpl header(String name,Property property){   addHeader(name,property);   return this; } ","@Override public Response header(String name,Property property){   addHeader(name,property);   return this; } "
"@Override public ResponseImpl headers(Map<String,Property> headers){   this.headers=headers;   return this; } ","@Override public Response headers(Map<String,Property> headers){   this.headers=headers;   return this; } "
"LOGGER.error(""no property for "" + type + "", ""+ format)","LOGGER.debug(""no property for "" + type + "", ""+ format)"
"LOGGER.error(""no property for "" + type + "", ""+ format)","LOGGER.debug(""no property for "" + type + "", ""+ format)"
"LOGGER.error(""no property for "" + type + "", ""+ format)","LOGGER.debug(""no property for "" + type + "", ""+ format)"
"LOGGER.error(""no property for "" + type + "", ""+ format)","LOGGER.debug(""no property for "" + type + "", ""+ format)"
@PATCH,@DELETE
@PATCH,@DELETE
@PATCH,@DELETE
"@GET @Path(""/{petId}"") @ApiOperation(value=""Find pet by ID"",notes=""Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions"",response=Pet.class) @ApiResponses(value={@ApiResponse(code=400,message=""Invalid ID supplied""),@ApiResponse(code=404,message=""Pet not found"")}) public Response getPetById(@ApiParam(value=""ID of pet that needs to be fetched"",allowableValues=""range[1,5]"",required=true) @PathParam(""petId"") String petId) throws NotFoundException {   Pet pet=petData.getPetbyId(ru.getLong(0,100000,0,petId));   if (null != pet) {     return Response.ok().entity(pet).build();   }  else {     throw new NotFoundException(404,""Pet not found"");   } } ","@GET @Path(""/{petId}"") @ApiOperation(value=""Find pet by ID"",notes=""Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions"",response=Pet.class) @ApiResponses(value={@ApiResponse(code=400,message=""Invalid ID supplied""),@ApiResponse(code=404,message=""Pet not found"")}) public Pet getPetById(@ApiParam(value=""ID of pet that needs to be fetched"",allowableValues=""range[1,5]"",required=true) @PathParam(""petId"") String petId) throws NotFoundException {   Pet pet=petData.getPetbyId(ru.getLong(0,100000,0,petId));   if (null != pet) {     return Response.ok().entity(pet).build();   }  else {     throw new NotFoundException(404,""Pet not found"");   } } "
boolean mutiValueResponse() default false; ,boolean multiValueResponse() default false; 
"ImmutableMap.of(columnFamily,mutations)","ImmutableMap.of(storeName,mutations)"
"log.error(""Checking bounds [{}, {}) (expect {} keys)"",new Object[]{startCol,endCol,expected.size()})","log.debug(""Checking bounds [{}, {}) (expect {} keys)"",new Object[]{startCol,endCol,expected.size()})"
"log.error(""Checking bounds [{}, {}) (expect {} keys)"",new Object[]{startCol,endCol,expected.size()})","log.debug(""Checking bounds [{}, {}) (expect {} keys)"",new Object[]{startCol,endCol,expected.size()})"
"log.error(""Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)"",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})","log.debug(""Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)"",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})"
"log.error(""Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)"",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})","log.debug(""Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)"",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})"
"p + ""."" + M_ITERATOR","p + ""."" + M_GET_KEYS+ "".""+ M_ITERATOR"
"p + ""."" + M_ITERATOR","p + ""."" + M_GET_KEYS+ "".""+ M_ITERATOR"
2,66
configuredScriptEngineNames == null,configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
configuredScriptEngineNames == null,configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
KeyValueStoreTest.class,KeyColumnValueStoreTest.class
stores.contains(name),stores.containsKey(name)
stores.contains(name),stores.containsKey(name)
"ImmutableSet.of(""testStringRepresentation"")","ImmutableSet.of(""testStringRepresentation"",""testDataTypeValidationOnProperties"")"
"ImmutableSet.of(""testStringRepresentation"")","ImmutableSet.of(""testStringRepresentation"",""testDataTypeValidationOnProperties"")"
cf.getCompressionType() == null,cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
cf.getCompressionType() == null,cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
cf.getCompressionType() == null,cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
cf.getCompressionType() == null,cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
"ImmutableSet.of(""testAutoIndexKeyDroppingWithPersistence"",""testReIndexingOfElements"",""testGettingVerticesAndEdgesWithKeyValue"")","ImmutableSet.of(""testAutoIndexKeyDroppingWithPersistence"",""testReIndexingOfElements"")"
IDAUTHORITY_RETRY_COUNT_DEFAULT=3,IDAUTHORITY_RETRY_COUNT_DEFAULT=20
1,33
1,33
1,33
1,33
1,33
1,33
1,33
"System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null","System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null || System.getProperty(""com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames"") != null"
"System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null","System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null || System.getProperty(""com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames"") != null"
"System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null","System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null || System.getProperty(""com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames"") != null"
"System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null","System.getProperty(""RecoveryEnvironmentBean.expiryScannerClassNames"") != null || System.getProperty(""com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames"") != null"
"resourceRegistration.registerAdditionalRuntimePackages(RuntimePackageDependency.optional(""org.hibernate.search.orm""),RuntimePackageDependency.required(""org.hibernate""))","resourceRegistration.registerAdditionalRuntimePackages(RuntimePackageDependency.optional(""org.hibernate.search.orm""),RuntimePackageDependency.required(""org.hibernate""),RuntimePackageDependency.optional(""org.hibernate.envers""))"
"resourceRegistration.registerAdditionalRuntimePackages(RuntimePackageDependency.optional(""org.hibernate.search.orm""),RuntimePackageDependency.required(""org.hibernate""))","resourceRegistration.registerAdditionalRuntimePackages(RuntimePackageDependency.optional(""org.hibernate.search.orm""),RuntimePackageDependency.required(""org.hibernate""),RuntimePackageDependency.optional(""org.hibernate.envers""))"
"new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)","new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)"
new ArrayList<>(4),new ArrayList<>(3)
"new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)","new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)"
"createPermissionsXmlAsset(new JndiPermission(""*"",""lookup""))","createPermissionsXmlAsset(new JndiPermission(""*"",""lookup""),new RuntimePermission(""accessClassInPackage.com.sun.jndi.ldap""))"
"createPermissionsXmlAsset(new SocketPermission(""*:10389"",""connect,resolve""))","createPermissionsXmlAsset(new SocketPermission(""*:10389"",""connect,resolve""),new RuntimePermission(""accessClassInPackage.com.sun.jndi.ldap""),new RuntimePermission(""accessClassInPackage.com.sun.jndi.url.ldap""))"
"createPermissionsXmlAsset(new JndiPermission(""*"",""lookup""))","createPermissionsXmlAsset(new JndiPermission(""*"",""lookup""),new RuntimePermission(""accessClassInPackage.com.sun.jndi.ldap""))"
"createPermissionsXmlAsset(new SocketPermission(""*:10389"",""connect,resolve""))","createPermissionsXmlAsset(new SocketPermission(""*:10389"",""connect,resolve""),new RuntimePermission(""accessClassInPackage.com.sun.jndi.ldap""),new RuntimePermission(""accessClassInPackage.com.sun.jndi.url.ldap""))"
1,1025
"verifyViewMethodsNotDeclaredFinal(sessionBeanClass,remoteBusinessInterfaces)","verifyViewMethodsNotDeclaredFinal(sessionBeanClass,localBusinessInterfaces)"
"operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true)","operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(false)"
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true),op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true),op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
"Assert.assertFalse(""reload-required"".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))","Assert.assertTrue(""reload-required"".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))"
"Assert.assertFalse(""reload-required"".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))","Assert.assertTrue(""reload-required"".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))"
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerAddressNode1()
"ModelVersion.create(3,0,0)","ModelVersion.create(2,0,0)"
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
attribute.getDefinition().getAttributeMarshaller(),attribute.getDefinition().getMarshaller()
this.registry.getValue().addXAResourceRecovery(recovery),this.registry.getValue().removeXAResourceRecovery(recovery)
this.registry.getValue().addXAResourceRecovery(recovery),this.registry.getValue().removeXAResourceRecovery(recovery)
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getHttpAddress()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getHttpAddress()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getHttpAddress()
TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getHttpAddress()
"String.format(""/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])"",name,user.getName(),user.getPassword(),String.join("","",user.getRoles()))","String.format(""/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])"",name,user.getName(),String.join("","",user.getRoles()))"
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
coreThreads.asString(),queueLength.asString()
ClassNotFoundException e,Throwable e
ClassNotFoundException e,Throwable e
timer.isActive(),timer.isActive() || (!timer.isActive() && timer.getState() == TimerState.ACTIVE)
"assertSpnegoWorkflow(uri,mechTypes,kerberosToken,kerberosToken,true,true)","assertSpnegoWorkflow(uri,mechTypes,kerberosToken,kerberosToken,false,true)"
securityDomain != null,securityDomain != null && !securityDomain.isEmpty()
globalSecurityDomain != null,globalSecurityDomain != null && !globalSecurityDomain.isEmpty()
securityDomain != null,securityDomain != null && !securityDomain.isEmpty()
globalSecurityDomain != null,globalSecurityDomain != null && !globalSecurityDomain.isEmpty()
callerPrincipalCallback == null,callerPrincipalCallback != null
EJBException nsee,IllegalStateException nsee
EJBException nsee,IllegalStateException nsee
EJBException nsee,IllegalStateException nsee
"LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)","LocalEjbReceiver.clone(resultCloner,exception)"
"LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)","LocalEjbReceiver.clone(resultCloner,exception)"
HttpAuthenticationFactory.class,Function.class
new ModelNode(10),new ModelNode(40)
new ModelNode(10),new ModelNode(40)
controller.getState() != ServiceController.State.UP,controller != null && controller.getState() != ServiceController.State.UP
controller.getState() != ServiceController.State.UP,controller != null && controller.getState() != ServiceController.State.UP
SecurityActions.getModuleClassLoader(JACC_MODULE),SecurityActions.getModuleClassLoader(module)
overrideDeploymentConfig,overrideDeploymentConfig || (loginConfig == null)
PORT_2=8080,PORT_2=8180
SecurityActions.getModuleClassLoader(JACC_MODULE),SecurityActions.getModuleClassLoader(module)
serverService.getIncomingInterceptors(),serverService.getOutgoingInterceptors()
serverService.getIncomingInterceptors(),serverService.getOutgoingInterceptors()
serverService.getIncomingInterceptors(),serverService.getOutgoingInterceptors()
serverService.getIncomingInterceptors(),serverService.getOutgoingInterceptors()
id=78,id=79
id=78,id=79
maxActiveSessions == null,maxActiveSessions == null && servletContainerService != null
maxActiveSessions == null,maxActiveSessions == null && servletContainerService != null
Exception e,Throwable e
new ModelNode(10000),new ModelNode(512)
legacyModel.isDefined(),legacyValue.isDefined()
legacyModel.isDefined(),legacyValue.isDefined()
legacyModel.isDefined(),legacyValue.isDefined()
legacyModel.isDefined(),legacyValue.isDefined()
builder120.build(),builder200.build()
builder120.build(),builder200.build()
jtaEnvironmentBean.getValue().getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap().remove(immediateCleanup),jtaEnvironmentBean.getValue().getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap().remove(jndiName)
builder120.build(),builder200.build()
builder120.build(),builder200.build()
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort(),undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort(),undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()
new ModelNode().set(1L),new ModelNode().set(5000L)
new ModelNode().set(10),new ModelNode().set(10L)
new ModelNode().set(17500),new ModelNode().set(17500L)
new ModelNode().set(600000),new ModelNode().set(600000L)
new ModelNode().set(60000),new ModelNode().set(60000L)
-1,-1L
-1,-1L
new ModelNode().set(15000),new ModelNode().set(15000L)
new ModelNode().set(60000),new ModelNode().set(60000L)
new ModelNode().set(60000),new ModelNode().set(60000L)
new ModelNode().set(1),new ModelNode().set(1L)
new ModelNode().set(25000),new ModelNode().set(25000L)
new ModelNode().set(240000),new ModelNode().set(240000L)
(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout,(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval,(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout,(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval,(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
"builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE)","builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE,SingleSignOnDefinition.COOKIE_NAME)"
"builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE)","builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE,SingleSignOnDefinition.COOKIE_NAME)"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForNone""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForNone""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForNone""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForNone""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForNone""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForNone""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForNone""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForNone""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForNone""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForNone""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForNone""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForNone""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""hello""))","Assert.assertEquals(getNotAllowedExceptionMessage(""hello""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForRole""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForRole""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForRoles""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForRoles""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""hello""))","Assert.assertEquals(getNotAllowedExceptionMessage(""hello""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForRole""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForRole""),e.getCause().getMessage())"
"Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(""helloForRoles""))","Assert.assertEquals(getNotAllowedExceptionMessage(""helloForRoles""),e.getCause().getMessage())"
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
findDelegate(name),findDelegateForNewObject(name)
prop.getParamName(),prop.getParamValue()
prop.getParamName(),prop.getParamValue()
prop.getParamName(),prop.getParamValue()
prop.getParamName(),prop.getParamValue()
"ROOT_LOGGER.error(consoleSlot == null ? ""main"" : consoleSlot)","ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? ""main"" : consoleSlot)"
"ROOT_LOGGER.error(consoleSlot == null ? ""main"" : consoleSlot)","ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? ""main"" : consoleSlot)"
"error(""Unable to connect due to unrecognised server certificate"")","printLine(""Unable to connect due to unrecognised server certificate"")"
"error(""Unable to connect due to unrecognised server certificate"")","printLine(""Unable to connect due to unrecognised server certificate"")"
"new IntRangeValidator(1,true,true)","new IntRangeValidator(0,true,true)"
"new IntRangeValidator(1,true,true)","new IntRangeValidator(0,true,true)"
"""access-control/default is missing operations: "" + accessControl","""access-control/default is missing operations: "" + defaults"
"""access-control/default is missing operations: "" + accessControl","""access-control/default is missing operations: "" + defaults"
"new RequestOptions(ResponseMode.GET_ALL,this.timeout,false,FILTER,Message.Flag.DONT_BUNDLE)","new RequestOptions(ResponseMode.GET_ALL,this.timeout,false,FILTER,Message.Flag.DONT_BUNDLE,Message.Flag.OOB)"
found=true,found=false
"Validate.configurationDirectoryExists(javaHome,""controllerJavaHome must exist at "" + controllerJavaHome)","Validate.configurationDirectoryExists(controllerJavaHome,""controllerJavaHome must exist at "" + controllerJavaHome)"
0,1
"ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)","ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)"
"ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)","ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)"
builder.addDependency(RegistryInstallerService.SERVICE_NAME),"builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)"
builder.addDependency(RegistryInstallerService.SERVICE_NAME),"builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)"
deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding()),d.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding()),d.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding()),d.setDefaultEncoding(servletContainer.getDefaultEncoding())
deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding()),d.setDefaultEncoding(servletContainer.getDefaultEncoding())
"error(""Unable to connect due to unrecognised server certificate"")","printLine(""Unable to connect due to unrecognised server certificate"")"
"error(""Unable to connect due to unrecognised server certificate"")","printLine(""Unable to connect due to unrecognised server certificate"")"
authentication.hasDefined(USERS),authentication.has(USERS)
authentication.hasDefined(USERS),authentication.has(USERS)
!handler.isDifferent(existing),handler.isDifferent(existing)
"new SensitivityClassification(SUBSYSTEM_NAME,""web-connector"",true,false,false)","new SensitivityClassification(SUBSYSTEM_NAME,""web-connector"",false,false,false)"
"new SensitivityClassification(SUBSYSTEM_NAME,""web-valve"",true,false,false)","new SensitivityClassification(SUBSYSTEM_NAME,""web-valve"",false,false,false)"
"name=""java:comp/ds""","lookup=""java:comp/ds"""
"name=""org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3""","lookup=""org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3"""
"name=""java:jboss/datasources/ExampleDS""","lookup=""java:jboss/datasources/ExampleDS"""
"name=""java:jboss/mail""","lookup=""java:jboss/mail"""
"name=""java:/TransactionManager""","lookup=""java:/TransactionManager"""
"name=""java:/ConnectionFactory""","lookup=""java:/ConnectionFactory"""
"name=""java:/queue/myAwesomeQueue""","lookup=""java:/queue/myAwesomeQueue"""
"name=""java:/ConnectionFactory""","lookup=""java:/ConnectionFactory"""
"name=""java:/topic/myAwesomeTopic""","lookup=""java:/topic/myAwesomeTopic"""
"name=""java:/ConnectionFactory""","lookup=""java:/ConnectionFactory"""
10,74
"message.contains(""14807"") || message.contains(""14883"")","message.contains(""14807"") || message.contains(""14883"") || message.contains(""11340"")"
"!failureDesc.contains(""14807"") && !failureDesc.contains(""14883"")","!failureDesc.contains(""14807"") && !failureDesc.contains(""14883"") && !failureDesc.contains(""11340"")"
"failureDesc.contains(""14807"") || failureDesc.contains(""14883"") || failureDesc.contains(""13456"")","failureDesc.contains(""14807"") || failureDesc.contains(""14883"") || failureDesc.contains(""13456"")|| failureDesc.contains(""11340"")"
ModuleIdentifier.create(moduleName),ModuleIdentifier.fromString(moduleName)
ModuleIdentifier.create(moduleName),ModuleIdentifier.fromString(moduleName)
override.toString(),override.asString()
override.toString(),override.asString()
preserve.toString(),preserve.asString()
preserve.toString(),preserve.asString()
"new File(ctx.getCurrentDir(),resourceArr[i])",new File(resourceArr[i])
filteredData.addAccessRestrictedResource(absoluteChildAddr),localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
filteredData.addAccessRestrictedResource(absoluteChildAddr),localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
id=13306,id=13106
id=13307,id=13107
id=13308,id=13108
"registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false)","registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false)","registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false)","registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false)","registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false)","registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false)","registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false)","registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false,runtimeOnlyFlags)"
"registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false)","registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false,runtimeOnlyFlags)"
sname.getParent().getSimpleName().substring(9),sname.getParent().getSimpleName().substring(8)
d.addWelcomePages(welcomeFiles),d.addWelcomePages(file)
entry.getValue().getManagementInterfaceMinorVersion(),entry.getValue().getManagementInterfaceMicroVersion()
entry.getValue().getManagementInterfaceMinorVersion(),entry.getValue().getManagementInterfaceMicroVersion()
d.setMajorVersion(1),d.setMinorVersion(1)
d.setMajorVersion(1),d.setMinorVersion(1)
"new CommandFormatException(""Parsed request isn't available."")","new CommandLineException(""Parsed request isn't available."")"
new CommandFormatException(result.toString()),new CommandLineException(result.toString())
"new CommandFormatException(""ModelNode request is incomplete"",e)","new CommandLineException(""ModelNode request is incomplete"",e)"
"new CommandFormatException(""The result couldn't be retrieved (perhaps the task was cancelled"",e)","new CommandLineException(""The result couldn't be retrieved (perhaps the task was cancelled"",e)"
"new CommandFormatException(""Communication error"",e)","new CommandLineException(""Communication error"",e)"
"new CommandFormatException(""Failed to execute operation."",e)","new CommandLineException(""Failed to execute operation."",e)"
modulePath.split(File.pathSeparator)[1],modulePath.split(File.pathSeparator)[0]
modulePath.split(File.pathSeparator)[1],modulePath.split(File.pathSeparator)[0]
modulePath.split(File.pathSeparator)[1],modulePath.split(File.pathSeparator)[0]
modulePath.split(File.pathSeparator)[1],modulePath.split(File.pathSeparator)[0]
modulePath.split(File.pathSeparator)[1],modulePath.split(File.pathSeparator)[0]
MESSAGES.pathEntryNotFound(path),MESSAGES.pathEntryNotFound(relativeTo)
id=14238,id=14239
id=14239,id=14240
"context.getLogger().logAttributeWarning(address,SLOT_ATTRIBUTE_NAME,MESSAGES.invalidJSFSlotValue(slot.asString()))","context.getLogger().logAttributeWarning(address,MESSAGES.invalidJSFSlotValue(slot.asString()),SLOT_ATTRIBUTE_NAME)"
new StringLengthValidator(1),"new StringLengthValidator(1,true,true)"
singletonComponent == null,singletonComponentInstance == null
singletonComponent == null,singletonComponentInstance == null
flags.length == 0,flags.length == 1
group == null,includedGroup == null
group == null,includedGroup == null
existing.getState(),server.getState()
existing.getState(),server.getState()
context.restartRequired(),context.revertRestartRequired()
context.restartRequired(),context.revertRestartRequired()
context.reloadRequired(),context.revertReloadRequired()
context.reloadRequired(),context.revertReloadRequired()
assertRemoveSubsystemResources(servicesA),assertRemoveSubsystemResources(servicesB)
assertRemoveSubsystemResources(servicesA),assertRemoveSubsystemResources(servicesB)
assertRemoveSubsystemResources(servicesA),assertRemoveSubsystemResources(servicesB)
assertRemoveSubsystemResources(servicesA),assertRemoveSubsystemResources(servicesB)
assertRemoveSubsystemResources(servicesA),assertRemoveSubsystemResources(servicesB)
lookup(parseName(name)),lookupLink(parseName(name))
lookup(parseName(name)),lookupLink(parseName(name))
"""Invalid modules directory: "" + modulesDir","""Invalid modules directory: "" + bundlesDir"
"""Invalid modules directory: "" + modulesDir","""Invalid modules directory: "" + bundlesDir"
MESSAGES.failToReplicateAttribute(),"MESSAGES.failToReplicateAttribute(name,value.getClass().getCanonicalName())"
1,0
1,0
1,0
1,0
1,0
1,0
1,0
propResource.get(BOOT_TIME).asBoolean(),propResource.get(BOOT_TIME).asBoolean(false)
propResource.get(BOOT_TIME).asBoolean(),propResource.get(BOOT_TIME).asBoolean(false)
deployments.get(uniqueName),deployments.get(deploymentName)
null != rootCause,null != rootCause && rootCause.getCause() != null
MANAGEMENT_API_MICRO_VERSION=0,MANAGEMENT_API_MICRO_VERSION=1
"SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)","SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"
"SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)","SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"
"SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)","SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"
"SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)","SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"
id=15873,id=10873
id=15874,id=10874
id=15848,id=10995
id=15849,id=10996
id=15850,id=10997
id=15851,id=10998
id=15852,id=10999
id=15853,id=16500
id=15854,id=16501
id=15855,id=16502
id=15856,id=16503
id=15857,id=16504
id=15858,id=16505
id=15859,id=16506
id=15860,id=16507
id=15861,id=16508
id=15862,id=16509
id=15863,id=16510
id=15864,id=16511
id=15865,id=16512
id=15866,id=16513
id=11100,id=16700
"@Message(id=14151,value=""Could not find view %s for EJB %s"") RuntimeException viewNotFound(String viewClass,String ejbName); ","@Message(id=14151,value=""Could not find view %s for EJB %s"") IllegalStateException viewNotFound(String viewClass,String ejbName); "
this.transactionsRepository.removeTransaction(this.xidTransactionID),this.transactionsRepository.getTransaction(this.xidTransactionID)
this.transactionsRepository.removeTransaction(this.xidTransactionID),this.transactionsRepository.getTransaction(this.xidTransactionID)
this.transactionsRepository.removeTransaction(this.xidTransactionID),this.transactionsRepository.getTransaction(this.xidTransactionID)
this.transactionsRepository.removeTransaction(this.xidTransactionID),this.transactionsRepository.getTransaction(this.xidTransactionID)
"context.registerSubsystem(SUBSYSTEM_NAME,1,0)","context.registerSubsystem(SUBSYSTEM_NAME,1,1)"
"context.registerSubsystem(SUBSYSTEM_NAME,1,0)","context.registerSubsystem(SUBSYSTEM_NAME,1,1)"
"this(true,true); ","this(true,false); "
ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE),ssl.hasDefined(CommonAttributes.CERTIFICATE_KEY_FILE)
ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE),ssl.hasDefined(CommonAttributes.CERTIFICATE_KEY_FILE)
ssl.has(CommonAttributes.CIPHER_SUITE),ssl.hasDefined(CommonAttributes.CIPHER_SUITE)
ssl.has(CommonAttributes.CIPHER_SUITE),ssl.hasDefined(CommonAttributes.CIPHER_SUITE)
ssl.has(CommonAttributes.PROTOCOL),ssl.hasDefined(CommonAttributes.PROTOCOL)
ssl.has(CommonAttributes.PROTOCOL),ssl.hasDefined(CommonAttributes.PROTOCOL)
ssl.has(CommonAttributes.CA_CERTIFICATE_FILE),ssl.hasDefined(CommonAttributes.CA_CERTIFICATE_FILE)
ssl.has(CommonAttributes.CA_CERTIFICATE_FILE),ssl.hasDefined(CommonAttributes.CA_CERTIFICATE_FILE)
ssl.has(CommonAttributes.CA_REVOCATION_URL),ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
ssl.has(CommonAttributes.CA_REVOCATION_URL),ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
"new StringLengthValidator(1,Integer.MAX_VALUE,true,true)","new StringLengthValidator(1,Integer.MAX_VALUE,true,false)"
"SimpleAttributeDefinitionBuilder.create(""file"",ModelType.OBJECT,true)","SimpleAttributeDefinitionBuilder.create(""file"",ModelType.OBJECT,false)"
"SimpleAttributeDefinitionBuilder.create(""max-backup-index"",ModelType.INT)","SimpleAttributeDefinitionBuilder.create(""max-backup-index"",ModelType.INT,true)"
"SimpleAttributeDefinitionBuilder.create(""max-inclusive"",ModelType.BOOLEAN)","SimpleAttributeDefinitionBuilder.create(""max-inclusive"",ModelType.BOOLEAN,true)"
"SimpleAttributeDefinitionBuilder.create(""max-level"",ModelType.STRING)","SimpleAttributeDefinitionBuilder.create(""max-level"",ModelType.STRING,true)"
"SimpleAttributeDefinitionBuilder.create(""min-inclusive"",ModelType.BOOLEAN)","SimpleAttributeDefinitionBuilder.create(""min-inclusive"",ModelType.BOOLEAN,true)"
"SimpleAttributeDefinitionBuilder.create(""min-level"",ModelType.STRING)","SimpleAttributeDefinitionBuilder.create(""min-level"",ModelType.STRING,true)"
"SimpleAttributeDefinitionBuilder.create(""new-level"",ModelType.STRING)","SimpleAttributeDefinitionBuilder.create(""new-level"",ModelType.STRING,true)"
"EnumValidator.create(Target.class,false,false)","EnumValidator.create(Target.class,true,false)"
"new EnumValidator<Mode>(Mode.class,true,false)","new EnumValidator<Mode>(Mode.class,false,true)"
"new EnumValidator<TransactionMode>(TransactionMode.class,true,false)","new EnumValidator<TransactionMode>(TransactionMode.class,true,true)"
"new IntRangeValidator(1,true)","new IntRangeValidator(1,true,true)"
"SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)","SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)"
"SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)","SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)"
"SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)","SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)"
"new SimpleAttributeDefinitionBuilder(CommonAttributes.NAME,ModelType.STRING,false).setXmlName(Attribute.NAME.getLocalName()).setAllowExpression(true)","new SimpleAttributeDefinitionBuilder(CommonAttributes.NAME,ModelType.STRING,false).setXmlName(Attribute.NAME.getLocalName()).setAllowExpression(false)"
new IntRangeValidator(1),"new IntRangeValidator(1,true)"
"new EnumValidator(ParticipantStatus.class,false,false)","new EnumValidator(ParticipantStatus.class,true,false)"
this.seperator,this.separator
id=19903,id=19904
id=19904,id=19905
id=19905,id=19906
id=19906,id=19907
id=19907,id=19908
id=19908,id=19909
id=19909,id=19910
id=19910,id=19911
!tmp.exists() && !tmp.isDirectory(),!tmp.exists() || !tmp.isDirectory()
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString()),config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString()),config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString()),config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())
config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString()),config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())
config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString()),config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString()),config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
"MESSAGES.deploymentUnitNotFound(absolutePath,puName,current)","MESSAGES.persistenceUnitNotFound(absolutePath,puName,current)"
"MESSAGES.deploymentUnitNotFound(absolutePath,puName,current)","MESSAGES.persistenceUnitNotFound(absolutePath,puName,current)"
"getConnectionAddOperation(name,outboundSocketBindingRef,address)","getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address)"
"getConnectionAddOperation(name,outboundSocketBindingRef,address)","getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address)"
IllegalArgumentException iae,Exception iae
expression.length() - 2,expression.length() - 1
DeploymentDescription.getDeployDeploymentOperation(locale),DeploymentDescription.getReplaceDeploymentOperation(locale)
DeploymentDescription.getDeployDeploymentOperation(locale),DeploymentDescription.getReplaceDeploymentOperation(locale)
"ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)","ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)"
"ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)","ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)"
"ALIAS.addOperationParameterDescription(resources,""infinispan.container"",op)","ALIASES.addOperationParameterDescription(resources,""infinispan.container"",op)"
"ALIAS.addOperationParameterDescription(resources,""infinispan.container"",op)","ALIASES.addOperationParameterDescription(resources,""infinispan.container"",op)"
id=15800,id=10800
id=15801,id=10801
id=15802,id=10802
id=15803,id=10803
id=15804,id=10804
id=15805,id=10805
id=15806,id=10806
id=15807,id=10807
id=15808,id=10808
id=15809,id=10809
id=15830,id=10830
id=15831,id=10831
id=15832,id=10832
id=15833,id=10833
id=15834,id=10834
id=15835,id=10835
id=15836,id=10836
id=15837,id=10837
id=15838,id=10838
id=15839,id=10839
id=15840,id=10840
id=15841,id=10841
id=15842,id=10842
id=15843,id=10843
id=15844,id=10844
id=15845,id=10845
id=15846,id=10846
id=15847,id=10847
id=15848,id=10848
id=15849,id=10849
id=15850,id=10850
id=15851,id=10851
id=15852,id=10852
id=15853,id=10853
id=15854,id=10854
id=15855,id=10855
id=15856,id=10856
id=15857,id=10857
id=15858,id=10858
id=15859,id=10859
id=15860,id=10860
id=15861,id=10861
id=15862,id=10862
id=15863,id=10863
id=15864,id=10864
id=15865,id=10865
id=15866,id=10866
id=15867,id=10867
id=15868,id=10868
id=15869,id=10869
id=15870,id=10870
id=15871,id=10871
id=15872,id=10872
config.setBeanCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString()),config.setClientMappingCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
config.setBeanCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString()),config.setClientMappingCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
2,130
serverEnvironment == null,serverEnvironment != null
"/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value=""<session-type> not specified for ejb %s. This must be present in ejb-jar.xml"") IllegalStateException sessionTypeNotSpecified(String bean); ","/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value=""<session-type> not specified for ejb %s. This must be present in ejb-jar.xml"") DeploymentUnitProcessingException sessionTypeNotSpecified(String bean); "
preDestroys != null,prePassivates != null
preDestroys != null,prePassivates != null
TIMEOUT=15000,TIMEOUT=30000
(ResourceAdapterDeploymentService)controller.getService(),(ResourceAdapterXmlDeploymentService)controller.getService()
op.getJavaName(),setop.getJavaName()
op.getJavaName(),setop.getJavaName()
op.getIDLName(),setop.getIDLName()
op.getIDLName(),setop.getIDLName()
"Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(""serialized"").getValue()))","Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(""serialized"").getValue()))"
"Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(""serialized"").getValue()))","Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(""serialized"").getValue()))"
"war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),""web.xml"")","war.setWebXML(ClusteredWebTestCase.class.getPackage(),""web.xml"")"
"war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),""web.xml"")","war.setWebXML(ClusteredWebTestCase.class.getPackage(),""web.xml"")"
"war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),""web.xml"")","war.setWebXML(ClusteredWebTestCase.class.getPackage(),""web.xml"")"
"war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),""web.xml"")","war.setWebXML(ClusteredWebTestCase.class.getPackage(),""web.xml"")"
"war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),""web.xml"")","war.setWebXML(SimpleWebTestCase.class.getPackage(),""web.xml"")"
"war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),""web.xml"")","war.setWebXML(SimpleWebTestCase.class.getPackage(),""web.xml"")"
"MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())","MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"
"MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())","MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"
entry.getKey().getHostName(),entry.getKey().getServerName()
entry.getKey().getHostName(),entry.getKey().getServerName()
Namespace.CURRENT.toString(),Namespace.CURRENT.getUriString()
Namespace.CURRENT.toString(),Namespace.CURRENT.getUriString()
"logger.warn(""Could not send module un-availability notification of module "" + deploymentModuleIdentifier + "" to channel ""+ this.channel,e)","logger.debug(""Could not send module un-availability notification of module "" + deploymentModuleIdentifier + "" to channel ""+ this.channel,e)"
"logger.warn(""Could not send module un-availability notification of module "" + deploymentModuleIdentifier + "" to channel ""+ this.channel,e)","logger.debug(""Could not send module un-availability notification of module "" + deploymentModuleIdentifier + "" to channel ""+ this.channel,e)"
"configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)","configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"
"configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)","configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"
jmsManager.destroyQueue(queueName),jmsManager.removeQueueFromJNDI(queueName)
jmsManager.destroyQueue(queueName),jmsManager.removeQueueFromJNDI(queueName)
jmsManager.destroyTopic(name),jmsManager.removeTopicFromJNDI(name)
jmsManager.destroyTopic(name),jmsManager.removeTopicFromJNDI(name)
"/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value=""Container managed entity manager can only be closed by the container "" + ""(auto-cleared at tx/invocation end and closed when owning component is closed.)"") IllegalArgumentException cannotCloseTransactionContainerEntityManger(); ","/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value=""Container managed entity manager can only be closed by the container "" + ""(auto-cleared at tx/invocation end and closed when owning component is closed.)"") IllegalStateException cannotCloseTransactionContainerEntityManger(); "
return alternatives; ,return requires; 
delegate.getChild(element),delegate.requireChild(element)
delegate.getChild(element),delegate.requireChild(element)
"HttpRequest.put(""http://localhost:8080/ejbws-example/SingletonEndpoint"",message,10,SECONDS)","HttpRequest.post(""http://localhost:8080/ejbws-example/SingletonEndpoint"",message,10,SECONDS)"
"HttpRequest.put(""http://localhost:8080/ejbws-example/SingletonEndpoint"",message,10,SECONDS)","HttpRequest.post(""http://localhost:8080/ejbws-example/SingletonEndpoint"",message,10,SECONDS)"
getCurrentRequestId(),getBatchId()
getCurrentRequestId(),getBatchId()
2,66
"new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCE_POLICY_CLASS_NAME_METHOD)","new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCING_POLICY_CLASS_NAME_METHOD)"
"new SimpleAttributeDefinition(""ha"",new ModelNode().set(HornetQClient.DEFAULT_HA),ModelType.BOOLEAN,false)","new SimpleAttributeDefinition(""ha"",new ModelNode().set(HornetQClient.DEFAULT_HA),ModelType.BOOLEAN,true)"
"new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,false)","new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,true)"
STANADALONE,STANDALONE
"log.tracef(""%s finished request %d"",ManagementChannel.this)","log.tracef(""%s finished request %d"",ManagementChannel.this,header.getBatchId())"
serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN,serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN
deploymentUnit.getParent() == null,deploymentUnit.getParent() != null
operation.get(ROLLBACK_ON_RUNTIME_FAILURE),headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
operation.get(ROLLBACK_ON_RUNTIME_FAILURE),headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
stage.compareTo(currentStage) > 0,stage.compareTo(currentStage) < 0
"context.addStep(prepareStep,NewOperationContext.Stage.MODEL)","context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL)"
"context.addStep(new NewStepHandler(){   public void execute(  final NewOperationContext context,  final ModelNode operation){     if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {     }   } } ,NewOperationContext.Stage.VERIFY)","context.addStep(response,operation,new NewStepHandler(){   public void execute(  final NewOperationContext context,  final ModelNode operation){     if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {     }   } } ,NewOperationContext.Stage.VERIFY)"
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
response.set(ROLLED_BACK),response.get(ROLLED_BACK)
InetAddress.getLocalHost(),"InetAddress.getByName(""127.0.0.1"")"
offset >= 0,offset > 0
bindingGroup.get(PORT_OFFSET).asInt() >= 0,bindingGroup.get(PORT_OFFSET).asInt() > 0
offset > 0,offset >= 0
bindingGroup.has(PORT_OFFSET),bindingGroup.hasDefined(PORT_OFFSET)
bindingGroup.has(PORT_OFFSET),bindingGroup.hasDefined(PORT_OFFSET)
"new RuntimeException(""Could not lookup jndi name: "" + namespaceStrippedJndiName + "" in context: ""+ jndiContext,ne)","new IllegalArgumentException(""Could not lookup jndi name: "" + namespaceStrippedJndiName + "" in context: ""+ jndiContext,ne)"
node.has(Constants.ALIAS),node.hasDefined(Constants.ALIAS)
node.has(Constants.ALIAS),node.hasDefined(Constants.ALIAS)
"new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.args()[0].name().toString())","new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString())"
"new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.returnType().name().toString())","new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.returnType().name().toString())"
targetDescription.getClassName(),targetDescription.getDeclaredValueClassName()
targetDescription.getClassName(),targetDescription.getDeclaredValueClassName()
wsdlLocation.length() > 0,wsdlLocation != null && wsdlLocation.length() > 0
"injectionConfiguration.getSource().getResourceValue(serviceBuilder,context,managedReferenceFactoryValue)","injectionConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,context,managedReferenceFactoryValue)"
"bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())","bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())"
"bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())","bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())"
"Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)","Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)"
System.out.println(),System.out.println(hostResult)
XMLInputFactory.newFactory(),XMLInputFactory.newInstance()
XMLInputFactory.newFactory(),XMLInputFactory.newInstance()
"log.errorf(""started ResourceAdapterService %s"",context.getController().getName())","log.infof(""started ResourceAdapterService %s"",context.getController().getName())"
"log.errorf(""started ResourceAdapterService %s"",context.getController().getName())","log.infof(""started ResourceAdapterService %s"",context.getController().getName())"
"for (AnnotationInstance annotation : excludeDefaultAnnotations) {   final AnnotationTarget target=annotation.target();   if (target instanceof MethodInfo) {     final MethodInfo methodInfo=MethodInfo.class.cast(target);     final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);     componentConfiguration.excludeClassInterceptors(methodIdentifier);   }  else {     throw new DeploymentUnitProcessingException(""ExcludeClassInterceptors not applied to method: "" + target);   } } ","for (AnnotationInstance annotation : excludeClassAnnotations) {   final AnnotationTarget target=annotation.target();   if (target instanceof MethodInfo) {     final MethodInfo methodInfo=MethodInfo.class.cast(target);     final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);     componentConfiguration.excludeClassInterceptors(methodIdentifier);   }  else {     throw new DeploymentUnitProcessingException(""ExcludeClassInterceptors not applied to method: "" + target);   } } "
"op.get(""address"").set(""host"",host)","op.get(""address"").add(""host"",host)"
"op.get(""address"").set(""host"",host)","op.get(""address"").add(""host"",host)"
modelNode.has(LOCAL),modelNode.hasDefined(LOCAL)
modelNode.has(LOCAL),modelNode.hasDefined(LOCAL)
XMLInputFactory.newFactory(),XMLInputFactory.newInstance()
XMLInputFactory.newFactory(),XMLInputFactory.newInstance()
"controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)","domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)"
"controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)","domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)"
processor.getOrCreateManifest(archive),ManifestUtils.getOrCreateManifest(archive)
processor.getOrCreateManifest(archive),ManifestUtils.getOrCreateManifest(archive)
!namespaces.isDefined(),namespaces.isDefined()
!locations.isDefined(),locations.isDefined()
new ServiceActivatorContextImpl(batchBuilder),"new ServiceActivatorContextImpl(batchBuilder,serviceContainer)"
root.toURL(),file.toURL()
root.toURL(),file.toURL()
1,33
handoffExecutor == null,handoffExecutor != null
handoffExecutor == null,handoffExecutor != null
ours=theirIterator.next(),theirs=theirIterator.next()
JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern),!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
getBinaryTupledSet(),getTupledSet()
"connection.pexpire(key,millisecondsTimestamp)","connection.pexpireAt(key,millisecondsTimestamp)"
"connection.pexpire(key,millisecondsTimestamp)","connection.pexpireAt(key,millisecondsTimestamp)"
JedisConnectionException e,JedisException e
18,146
2,130
"connection.subscribe(jedisPubSub,patterns)","connection.psubscribe(jedisPubSub,patterns)"
"connection.subscribe(jedisPubSub,patterns)","connection.psubscribe(jedisPubSub,patterns)"
"connection.subscribe(jedisPubSub,patterns)","connection.psubscribe(jedisPubSub,patterns)"
"connection.subscribe(jedisPubSub,patterns)","connection.psubscribe(jedisPubSub,patterns)"
"connection.subscribe(jedisPubSub,patterns)","connection.psubscribe(jedisPubSub,patterns)"
"connection.subscribe(jedisPubSub,patterns)","connection.psubscribe(jedisPubSub,patterns)"
"connection.zrangeByLex(key,max,min)","connection.zrevrangeByLex(key,max,min)"
"connection.zrangeByLex(key,max,min)","connection.zrevrangeByLex(key,max,min)"
"connection.zrangeByLex(key,max,min)","connection.zrevrangeByLex(key,max,min)"
"connection.zrangeByLex(key,max,min)","connection.zrevrangeByLex(key,max,min)"
"Arrays.equals(this.element,other.element)","Arrays.equals(this.element,other.element) || this.score == other.getScore()"
final Command cmd,final ProtocolCommand cmd
setParams().nx(),setParams().xx()
setParams().nx(),setParams().xx()
"new JedisClusterCommand<Long>(connectionHandler,timeout,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } ","new JedisClusterCommand<Long>(connectionHandler,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } "
"new JedisClusterCommand<Long>(connectionHandler,timeout,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } ","new JedisClusterCommand<Long>(connectionHandler,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } "
"new JedisClusterCommand<Set<String>>(connectionHandler,timeout,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } ","new JedisClusterCommand<Set<String>>(connectionHandler,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } "
"new JedisClusterCommand<Set<String>>(connectionHandler,timeout,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } ","new JedisClusterCommand<Set<String>>(connectionHandler,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } "
connection.hdel(key),connection.hlen(key)
connection.hdel(key),connection.hlen(key)
connection.hdel(key),connection.hlen(key)
connection.hdel(key),connection.hlen(key)
sendCommand(CLIENT_GETNAME),"sendCommand(CLIENT,Keyword.GETNAME.raw)"
sendCommand(CLIENT_LIST),"sendCommand(CLIENT,Keyword.LIST.raw)"
sendCommand(CLIENT_SETNAME),"sendCommand(CLIENT,Keyword.SETNAME.raw,name)"
client.getBulkReply(),client.getStatusCodeReply()
client.getBulkReply(),client.getStatusCodeReply()
client.srandmember(key),"client.srandmember(key,count)"
-1,-2
-1,-2
protocol.read(inputStream),Protocol.read(inputStream)
protocol.read(inputStream),Protocol.read(inputStream)
2 < buf.length - count,2 >= buf.length - count
4 < buf.length - count,4 >= buf.length - count
3 < buf.length - count,3 >= buf.length - count
robotstxtServer.allows(webURL),!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
robotstxtServer.allows(webURL),!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
0,1
twitter1.getRetweets(18594701629l),twitter1.getRetweets(1021608606934822912L)
20 < statuses.size(),2 < statuses.size()
"twitter1.getRetweeterIds(18594701629l,-1)","twitter1.getRetweeterIds(1021608606934822912L,-1)"
0,1
"assertEquals(401,te.getStatusCode())","assertEquals(403,te.getStatusCode())"
"Integer.valueOf(p.getProperty(""numberid.id""))","Long.valueOf(p.getProperty(""numberid.id""))"
"Integer.valueOf(p.getProperty(""numberid.id""))","Long.valueOf(p.getProperty(""numberid.id""))"
"Integer.valueOf(p.getProperty(""numberid.id""))","Long.valueOf(p.getProperty(""numberid.id""))"
"Integer.valueOf(p.getProperty(""numberid.id""))","Long.valueOf(p.getProperty(""numberid.id""))"
138,202
138,202
138,202
138,202
"new GeoLocation(array.getDouble(0),array.getDouble(1))","new GeoLocation(array.getDouble(1),array.getDouble(0))"
"new GeoLocation(array.getDouble(0),array.getDouble(1))","new GeoLocation(array.getDouble(1),array.getDouble(0))"
"new HttpParameter(""retweets"",enableDeviceNotification)","new HttpParameter(""retweets"",retweets)"
ticket.notify(),ticket.notifyAll()
ticket.notify(),ticket.notifyAll()
"new HttpParameter(""retweets"",enableDeviceNotification)","new HttpParameter(""retweets"",retweets)"
ticket.notify(),ticket.notifyAll()
ticket.notify(),ticket.notifyAll()
resetTimeInSeconds * 1000,resetTimeInSeconds * 1000L
resetTimeInSeconds * 1000,resetTimeInSeconds * 1000L
twitter.getHomeTimeline(),twitter.getDailyTrends()
twitter.getHomeTimeline(),twitter.getDailyTrends()
users.size() > 90,users.size() > 50
ids.getIDs().length > 90,ids.getIDs().length > 50
new SimpleDateFormat(format),"new SimpleDateFormat(format,Locale.US)"
"assertSame(conf,(Configuration)serializeDeserialize(conf))","assertEquals(conf,(Configuration)serializeDeserialize(conf))"
"assertSame(conf,(Configuration)serializeDeserialize(conf))","assertEquals(conf,(Configuration)serializeDeserialize(conf))"
twitter1.getHomeTimeline(new Paging().count(1)),twitter1.getPublicTimeline()
json.toString(1),jsonArray.toString(1)
json.toString(1),jsonArray.toString(1)
"assertEquals(6358482,received.get(0)[1])","assertEquals(6358482l,received.get(0)[1])"
"assertEquals(6358481,received.get(0)[1])","assertEquals(6358481l,received.get(0)[1])"
"assertEquals(4933401,received.get(0)[1])","assertEquals(4933401l,received.get(0)[1])"
"twitter1.checkUserListMembership(id1.screenName,id2.id,userList.getId())","twitter1.checkUserListMembership(id1.screenName,userList.getId(),id2.id)"
"twitter1.checkUserListSubscription(id1.screenName,id2.id,userList.getId())","twitter1.checkUserListSubscription(id1.screenName,userList.getId(),id2.id)"
"Integer.valueOf(p.getProperty(screenName + "".id""))","Long.valueOf(p.getProperty(screenName + "".id""))"
"Integer.valueOf(p.getProperty(screenName + "".id""))","Long.valueOf(p.getProperty(screenName + "".id""))"
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
conf.getSearchBaseURL(),conf.getRestBaseURL()
1 < user.getListedCount(),1 <= user.getListedCount()
args.length < 1,args.length < 2
args.length < 1,args.length < 2
args.length < 1,args.length < 2
responseCode < OK && MULTIPLE_CHOICES <= responseCode,responseCode < OK || MULTIPLE_CHOICES <= responseCode
userStreamListener.onStatus(new StatusJSONImpl(json)),listener.onStatus(new StatusJSONImpl(json))
userStreamListener.onStatus(new StatusJSONImpl(json)),listener.onStatus(new StatusJSONImpl(json))
new java.util.Date(),new java.util.Date(System.currentTimeMillis() - 24 * 3600 * 1000)
new java.util.Date(),new java.util.Date(System.currentTimeMillis() - 3600 * 24)
"Status.constructStatuses(get(getBaseURL() + ""statuses/public_timeline.json"",false))","Status.createStatuseList(get(getBaseURL() + ""statuses/public_timeline.json"",false))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/public_timeline.json"",false))","Status.createStatuseList(get(getBaseURL() + ""statuses/public_timeline.json"",false))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/public_timeline.json"",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))","Status.createStatuseList(get(getBaseURL() + ""statuses/public_timeline.json"",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/public_timeline.json"",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))","Status.createStatuseList(get(getBaseURL() + ""statuses/public_timeline.json"",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/home_timeline.json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/home_timeline.json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/home_timeline.json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/home_timeline.json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/home_timeline.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/home_timeline.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/home_timeline.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/home_timeline.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/friends_timeline.json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/friends_timeline.json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/friends_timeline.json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/friends_timeline.json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/friends_timeline.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/friends_timeline.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/friends_timeline.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/friends_timeline.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",http.isAuthenticationEnabled()))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",http.isAuthenticationEnabled()))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",http.isAuthenticationEnabled()))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline/"" + id+ "".json"",http.isAuthenticationEnabled()))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline.json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline.json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline.json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline.json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/user_timeline.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/user_timeline.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/mentions.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/mentions.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/mentions.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/mentions.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/mentions.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/mentions.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/mentions.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/mentions.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_by_me.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweeted_to_me.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,paging.asPostParameterList(),true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweets_of_me.json"",null,paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweets/"" + statusId+ "".json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweets/"" + statusId+ "".json"",true))"
"Status.constructStatuses(get(getBaseURL() + ""statuses/retweets/"" + statusId+ "".json"",true))","Status.createStatuseList(get(getBaseURL() + ""statuses/retweets/"" + statusId+ "".json"",true))"
"twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ ""/lists.json?cursor=""+ cursor,true))","twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ ""/lists.json?cursor=""+ cursor,true))"
"twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ ""/lists.json?cursor=""+ cursor,true))","twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ ""/lists.json?cursor=""+ cursor,true))"
"Status.constructStatuses(get(getApiBaseURL() + V1 + user+ ""/lists/""+ id+ ""/statuses.json"",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))","Status.createStatuseList(get(getApiBaseURL() + V1 + user+ ""/lists/""+ id+ ""/statuses.json"",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))"
"Status.constructStatuses(get(getApiBaseURL() + V1 + user+ ""/lists/""+ id+ ""/statuses.json"",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))","Status.createStatuseList(get(getApiBaseURL() + V1 + user+ ""/lists/""+ id+ ""/statuses.json"",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))"
"twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ ""/lists/memberships.json?cursor=""+ cursor,true))","twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ ""/lists/memberships.json?cursor=""+ cursor,true))"
"twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ ""/lists/memberships.json?cursor=""+ cursor,true))","twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ ""/lists/memberships.json?cursor=""+ cursor,true))"
"twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ ""/lists/subscriptions.json?cursor=""+ cursor,true))","twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ ""/lists/subscriptions.json?cursor=""+ cursor,true))"
"twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ ""/lists/subscriptions.json?cursor=""+ cursor,true))","twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ ""/lists/subscriptions.json?cursor=""+ cursor,true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages.json"",true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages.json"",true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages.json"",true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages.json"",true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages.json"",null,paging.asPostParameterList(),true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages.json"",null,paging.asPostParameterList(),true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages.json"",null,paging.asPostParameterList(),true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages.json"",null,paging.asPostParameterList(),true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],paging.asPostParameterList(),true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],paging.asPostParameterList(),true))"
"DirectMessage.constructDirectMessages(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],paging.asPostParameterList(),true))","DirectMessage.createDirectMessageList(get(getBaseURL() + ""direct_messages/sent.json"",new PostParameter[0],paging.asPostParameterList(),true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites.json"",new PostParameter[0],true))","Status.createStatuseList(get(getBaseURL() + ""favorites.json"",new PostParameter[0],true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites.json"",new PostParameter[0],true))","Status.createStatuseList(get(getBaseURL() + ""favorites.json"",new PostParameter[0],true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites.json"",""page"",String.valueOf(page),true))","Status.createStatuseList(get(getBaseURL() + ""favorites.json"",""page"",String.valueOf(page),true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites.json"",""page"",String.valueOf(page),true))","Status.createStatuseList(get(getBaseURL() + ""favorites.json"",""page"",String.valueOf(page),true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites/"" + id+ "".json"",new PostParameter[0],true))","Status.createStatuseList(get(getBaseURL() + ""favorites/"" + id+ "".json"",new PostParameter[0],true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites/"" + id+ "".json"",new PostParameter[0],true))","Status.createStatuseList(get(getBaseURL() + ""favorites/"" + id+ "".json"",new PostParameter[0],true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites/"" + id+ "".json"",""page"",String.valueOf(page),true))","Status.createStatuseList(get(getBaseURL() + ""favorites/"" + id+ "".json"",""page"",String.valueOf(page),true))"
"Status.constructStatuses(get(getBaseURL() + ""favorites/"" + id+ "".json"",""page"",String.valueOf(page),true))","Status.createStatuseList(get(getBaseURL() + ""favorites/"" + id+ "".json"",""page"",String.valueOf(page),true))"
"SavedSearch.constructSavedSearches(get(getBaseURL() + ""saved_searches.json"",true))","SavedSearch.createSavedSearchList(get(getBaseURL() + ""saved_searches.json"",true))"
"SavedSearch.constructSavedSearches(get(getBaseURL() + ""saved_searches.json"",true))","SavedSearch.createSavedSearchList(get(getBaseURL() + ""saved_searches.json"",true))"
"User.createCursorSupportUserList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))","User.createUsersList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))"
"User.createCursorSupportUserList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))","User.createUsersList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))"
"Status.constructStatuses(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))","Status.createStatuseList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))"
"Status.constructStatuses(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))","Status.createStatuseList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))"
"DirectMessage.constructDirectMessages(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))","DirectMessage.createDirectMessageList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))"
"DirectMessage.constructDirectMessages(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))","DirectMessage.createDirectMessageList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json""))"
"User.createCursorSupportUserList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json""))","User.createUsersList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json""))"
"User.createCursorSupportUserList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json""))","User.createUsersList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json""))"
"Status.constructStatuses(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json""))","Status.createStatuseList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json""))"
"Status.constructStatuses(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json""))","Status.createStatuseList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json""))"
"DirectMessage.constructDirectMessages(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json""))","DirectMessage.createDirectMessageList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json""))"
"DirectMessage.constructDirectMessages(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json""))","DirectMessage.createDirectMessageList(http.get(""http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json""))"
assertFalse(user.isGeoEnabled()),assertTrue(user.isGeoEnabled())
assertFalse(user.isGeoEnabled()),assertTrue(user.isGeoEnabled())
"original.getScreenName().endsWith(""new"")","original.getScreenName().endsWith(""new"") || original.getName().endsWith(""new"")"
"assertEquals(id3,new Twitter(id3,pass3).verifyCredentials().getName())","assertEquals(id1,new Twitter(id3,pass3).verifyCredentials().getName())"
assertTrue(found),assertFalse(found)
assertTrue(found),assertFalse(found)
